
Main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  00000bac  00000c40  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000bac  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000014  0080010a  0080010a  00000c4a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c4a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000c7c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000130  00000000  00000000  00000cbc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000154e  00000000  00000000  00000dec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a70  00000000  00000000  0000233a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a71  00000000  00000000  00002daa  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000037c  00000000  00000000  0000381c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005d4  00000000  00000000  00003b98  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000f22  00000000  00000000  0000416c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000148  00000000  00000000  0000508e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 bd 02 	jmp	0x57a	; 0x57a <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec ea       	ldi	r30, 0xAC	; 172
  7c:	fb e0       	ldi	r31, 0x0B	; 11
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 30       	cpi	r26, 0x0A	; 10
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	aa e0       	ldi	r26, 0x0A	; 10
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ae 31       	cpi	r26, 0x1E	; 30
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <main>
  9e:	0c 94 d4 05 	jmp	0xba8	; 0xba8 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <i2c_start>:
	data[(length-1)] = i2c_read_nack();
	
	i2c_stop();
	
	return 0;
}
  a6:	ec eb       	ldi	r30, 0xBC	; 188
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	10 82       	st	Z, r1
  ac:	94 ea       	ldi	r25, 0xA4	; 164
  ae:	90 83       	st	Z, r25
  b0:	90 81       	ld	r25, Z
  b2:	99 23       	and	r25, r25
  b4:	ec f7       	brge	.-6      	; 0xb0 <i2c_start+0xa>
  b6:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
  ba:	98 7f       	andi	r25, 0xF8	; 248
  bc:	98 30       	cpi	r25, 0x08	; 8
  be:	a1 f4       	brne	.+40     	; 0xe8 <i2c_start+0x42>
  c0:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
  c4:	84 e8       	ldi	r24, 0x84	; 132
  c6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
  ca:	ec eb       	ldi	r30, 0xBC	; 188
  cc:	f0 e0       	ldi	r31, 0x00	; 0
  ce:	80 81       	ld	r24, Z
  d0:	88 23       	and	r24, r24
  d2:	ec f7       	brge	.-6      	; 0xce <i2c_start+0x28>
  d4:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
  d8:	98 7f       	andi	r25, 0xF8	; 248
  da:	98 31       	cpi	r25, 0x18	; 24
  dc:	39 f0       	breq	.+14     	; 0xec <i2c_start+0x46>
  de:	81 e0       	ldi	r24, 0x01	; 1
  e0:	90 34       	cpi	r25, 0x40	; 64
  e2:	29 f4       	brne	.+10     	; 0xee <i2c_start+0x48>
  e4:	80 e0       	ldi	r24, 0x00	; 0
  e6:	08 95       	ret
  e8:	81 e0       	ldi	r24, 0x01	; 1
  ea:	08 95       	ret
  ec:	80 e0       	ldi	r24, 0x00	; 0
  ee:	08 95       	ret

000000f0 <i2c_write>:
  f0:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
  f4:	84 e8       	ldi	r24, 0x84	; 132
  f6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
  fa:	ec eb       	ldi	r30, 0xBC	; 188
  fc:	f0 e0       	ldi	r31, 0x00	; 0
  fe:	80 81       	ld	r24, Z
 100:	88 23       	and	r24, r24
 102:	ec f7       	brge	.-6      	; 0xfe <i2c_write+0xe>
 104:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 108:	98 7f       	andi	r25, 0xF8	; 248
 10a:	81 e0       	ldi	r24, 0x01	; 1
 10c:	98 32       	cpi	r25, 0x28	; 40
 10e:	09 f4       	brne	.+2      	; 0x112 <i2c_write+0x22>
 110:	80 e0       	ldi	r24, 0x00	; 0
 112:	08 95       	ret

00000114 <i2c_read_ack>:
 114:	84 ec       	ldi	r24, 0xC4	; 196
 116:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 11a:	ec eb       	ldi	r30, 0xBC	; 188
 11c:	f0 e0       	ldi	r31, 0x00	; 0
 11e:	80 81       	ld	r24, Z
 120:	88 23       	and	r24, r24
 122:	ec f7       	brge	.-6      	; 0x11e <i2c_read_ack+0xa>
 124:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 128:	08 95       	ret

0000012a <i2c_read_nack>:
 12a:	84 e8       	ldi	r24, 0x84	; 132
 12c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 130:	ec eb       	ldi	r30, 0xBC	; 188
 132:	f0 e0       	ldi	r31, 0x00	; 0
 134:	80 81       	ld	r24, Z
 136:	88 23       	and	r24, r24
 138:	ec f7       	brge	.-6      	; 0x134 <i2c_read_nack+0xa>
 13a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 13e:	08 95       	ret

00000140 <i2c_writeReg>:

uint8_t i2c_writeReg(uint8_t devaddr, uint8_t regaddr, uint8_t* data, uint16_t length)
{
 140:	cf 92       	push	r12
 142:	df 92       	push	r13
 144:	ff 92       	push	r15
 146:	0f 93       	push	r16
 148:	1f 93       	push	r17
 14a:	cf 93       	push	r28
 14c:	df 93       	push	r29
 14e:	c6 2f       	mov	r28, r22
 150:	6a 01       	movw	r12, r20
 152:	89 01       	movw	r16, r18
	if (i2c_start(devaddr | 0x00)) return 1;
 154:	0e 94 53 00 	call	0xa6	; 0xa6 <i2c_start>
 158:	f8 2e       	mov	r15, r24
 15a:	81 11       	cpse	r24, r1
 15c:	15 c0       	rjmp	.+42     	; 0x188 <i2c_writeReg+0x48>

	i2c_write(regaddr);
 15e:	8c 2f       	mov	r24, r28
 160:	0e 94 78 00 	call	0xf0	; 0xf0 <i2c_write>

	for (uint16_t i = 0; i < length; i++)
 164:	01 15       	cp	r16, r1
 166:	11 05       	cpc	r17, r1
 168:	59 f0       	breq	.+22     	; 0x180 <i2c_writeReg+0x40>
 16a:	e6 01       	movw	r28, r12
 16c:	0c 0d       	add	r16, r12
 16e:	1d 1d       	adc	r17, r13
	{
		if (i2c_write(data[i])) return 1;
 170:	89 91       	ld	r24, Y+
 172:	0e 94 78 00 	call	0xf0	; 0xf0 <i2c_write>
 176:	81 11       	cpse	r24, r1
 178:	0a c0       	rjmp	.+20     	; 0x18e <i2c_writeReg+0x4e>
{
	if (i2c_start(devaddr | 0x00)) return 1;

	i2c_write(regaddr);

	for (uint16_t i = 0; i < length; i++)
 17a:	c0 17       	cp	r28, r16
 17c:	d1 07       	cpc	r29, r17
 17e:	c1 f7       	brne	.-16     	; 0x170 <i2c_writeReg+0x30>
}

void i2c_stop(void)
{
	// transmit STOP condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 180:	84 e9       	ldi	r24, 0x94	; 148
 182:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 186:	05 c0       	rjmp	.+10     	; 0x192 <i2c_writeReg+0x52>
	return 0;
}

uint8_t i2c_writeReg(uint8_t devaddr, uint8_t regaddr, uint8_t* data, uint16_t length)
{
	if (i2c_start(devaddr | 0x00)) return 1;
 188:	ff 24       	eor	r15, r15
 18a:	f3 94       	inc	r15
 18c:	02 c0       	rjmp	.+4      	; 0x192 <i2c_writeReg+0x52>

	i2c_write(regaddr);

	for (uint16_t i = 0; i < length; i++)
	{
		if (i2c_write(data[i])) return 1;
 18e:	ff 24       	eor	r15, r15
 190:	f3 94       	inc	r15
	}

	i2c_stop();

	return 0;
}
 192:	8f 2d       	mov	r24, r15
 194:	df 91       	pop	r29
 196:	cf 91       	pop	r28
 198:	1f 91       	pop	r17
 19a:	0f 91       	pop	r16
 19c:	ff 90       	pop	r15
 19e:	df 90       	pop	r13
 1a0:	cf 90       	pop	r12
 1a2:	08 95       	ret

000001a4 <i2c_readReg>:

uint8_t i2c_readReg(uint8_t devaddr, uint8_t regaddr, uint8_t* data, uint16_t length)
{
 1a4:	af 92       	push	r10
 1a6:	bf 92       	push	r11
 1a8:	df 92       	push	r13
 1aa:	ef 92       	push	r14
 1ac:	ff 92       	push	r15
 1ae:	0f 93       	push	r16
 1b0:	1f 93       	push	r17
 1b2:	cf 93       	push	r28
 1b4:	df 93       	push	r29
 1b6:	18 2f       	mov	r17, r24
 1b8:	06 2f       	mov	r16, r22
 1ba:	5a 01       	movw	r10, r20
 1bc:	e9 01       	movw	r28, r18
	if (i2c_start(devaddr)) return 1;
 1be:	0e 94 53 00 	call	0xa6	; 0xa6 <i2c_start>
 1c2:	81 11       	cpse	r24, r1
 1c4:	22 c0       	rjmp	.+68     	; 0x20a <i2c_readReg+0x66>

	i2c_write(regaddr);
 1c6:	80 2f       	mov	r24, r16
 1c8:	0e 94 78 00 	call	0xf0	; 0xf0 <i2c_write>

	if (i2c_start(devaddr | 0x01)) return 1;
 1cc:	81 2f       	mov	r24, r17
 1ce:	81 60       	ori	r24, 0x01	; 1
 1d0:	0e 94 53 00 	call	0xa6	; 0xa6 <i2c_start>
 1d4:	d8 2e       	mov	r13, r24
 1d6:	81 11       	cpse	r24, r1
 1d8:	1b c0       	rjmp	.+54     	; 0x210 <i2c_readReg+0x6c>

	for (uint16_t i = 0; i < (length-1); i++)
 1da:	8e 01       	movw	r16, r28
 1dc:	01 50       	subi	r16, 0x01	; 1
 1de:	11 09       	sbc	r17, r1
 1e0:	51 f0       	breq	.+20     	; 0x1f6 <i2c_readReg+0x52>
 1e2:	e5 01       	movw	r28, r10
 1e4:	75 01       	movw	r14, r10
 1e6:	e0 0e       	add	r14, r16
 1e8:	f1 1e       	adc	r15, r17
	{
		data[i] = i2c_read_ack();
 1ea:	0e 94 8a 00 	call	0x114	; 0x114 <i2c_read_ack>
 1ee:	89 93       	st	Y+, r24

	i2c_write(regaddr);

	if (i2c_start(devaddr | 0x01)) return 1;

	for (uint16_t i = 0; i < (length-1); i++)
 1f0:	ec 16       	cp	r14, r28
 1f2:	fd 06       	cpc	r15, r29
 1f4:	d1 f7       	brne	.-12     	; 0x1ea <i2c_readReg+0x46>
	{
		data[i] = i2c_read_ack();
	}
	data[(length-1)] = i2c_read_nack();
 1f6:	e5 01       	movw	r28, r10
 1f8:	c0 0f       	add	r28, r16
 1fa:	d1 1f       	adc	r29, r17
 1fc:	0e 94 95 00 	call	0x12a	; 0x12a <i2c_read_nack>
 200:	88 83       	st	Y, r24
}

void i2c_stop(void)
{
	// transmit STOP condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 202:	84 e9       	ldi	r24, 0x94	; 148
 204:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 208:	05 c0       	rjmp	.+10     	; 0x214 <i2c_readReg+0x70>
	return 0;
}

uint8_t i2c_readReg(uint8_t devaddr, uint8_t regaddr, uint8_t* data, uint16_t length)
{
	if (i2c_start(devaddr)) return 1;
 20a:	dd 24       	eor	r13, r13
 20c:	d3 94       	inc	r13
 20e:	02 c0       	rjmp	.+4      	; 0x214 <i2c_readReg+0x70>

	i2c_write(regaddr);

	if (i2c_start(devaddr | 0x01)) return 1;
 210:	dd 24       	eor	r13, r13
 212:	d3 94       	inc	r13
	data[(length-1)] = i2c_read_nack();

	i2c_stop();

	return 0;
}
 214:	8d 2d       	mov	r24, r13
 216:	df 91       	pop	r29
 218:	cf 91       	pop	r28
 21a:	1f 91       	pop	r17
 21c:	0f 91       	pop	r16
 21e:	ff 90       	pop	r15
 220:	ef 90       	pop	r14
 222:	df 90       	pop	r13
 224:	bf 90       	pop	r11
 226:	af 90       	pop	r10
 228:	08 95       	ret

0000022a <print>:
	print(*dat,id);
	free(dat);
	
}
void SPI_sensor()
{
 22a:	df 92       	push	r13
 22c:	ef 92       	push	r14
 22e:	ff 92       	push	r15
 230:	0f 93       	push	r16
 232:	1f 93       	push	r17
 234:	cf 93       	push	r28
 236:	df 93       	push	r29
 238:	d6 2e       	mov	r13, r22
 23a:	ca e0       	ldi	r28, 0x0A	; 10
 23c:	d0 e0       	ldi	r29, 0x00	; 0
 23e:	0f 2e       	mov	r0, r31
 240:	fa e0       	ldi	r31, 0x0A	; 10
 242:	ef 2e       	mov	r14, r31
 244:	f1 2c       	mov	r15, r1
 246:	f0 2d       	mov	r31, r0
 248:	b7 01       	movw	r22, r14
 24a:	0e 94 8b 04 	call	0x916	; 0x916 <__divmodhi4>
 24e:	06 2f       	mov	r16, r22
 250:	17 2f       	mov	r17, r23
 252:	c0 96       	adiw	r24, 0x30	; 48
 254:	0e 94 3f 03 	call	0x67e	; 0x67e <serialWrite>
 258:	80 2f       	mov	r24, r16
 25a:	91 2f       	mov	r25, r17
 25c:	00 97       	sbiw	r24, 0x00	; 0
 25e:	11 f0       	breq	.+4      	; 0x264 <print+0x3a>
 260:	21 97       	sbiw	r28, 0x01	; 1
 262:	91 f7       	brne	.-28     	; 0x248 <print+0x1e>
 264:	8d 2d       	mov	r24, r13
 266:	90 e0       	ldi	r25, 0x00	; 0
 268:	0e 94 3f 03 	call	0x67e	; 0x67e <serialWrite>
 26c:	df 91       	pop	r29
 26e:	cf 91       	pop	r28
 270:	1f 91       	pop	r17
 272:	0f 91       	pop	r16
 274:	ff 90       	pop	r15
 276:	ef 90       	pop	r14
 278:	df 90       	pop	r13
 27a:	08 95       	ret

0000027c <adc_read>:
 27c:	ec e7       	ldi	r30, 0x7C	; 124
 27e:	f0 e0       	ldi	r31, 0x00	; 0
 280:	90 81       	ld	r25, Z
 282:	98 7f       	andi	r25, 0xF8	; 248
 284:	87 70       	andi	r24, 0x07	; 7
 286:	89 2b       	or	r24, r25
 288:	80 83       	st	Z, r24
 28a:	ea e7       	ldi	r30, 0x7A	; 122
 28c:	f0 e0       	ldi	r31, 0x00	; 0
 28e:	80 81       	ld	r24, Z
 290:	80 64       	ori	r24, 0x40	; 64
 292:	80 83       	st	Z, r24
 294:	80 81       	ld	r24, Z
 296:	86 fd       	sbrc	r24, 6
 298:	fd cf       	rjmp	.-6      	; 0x294 <adc_read+0x18>
 29a:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 29e:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 2a2:	08 95       	ret

000002a4 <I2CW>:
 2a4:	ff 92       	push	r15
 2a6:	0f 93       	push	r16
 2a8:	1f 93       	push	r17
 2aa:	cf 93       	push	r28
 2ac:	df 93       	push	r29
 2ae:	18 2f       	mov	r17, r24
 2b0:	06 2f       	mov	r16, r22
 2b2:	f4 2e       	mov	r15, r20
 2b4:	81 e0       	ldi	r24, 0x01	; 1
 2b6:	90 e0       	ldi	r25, 0x00	; 0
 2b8:	0e 94 b3 04 	call	0x966	; 0x966 <malloc>
 2bc:	ec 01       	movw	r28, r24
 2be:	f8 82       	st	Y, r15
 2c0:	21 e0       	ldi	r18, 0x01	; 1
 2c2:	30 e0       	ldi	r19, 0x00	; 0
 2c4:	ac 01       	movw	r20, r24
 2c6:	60 2f       	mov	r22, r16
 2c8:	81 2f       	mov	r24, r17
 2ca:	0e 94 a0 00 	call	0x140	; 0x140 <i2c_writeReg>
 2ce:	ce 01       	movw	r24, r28
 2d0:	0e 94 4b 05 	call	0xa96	; 0xa96 <free>
 2d4:	df 91       	pop	r29
 2d6:	cf 91       	pop	r28
 2d8:	1f 91       	pop	r17
 2da:	0f 91       	pop	r16
 2dc:	ff 90       	pop	r15
 2de:	08 95       	ret

000002e0 <session_init>:
 2e0:	0f 93       	push	r16
 2e2:	1f 93       	push	r17
 2e4:	cf 93       	push	r28
 2e6:	df 93       	push	r29
 2e8:	0e 94 47 03 	call	0x68e	; 0x68e <serialRead>
 2ec:	90 e0       	ldi	r25, 0x00	; 0
 2ee:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <delay+0x1>
 2f2:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <delay>
 2f6:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <delay>
 2fa:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <delay+0x1>
 2fe:	89 2b       	or	r24, r25
 300:	31 f4       	brne	.+12     	; 0x30e <session_init+0x2e>
 302:	8a e0       	ldi	r24, 0x0A	; 10
 304:	90 e0       	ldi	r25, 0x00	; 0
 306:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <delay+0x1>
 30a:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <delay>
 30e:	0e 94 47 03 	call	0x68e	; 0x68e <serialRead>
 312:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <A1>
 316:	0e 94 47 03 	call	0x68e	; 0x68e <serialRead>
 31a:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <A2>
 31e:	0e 94 47 03 	call	0x68e	; 0x68e <serialRead>
 322:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
 326:	0e 94 47 03 	call	0x68e	; 0x68e <serialRead>
 32a:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <A4>
 32e:	0e 94 47 03 	call	0x68e	; 0x68e <serialRead>
 332:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <A5>
 336:	0e 94 47 03 	call	0x68e	; 0x68e <serialRead>
 33a:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <A6>
 33e:	c0 e0       	ldi	r28, 0x00	; 0
 340:	d0 e0       	ldi	r29, 0x00	; 0
 342:	0e 94 47 03 	call	0x68e	; 0x68e <serialRead>
 346:	fe 01       	movw	r30, r28
 348:	ee 0f       	add	r30, r30
 34a:	ff 1f       	adc	r31, r31
 34c:	ee 0f       	add	r30, r30
 34e:	ff 1f       	adc	r31, r31
 350:	e4 5f       	subi	r30, 0xF4	; 244
 352:	fe 4f       	sbci	r31, 0xFE	; 254
 354:	80 83       	st	Z, r24
 356:	80 81       	ld	r24, Z
 358:	8f 3f       	cpi	r24, 0xFF	; 255
 35a:	11 f1       	breq	.+68     	; 0x3a0 <session_init+0xc0>
 35c:	0e 94 47 03 	call	0x68e	; 0x68e <serialRead>
 360:	8e 01       	movw	r16, r28
 362:	00 0f       	add	r16, r16
 364:	11 1f       	adc	r17, r17
 366:	00 0f       	add	r16, r16
 368:	11 1f       	adc	r17, r17
 36a:	04 5f       	subi	r16, 0xF4	; 244
 36c:	1e 4f       	sbci	r17, 0xFE	; 254
 36e:	f8 01       	movw	r30, r16
 370:	82 83       	std	Z+2, r24	; 0x02
 372:	0e 94 47 03 	call	0x68e	; 0x68e <serialRead>
 376:	f8 01       	movw	r30, r16
 378:	83 83       	std	Z+3, r24	; 0x03
 37a:	83 81       	ldd	r24, Z+3	; 0x03
 37c:	88 23       	and	r24, r24
 37e:	31 f0       	breq	.+12     	; 0x38c <session_init+0xac>
 380:	f8 01       	movw	r30, r16
 382:	43 81       	ldd	r20, Z+3	; 0x03
 384:	62 81       	ldd	r22, Z+2	; 0x02
 386:	80 81       	ld	r24, Z
 388:	0e 94 52 01 	call	0x2a4	; 0x2a4 <I2CW>
 38c:	0e 94 47 03 	call	0x68e	; 0x68e <serialRead>
 390:	fe 01       	movw	r30, r28
 392:	ee 0f       	add	r30, r30
 394:	ff 1f       	adc	r31, r31
 396:	ee 0f       	add	r30, r30
 398:	ff 1f       	adc	r31, r31
 39a:	e4 5f       	subi	r30, 0xF4	; 244
 39c:	fe 4f       	sbci	r31, 0xFE	; 254
 39e:	81 83       	std	Z+1, r24	; 0x01
 3a0:	21 96       	adiw	r28, 0x01	; 1
 3a2:	c2 30       	cpi	r28, 0x02	; 2
 3a4:	d1 05       	cpc	r29, r1
 3a6:	69 f6       	brne	.-102    	; 0x342 <session_init+0x62>
 3a8:	df 91       	pop	r29
 3aa:	cf 91       	pop	r28
 3ac:	1f 91       	pop	r17
 3ae:	0f 91       	pop	r16
 3b0:	08 95       	ret

000003b2 <spi_tranceiver>:
 3b2:	8e bd       	out	0x2e, r24	; 46
 3b4:	0d b4       	in	r0, 0x2d	; 45
 3b6:	07 fe       	sbrs	r0, 7
 3b8:	fd cf       	rjmp	.-6      	; 0x3b4 <spi_tranceiver+0x2>
 3ba:	8e b5       	in	r24, 0x2e	; 46
 3bc:	08 95       	ret

000003be <spi_init_master>:
 3be:	8c e2       	ldi	r24, 0x2C	; 44
 3c0:	84 b9       	out	0x04, r24	; 4
 3c2:	2a 9a       	sbi	0x05, 2	; 5
 3c4:	80 e5       	ldi	r24, 0x50	; 80
 3c6:	8c bd       	out	0x2c, r24	; 44
 3c8:	08 95       	ret

000003ca <ReadSPI>:
 3ca:	cf 93       	push	r28
 3cc:	c6 2f       	mov	r28, r22
 3ce:	2a 98       	cbi	0x05, 2	; 5
 3d0:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <spi_tranceiver>
 3d4:	8f ef       	ldi	r24, 0xFF	; 255
 3d6:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <spi_tranceiver>
 3da:	2a 9a       	sbi	0x05, 2	; 5
 3dc:	6c 2f       	mov	r22, r28
 3de:	90 e0       	ldi	r25, 0x00	; 0
 3e0:	0e 94 15 01 	call	0x22a	; 0x22a <print>
 3e4:	8d e0       	ldi	r24, 0x0D	; 13
 3e6:	90 e0       	ldi	r25, 0x00	; 0
 3e8:	0e 94 3f 03 	call	0x67e	; 0x67e <serialWrite>
 3ec:	cf 91       	pop	r28
 3ee:	08 95       	ret

000003f0 <main>:
 3f0:	0e 94 df 01 	call	0x3be	; 0x3be <spi_init_master>
 3f4:	87 e6       	ldi	r24, 0x67	; 103
 3f6:	90 e0       	ldi	r25, 0x00	; 0
 3f8:	0e 94 4f 03 	call	0x69e	; 0x69e <serial_init>
 3fc:	2a 98       	cbi	0x05, 2	; 5
 3fe:	84 e7       	ldi	r24, 0x74	; 116
 400:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <spi_tranceiver>
 404:	8b e4       	ldi	r24, 0x4B	; 75
 406:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <spi_tranceiver>
 40a:	2a 9a       	sbi	0x05, 2	; 5
 40c:	61 e6       	ldi	r22, 0x61	; 97
 40e:	8a ef       	ldi	r24, 0xFA	; 250
 410:	0e 94 e5 01 	call	0x3ca	; 0x3ca <ReadSPI>
 414:	8f e3       	ldi	r24, 0x3F	; 63
 416:	9c e9       	ldi	r25, 0x9C	; 156
 418:	01 97       	sbiw	r24, 0x01	; 1
 41a:	f1 f7       	brne	.-4      	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
 41c:	00 c0       	rjmp	.+0      	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
 41e:	00 00       	nop
 420:	62 e6       	ldi	r22, 0x62	; 98
 422:	8b ef       	ldi	r24, 0xFB	; 251
 424:	0e 94 e5 01 	call	0x3ca	; 0x3ca <ReadSPI>
 428:	9f ef       	ldi	r25, 0xFF	; 255
 42a:	23 ed       	ldi	r18, 0xD3	; 211
 42c:	80 e3       	ldi	r24, 0x30	; 48
 42e:	91 50       	subi	r25, 0x01	; 1
 430:	20 40       	sbci	r18, 0x00	; 0
 432:	80 40       	sbci	r24, 0x00	; 0
 434:	e1 f7       	brne	.-8      	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
 436:	00 c0       	rjmp	.+0      	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
 438:	00 00       	nop
 43a:	e8 cf       	rjmp	.-48     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>

0000043c <Analog_digital_sensor>:
 43c:	cf 93       	push	r28
 43e:	c4 2f       	mov	r28, r20
 440:	61 30       	cpi	r22, 0x01	; 1
 442:	71 05       	cpc	r23, r1
 444:	09 f0       	breq	.+2      	; 0x448 <Analog_digital_sensor+0xc>
 446:	5f c0       	rjmp	.+190    	; 0x506 <Analog_digital_sensor+0xca>
 448:	97 b1       	in	r25, 0x07	; 7
 44a:	e1 e0       	ldi	r30, 0x01	; 1
 44c:	f0 e0       	ldi	r31, 0x00	; 0
 44e:	08 2e       	mov	r0, r24
 450:	02 c0       	rjmp	.+4      	; 0x456 <Analog_digital_sensor+0x1a>
 452:	ee 0f       	add	r30, r30
 454:	ff 1f       	adc	r31, r31
 456:	0a 94       	dec	r0
 458:	e2 f7       	brpl	.-8      	; 0x452 <Analog_digital_sensor+0x16>
 45a:	9e 2b       	or	r25, r30
 45c:	97 b9       	out	0x07, r25	; 7
 45e:	98 b1       	in	r25, 0x08	; 8
 460:	9e 27       	eor	r25, r30
 462:	98 b9       	out	0x08, r25	; 8
 464:	4a e0       	ldi	r20, 0x0A	; 10
 466:	4a 95       	dec	r20
 468:	f1 f7       	brne	.-4      	; 0x466 <Analog_digital_sensor+0x2a>
 46a:	00 c0       	rjmp	.+0      	; 0x46c <Analog_digital_sensor+0x30>
 46c:	98 b1       	in	r25, 0x08	; 8
 46e:	9e 2b       	or	r25, r30
 470:	98 b9       	out	0x08, r25	; 8
 472:	5a e1       	ldi	r21, 0x1A	; 26
 474:	5a 95       	dec	r21
 476:	f1 f7       	brne	.-4      	; 0x474 <Analog_digital_sensor+0x38>
 478:	00 c0       	rjmp	.+0      	; 0x47a <Analog_digital_sensor+0x3e>
 47a:	98 b1       	in	r25, 0x08	; 8
 47c:	9e 27       	eor	r25, r30
 47e:	98 b9       	out	0x08, r25	; 8
 480:	97 b1       	in	r25, 0x07	; 7
 482:	9e 27       	eor	r25, r30
 484:	97 b9       	out	0x07, r25	; 7
 486:	26 b1       	in	r18, 0x06	; 6
 488:	30 e0       	ldi	r19, 0x00	; 0
 48a:	08 2e       	mov	r0, r24
 48c:	02 c0       	rjmp	.+4      	; 0x492 <Analog_digital_sensor+0x56>
 48e:	35 95       	asr	r19
 490:	27 95       	ror	r18
 492:	0a 94       	dec	r0
 494:	e2 f7       	brpl	.-8      	; 0x48e <Analog_digital_sensor+0x52>
 496:	20 fd       	sbrc	r18, 0
 498:	3f c0       	rjmp	.+126    	; 0x518 <Analog_digital_sensor+0xdc>
 49a:	48 ee       	ldi	r20, 0xE8	; 232
 49c:	53 e0       	ldi	r21, 0x03	; 3
 49e:	95 e0       	ldi	r25, 0x05	; 5
 4a0:	9a 95       	dec	r25
 4a2:	f1 f7       	brne	.-4      	; 0x4a0 <Analog_digital_sensor+0x64>
 4a4:	00 00       	nop
 4a6:	26 b1       	in	r18, 0x06	; 6
 4a8:	30 e0       	ldi	r19, 0x00	; 0
 4aa:	2e 23       	and	r18, r30
 4ac:	3f 23       	and	r19, r31
 4ae:	23 2b       	or	r18, r19
 4b0:	99 f5       	brne	.+102    	; 0x518 <Analog_digital_sensor+0xdc>
 4b2:	41 50       	subi	r20, 0x01	; 1
 4b4:	51 09       	sbc	r21, r1
 4b6:	99 f7       	brne	.-26     	; 0x49e <Analog_digital_sensor+0x62>
 4b8:	2f c0       	rjmp	.+94     	; 0x518 <Analog_digital_sensor+0xdc>
 4ba:	60 e0       	ldi	r22, 0x00	; 0
 4bc:	70 e0       	ldi	r23, 0x00	; 0
 4be:	45 e3       	ldi	r20, 0x35	; 53
 4c0:	4a 95       	dec	r20
 4c2:	f1 f7       	brne	.-4      	; 0x4c0 <Analog_digital_sensor+0x84>
 4c4:	00 00       	nop
 4c6:	6f 5f       	subi	r22, 0xFF	; 255
 4c8:	7f 4f       	sbci	r23, 0xFF	; 255
 4ca:	86 b1       	in	r24, 0x06	; 6
 4cc:	90 e0       	ldi	r25, 0x00	; 0
 4ce:	8e 23       	and	r24, r30
 4d0:	9f 23       	and	r25, r31
 4d2:	89 2b       	or	r24, r25
 4d4:	21 f0       	breq	.+8      	; 0x4de <Analog_digital_sensor+0xa2>
 4d6:	68 3a       	cpi	r22, 0xA8	; 168
 4d8:	51 e6       	ldi	r21, 0x61	; 97
 4da:	75 07       	cpc	r23, r21
 4dc:	81 f7       	brne	.-32     	; 0x4be <Analog_digital_sensor+0x82>
 4de:	07 2e       	mov	r0, r23
 4e0:	00 0c       	add	r0, r0
 4e2:	88 0b       	sbc	r24, r24
 4e4:	99 0b       	sbc	r25, r25
 4e6:	0e 94 92 03 	call	0x724	; 0x724 <__floatsisf>
 4ea:	2e e0       	ldi	r18, 0x0E	; 14
 4ec:	3d e2       	ldi	r19, 0x2D	; 45
 4ee:	42 e3       	ldi	r20, 0x32	; 50
 4f0:	5e e3       	ldi	r21, 0x3E	; 62
 4f2:	0e 94 f6 03 	call	0x7ec	; 0x7ec <__mulsf3>
 4f6:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <__fixsfsi>
 4fa:	dc 01       	movw	r26, r24
 4fc:	cb 01       	movw	r24, r22
 4fe:	6c 2f       	mov	r22, r28
 500:	0e 94 15 01 	call	0x22a	; 0x22a <print>
 504:	16 c0       	rjmp	.+44     	; 0x532 <Analog_digital_sensor+0xf6>
 506:	62 30       	cpi	r22, 0x02	; 2
 508:	71 05       	cpc	r23, r1
 50a:	99 f4       	brne	.+38     	; 0x532 <Analog_digital_sensor+0xf6>
 50c:	0e 94 3e 01 	call	0x27c	; 0x27c <adc_read>
 510:	6c 2f       	mov	r22, r28
 512:	0e 94 15 01 	call	0x22a	; 0x22a <print>
 516:	0d c0       	rjmp	.+26     	; 0x532 <Analog_digital_sensor+0xf6>
 518:	26 b1       	in	r18, 0x06	; 6
 51a:	30 e0       	ldi	r19, 0x00	; 0
 51c:	a9 01       	movw	r20, r18
 51e:	02 c0       	rjmp	.+4      	; 0x524 <Analog_digital_sensor+0xe8>
 520:	55 95       	asr	r21
 522:	47 95       	ror	r20
 524:	8a 95       	dec	r24
 526:	e2 f7       	brpl	.-8      	; 0x520 <Analog_digital_sensor+0xe4>
 528:	40 fd       	sbrc	r20, 0
 52a:	c7 cf       	rjmp	.-114    	; 0x4ba <Analog_digital_sensor+0x7e>
 52c:	60 e0       	ldi	r22, 0x00	; 0
 52e:	70 e0       	ldi	r23, 0x00	; 0
 530:	d6 cf       	rjmp	.-84     	; 0x4de <Analog_digital_sensor+0xa2>
 532:	cf 91       	pop	r28
 534:	08 95       	ret

00000536 <I2C_sensor>:
 536:	ff 92       	push	r15
 538:	0f 93       	push	r16
 53a:	1f 93       	push	r17
 53c:	cf 93       	push	r28
 53e:	df 93       	push	r29
 540:	08 2f       	mov	r16, r24
 542:	f6 2e       	mov	r15, r22
 544:	14 2f       	mov	r17, r20
 546:	81 e0       	ldi	r24, 0x01	; 1
 548:	90 e0       	ldi	r25, 0x00	; 0
 54a:	0e 94 b3 04 	call	0x966	; 0x966 <malloc>
 54e:	ec 01       	movw	r28, r24
 550:	21 e0       	ldi	r18, 0x01	; 1
 552:	30 e0       	ldi	r19, 0x00	; 0
 554:	ac 01       	movw	r20, r24
 556:	6f 2d       	mov	r22, r15
 558:	80 2f       	mov	r24, r16
 55a:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <i2c_readReg>
 55e:	88 81       	ld	r24, Y
 560:	61 2f       	mov	r22, r17
 562:	90 e0       	ldi	r25, 0x00	; 0
 564:	0e 94 15 01 	call	0x22a	; 0x22a <print>
 568:	ce 01       	movw	r24, r28
 56a:	0e 94 4b 05 	call	0xa96	; 0xa96 <free>
 56e:	df 91       	pop	r29
 570:	cf 91       	pop	r28
 572:	1f 91       	pop	r17
 574:	0f 91       	pop	r16
 576:	ff 90       	pop	r15
 578:	08 95       	ret

0000057a <__vector_11>:
}



ISR(TIMER1_COMPA_vect)
{
 57a:	1f 92       	push	r1
 57c:	0f 92       	push	r0
 57e:	0f b6       	in	r0, 0x3f	; 63
 580:	0f 92       	push	r0
 582:	11 24       	eor	r1, r1
 584:	2f 93       	push	r18
 586:	3f 93       	push	r19
 588:	4f 93       	push	r20
 58a:	5f 93       	push	r21
 58c:	6f 93       	push	r22
 58e:	7f 93       	push	r23
 590:	8f 93       	push	r24
 592:	9f 93       	push	r25
 594:	af 93       	push	r26
 596:	bf 93       	push	r27
 598:	ef 93       	push	r30
 59a:	ff 93       	push	r31
	if (count_delay>=delay)
 59c:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <count_delay>
 5a0:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <count_delay+0x1>
 5a4:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <delay>
 5a8:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <delay+0x1>
 5ac:	28 17       	cp	r18, r24
 5ae:	39 07       	cpc	r19, r25
 5b0:	08 f4       	brcc	.+2      	; 0x5b4 <__vector_11+0x3a>
 5b2:	4b c0       	rjmp	.+150    	; 0x64a <__vector_11+0xd0>
	{
		count_delay=1;
 5b4:	81 e0       	ldi	r24, 0x01	; 1
 5b6:	90 e0       	ldi	r25, 0x00	; 0
 5b8:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <count_delay+0x1>
 5bc:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <count_delay>
		Analog_digital_sensor(0,A1,'a');
 5c0:	60 91 18 01 	lds	r22, 0x0118	; 0x800118 <A1>
 5c4:	70 e0       	ldi	r23, 0x00	; 0
 5c6:	41 e6       	ldi	r20, 0x61	; 97
 5c8:	80 e0       	ldi	r24, 0x00	; 0
 5ca:	90 e0       	ldi	r25, 0x00	; 0
 5cc:	0e 94 1e 02 	call	0x43c	; 0x43c <Analog_digital_sensor>
		Analog_digital_sensor(1,A2,'b');
 5d0:	60 91 17 01 	lds	r22, 0x0117	; 0x800117 <A2>
 5d4:	70 e0       	ldi	r23, 0x00	; 0
 5d6:	42 e6       	ldi	r20, 0x62	; 98
 5d8:	81 e0       	ldi	r24, 0x01	; 1
 5da:	90 e0       	ldi	r25, 0x00	; 0
 5dc:	0e 94 1e 02 	call	0x43c	; 0x43c <Analog_digital_sensor>
		Analog_digital_sensor(2,A3,'c');
 5e0:	60 91 0a 01 	lds	r22, 0x010A	; 0x80010a <__data_end>
 5e4:	70 e0       	ldi	r23, 0x00	; 0
 5e6:	43 e6       	ldi	r20, 0x63	; 99
 5e8:	82 e0       	ldi	r24, 0x02	; 2
 5ea:	90 e0       	ldi	r25, 0x00	; 0
 5ec:	0e 94 1e 02 	call	0x43c	; 0x43c <Analog_digital_sensor>
		Analog_digital_sensor(3,A4,'d');
 5f0:	60 91 16 01 	lds	r22, 0x0116	; 0x800116 <A4>
 5f4:	70 e0       	ldi	r23, 0x00	; 0
 5f6:	44 e6       	ldi	r20, 0x64	; 100
 5f8:	83 e0       	ldi	r24, 0x03	; 3
 5fa:	90 e0       	ldi	r25, 0x00	; 0
 5fc:	0e 94 1e 02 	call	0x43c	; 0x43c <Analog_digital_sensor>
		//Analog_digital_sensor(4,A5,'e');
		//Analog_digital_sensor(1,A6,'f');
		if(I2C[0].addr!=0xFF)
 600:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <I2C>
 604:	8f 3f       	cpi	r24, 0xFF	; 255
 606:	49 f0       	breq	.+18     	; 0x61a <__vector_11+0xa0>
		I2C_sensor(I2C[0].addr,I2C[0].R_reg,'g');
 608:	ec e0       	ldi	r30, 0x0C	; 12
 60a:	f1 e0       	ldi	r31, 0x01	; 1
 60c:	61 81       	ldd	r22, Z+1	; 0x01
 60e:	80 81       	ld	r24, Z
 610:	70 e0       	ldi	r23, 0x00	; 0
 612:	47 e6       	ldi	r20, 0x67	; 103
 614:	90 e0       	ldi	r25, 0x00	; 0
 616:	0e 94 9b 02 	call	0x536	; 0x536 <I2C_sensor>
		if(I2C[1].addr!=0xFF)
 61a:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <I2C+0x4>
 61e:	8f 3f       	cpi	r24, 0xFF	; 255
 620:	49 f0       	breq	.+18     	; 0x634 <__vector_11+0xba>
		I2C_sensor(I2C[1].addr,I2C[1].R_reg,'h');
 622:	ec e0       	ldi	r30, 0x0C	; 12
 624:	f1 e0       	ldi	r31, 0x01	; 1
 626:	65 81       	ldd	r22, Z+5	; 0x05
 628:	84 81       	ldd	r24, Z+4	; 0x04
 62a:	70 e0       	ldi	r23, 0x00	; 0
 62c:	48 e6       	ldi	r20, 0x68	; 104
 62e:	90 e0       	ldi	r25, 0x00	; 0
 630:	0e 94 9b 02 	call	0x536	; 0x536 <I2C_sensor>
		serialWrite('x');
 634:	88 e7       	ldi	r24, 0x78	; 120
 636:	90 e0       	ldi	r25, 0x00	; 0
 638:	0e 94 3f 03 	call	0x67e	; 0x67e <serialWrite>
		if(serialRead()){
 63c:	0e 94 47 03 	call	0x68e	; 0x68e <serialRead>
 640:	88 23       	and	r24, r24
 642:	61 f0       	breq	.+24     	; 0x65c <__vector_11+0xe2>
			session_init();
 644:	0e 94 70 01 	call	0x2e0	; 0x2e0 <session_init>
 648:	09 c0       	rjmp	.+18     	; 0x65c <__vector_11+0xe2>
		}
	} 
	else
	{
		count_delay++;
 64a:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <count_delay>
 64e:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <count_delay+0x1>
 652:	01 96       	adiw	r24, 0x01	; 1
 654:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <count_delay+0x1>
 658:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <count_delay>
	}
	
	
}
 65c:	ff 91       	pop	r31
 65e:	ef 91       	pop	r30
 660:	bf 91       	pop	r27
 662:	af 91       	pop	r26
 664:	9f 91       	pop	r25
 666:	8f 91       	pop	r24
 668:	7f 91       	pop	r23
 66a:	6f 91       	pop	r22
 66c:	5f 91       	pop	r21
 66e:	4f 91       	pop	r20
 670:	3f 91       	pop	r19
 672:	2f 91       	pop	r18
 674:	0f 90       	pop	r0
 676:	0f be       	out	0x3f, r0	; 63
 678:	0f 90       	pop	r0
 67a:	1f 90       	pop	r1
 67c:	18 95       	reti

0000067e <serialWrite>:


unsigned char serialCheckRxComplete(void)
{
	return( UCSR0A & _BV(RXC0)) ;  // _BV(x) macro set bit x in a byte which is equivalent to 1<<x. nonzero if serial data is available to read.
}
 67e:	e0 ec       	ldi	r30, 0xC0	; 192
 680:	f0 e0       	ldi	r31, 0x00	; 0
 682:	90 81       	ld	r25, Z
 684:	95 ff       	sbrs	r25, 5
 686:	fd cf       	rjmp	.-6      	; 0x682 <serialWrite+0x4>
 688:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 68c:	08 95       	ret

0000068e <serialRead>:


unsigned char serialRead(void)
{
	while( !(UCSR0A & (1 << RXC0)) )
 68e:	e0 ec       	ldi	r30, 0xC0	; 192
 690:	f0 e0       	ldi	r31, 0x00	; 0
 692:	80 81       	ld	r24, Z
 694:	88 23       	and	r24, r24
 696:	ec f7       	brge	.-6      	; 0x692 <serialRead+0x4>
	;
	return UDR0;
 698:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
}
 69c:	08 95       	ret

0000069e <serial_init>:
void serial_init(unsigned int bittimer)
{
	/* Set the baud rate */
	UBRR0H = (unsigned char) (bittimer >> 8);
 69e:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = (unsigned char) bittimer;
 6a2:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	/* set the framing to 8N1 (8 data bits + 1 stop bit (default) */
	UCSR0C = (3 << UCSZ00);
 6a6:	86 e0       	ldi	r24, 0x06	; 6
 6a8:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	/* Enable receiver and transmitter */
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);
 6ac:	88 e1       	ldi	r24, 0x18	; 24
 6ae:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 6b2:	08 95       	ret

000006b4 <__fixsfsi>:
 6b4:	0e 94 61 03 	call	0x6c2	; 0x6c2 <__fixunssfsi>
 6b8:	68 94       	set
 6ba:	b1 11       	cpse	r27, r1
 6bc:	0c 94 f0 03 	jmp	0x7e0	; 0x7e0 <__fp_szero>
 6c0:	08 95       	ret

000006c2 <__fixunssfsi>:
 6c2:	0e 94 d5 03 	call	0x7aa	; 0x7aa <__fp_splitA>
 6c6:	88 f0       	brcs	.+34     	; 0x6ea <__fixunssfsi+0x28>
 6c8:	9f 57       	subi	r25, 0x7F	; 127
 6ca:	98 f0       	brcs	.+38     	; 0x6f2 <__fixunssfsi+0x30>
 6cc:	b9 2f       	mov	r27, r25
 6ce:	99 27       	eor	r25, r25
 6d0:	b7 51       	subi	r27, 0x17	; 23
 6d2:	b0 f0       	brcs	.+44     	; 0x700 <__fixunssfsi+0x3e>
 6d4:	e1 f0       	breq	.+56     	; 0x70e <__fixunssfsi+0x4c>
 6d6:	66 0f       	add	r22, r22
 6d8:	77 1f       	adc	r23, r23
 6da:	88 1f       	adc	r24, r24
 6dc:	99 1f       	adc	r25, r25
 6de:	1a f0       	brmi	.+6      	; 0x6e6 <__fixunssfsi+0x24>
 6e0:	ba 95       	dec	r27
 6e2:	c9 f7       	brne	.-14     	; 0x6d6 <__fixunssfsi+0x14>
 6e4:	14 c0       	rjmp	.+40     	; 0x70e <__fixunssfsi+0x4c>
 6e6:	b1 30       	cpi	r27, 0x01	; 1
 6e8:	91 f0       	breq	.+36     	; 0x70e <__fixunssfsi+0x4c>
 6ea:	0e 94 ef 03 	call	0x7de	; 0x7de <__fp_zero>
 6ee:	b1 e0       	ldi	r27, 0x01	; 1
 6f0:	08 95       	ret
 6f2:	0c 94 ef 03 	jmp	0x7de	; 0x7de <__fp_zero>
 6f6:	67 2f       	mov	r22, r23
 6f8:	78 2f       	mov	r23, r24
 6fa:	88 27       	eor	r24, r24
 6fc:	b8 5f       	subi	r27, 0xF8	; 248
 6fe:	39 f0       	breq	.+14     	; 0x70e <__fixunssfsi+0x4c>
 700:	b9 3f       	cpi	r27, 0xF9	; 249
 702:	cc f3       	brlt	.-14     	; 0x6f6 <__fixunssfsi+0x34>
 704:	86 95       	lsr	r24
 706:	77 95       	ror	r23
 708:	67 95       	ror	r22
 70a:	b3 95       	inc	r27
 70c:	d9 f7       	brne	.-10     	; 0x704 <__fixunssfsi+0x42>
 70e:	3e f4       	brtc	.+14     	; 0x71e <__fixunssfsi+0x5c>
 710:	90 95       	com	r25
 712:	80 95       	com	r24
 714:	70 95       	com	r23
 716:	61 95       	neg	r22
 718:	7f 4f       	sbci	r23, 0xFF	; 255
 71a:	8f 4f       	sbci	r24, 0xFF	; 255
 71c:	9f 4f       	sbci	r25, 0xFF	; 255
 71e:	08 95       	ret

00000720 <__floatunsisf>:
 720:	e8 94       	clt
 722:	09 c0       	rjmp	.+18     	; 0x736 <__floatsisf+0x12>

00000724 <__floatsisf>:
 724:	97 fb       	bst	r25, 7
 726:	3e f4       	brtc	.+14     	; 0x736 <__floatsisf+0x12>
 728:	90 95       	com	r25
 72a:	80 95       	com	r24
 72c:	70 95       	com	r23
 72e:	61 95       	neg	r22
 730:	7f 4f       	sbci	r23, 0xFF	; 255
 732:	8f 4f       	sbci	r24, 0xFF	; 255
 734:	9f 4f       	sbci	r25, 0xFF	; 255
 736:	99 23       	and	r25, r25
 738:	a9 f0       	breq	.+42     	; 0x764 <__floatsisf+0x40>
 73a:	f9 2f       	mov	r31, r25
 73c:	96 e9       	ldi	r25, 0x96	; 150
 73e:	bb 27       	eor	r27, r27
 740:	93 95       	inc	r25
 742:	f6 95       	lsr	r31
 744:	87 95       	ror	r24
 746:	77 95       	ror	r23
 748:	67 95       	ror	r22
 74a:	b7 95       	ror	r27
 74c:	f1 11       	cpse	r31, r1
 74e:	f8 cf       	rjmp	.-16     	; 0x740 <__floatsisf+0x1c>
 750:	fa f4       	brpl	.+62     	; 0x790 <__floatsisf+0x6c>
 752:	bb 0f       	add	r27, r27
 754:	11 f4       	brne	.+4      	; 0x75a <__floatsisf+0x36>
 756:	60 ff       	sbrs	r22, 0
 758:	1b c0       	rjmp	.+54     	; 0x790 <__floatsisf+0x6c>
 75a:	6f 5f       	subi	r22, 0xFF	; 255
 75c:	7f 4f       	sbci	r23, 0xFF	; 255
 75e:	8f 4f       	sbci	r24, 0xFF	; 255
 760:	9f 4f       	sbci	r25, 0xFF	; 255
 762:	16 c0       	rjmp	.+44     	; 0x790 <__floatsisf+0x6c>
 764:	88 23       	and	r24, r24
 766:	11 f0       	breq	.+4      	; 0x76c <__floatsisf+0x48>
 768:	96 e9       	ldi	r25, 0x96	; 150
 76a:	11 c0       	rjmp	.+34     	; 0x78e <__floatsisf+0x6a>
 76c:	77 23       	and	r23, r23
 76e:	21 f0       	breq	.+8      	; 0x778 <__floatsisf+0x54>
 770:	9e e8       	ldi	r25, 0x8E	; 142
 772:	87 2f       	mov	r24, r23
 774:	76 2f       	mov	r23, r22
 776:	05 c0       	rjmp	.+10     	; 0x782 <__floatsisf+0x5e>
 778:	66 23       	and	r22, r22
 77a:	71 f0       	breq	.+28     	; 0x798 <__floatsisf+0x74>
 77c:	96 e8       	ldi	r25, 0x86	; 134
 77e:	86 2f       	mov	r24, r22
 780:	70 e0       	ldi	r23, 0x00	; 0
 782:	60 e0       	ldi	r22, 0x00	; 0
 784:	2a f0       	brmi	.+10     	; 0x790 <__floatsisf+0x6c>
 786:	9a 95       	dec	r25
 788:	66 0f       	add	r22, r22
 78a:	77 1f       	adc	r23, r23
 78c:	88 1f       	adc	r24, r24
 78e:	da f7       	brpl	.-10     	; 0x786 <__floatsisf+0x62>
 790:	88 0f       	add	r24, r24
 792:	96 95       	lsr	r25
 794:	87 95       	ror	r24
 796:	97 f9       	bld	r25, 7
 798:	08 95       	ret

0000079a <__fp_split3>:
 79a:	57 fd       	sbrc	r21, 7
 79c:	90 58       	subi	r25, 0x80	; 128
 79e:	44 0f       	add	r20, r20
 7a0:	55 1f       	adc	r21, r21
 7a2:	59 f0       	breq	.+22     	; 0x7ba <__fp_splitA+0x10>
 7a4:	5f 3f       	cpi	r21, 0xFF	; 255
 7a6:	71 f0       	breq	.+28     	; 0x7c4 <__fp_splitA+0x1a>
 7a8:	47 95       	ror	r20

000007aa <__fp_splitA>:
 7aa:	88 0f       	add	r24, r24
 7ac:	97 fb       	bst	r25, 7
 7ae:	99 1f       	adc	r25, r25
 7b0:	61 f0       	breq	.+24     	; 0x7ca <__fp_splitA+0x20>
 7b2:	9f 3f       	cpi	r25, 0xFF	; 255
 7b4:	79 f0       	breq	.+30     	; 0x7d4 <__fp_splitA+0x2a>
 7b6:	87 95       	ror	r24
 7b8:	08 95       	ret
 7ba:	12 16       	cp	r1, r18
 7bc:	13 06       	cpc	r1, r19
 7be:	14 06       	cpc	r1, r20
 7c0:	55 1f       	adc	r21, r21
 7c2:	f2 cf       	rjmp	.-28     	; 0x7a8 <__fp_split3+0xe>
 7c4:	46 95       	lsr	r20
 7c6:	f1 df       	rcall	.-30     	; 0x7aa <__fp_splitA>
 7c8:	08 c0       	rjmp	.+16     	; 0x7da <__fp_splitA+0x30>
 7ca:	16 16       	cp	r1, r22
 7cc:	17 06       	cpc	r1, r23
 7ce:	18 06       	cpc	r1, r24
 7d0:	99 1f       	adc	r25, r25
 7d2:	f1 cf       	rjmp	.-30     	; 0x7b6 <__fp_splitA+0xc>
 7d4:	86 95       	lsr	r24
 7d6:	71 05       	cpc	r23, r1
 7d8:	61 05       	cpc	r22, r1
 7da:	08 94       	sec
 7dc:	08 95       	ret

000007de <__fp_zero>:
 7de:	e8 94       	clt

000007e0 <__fp_szero>:
 7e0:	bb 27       	eor	r27, r27
 7e2:	66 27       	eor	r22, r22
 7e4:	77 27       	eor	r23, r23
 7e6:	cb 01       	movw	r24, r22
 7e8:	97 f9       	bld	r25, 7
 7ea:	08 95       	ret

000007ec <__mulsf3>:
 7ec:	0e 94 09 04 	call	0x812	; 0x812 <__mulsf3x>
 7f0:	0c 94 7a 04 	jmp	0x8f4	; 0x8f4 <__fp_round>
 7f4:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <__fp_pscA>
 7f8:	38 f0       	brcs	.+14     	; 0x808 <__mulsf3+0x1c>
 7fa:	0e 94 73 04 	call	0x8e6	; 0x8e6 <__fp_pscB>
 7fe:	20 f0       	brcs	.+8      	; 0x808 <__mulsf3+0x1c>
 800:	95 23       	and	r25, r21
 802:	11 f0       	breq	.+4      	; 0x808 <__mulsf3+0x1c>
 804:	0c 94 63 04 	jmp	0x8c6	; 0x8c6 <__fp_inf>
 808:	0c 94 69 04 	jmp	0x8d2	; 0x8d2 <__fp_nan>
 80c:	11 24       	eor	r1, r1
 80e:	0c 94 f0 03 	jmp	0x7e0	; 0x7e0 <__fp_szero>

00000812 <__mulsf3x>:
 812:	0e 94 cd 03 	call	0x79a	; 0x79a <__fp_split3>
 816:	70 f3       	brcs	.-36     	; 0x7f4 <__mulsf3+0x8>

00000818 <__mulsf3_pse>:
 818:	95 9f       	mul	r25, r21
 81a:	c1 f3       	breq	.-16     	; 0x80c <__mulsf3+0x20>
 81c:	95 0f       	add	r25, r21
 81e:	50 e0       	ldi	r21, 0x00	; 0
 820:	55 1f       	adc	r21, r21
 822:	62 9f       	mul	r22, r18
 824:	f0 01       	movw	r30, r0
 826:	72 9f       	mul	r23, r18
 828:	bb 27       	eor	r27, r27
 82a:	f0 0d       	add	r31, r0
 82c:	b1 1d       	adc	r27, r1
 82e:	63 9f       	mul	r22, r19
 830:	aa 27       	eor	r26, r26
 832:	f0 0d       	add	r31, r0
 834:	b1 1d       	adc	r27, r1
 836:	aa 1f       	adc	r26, r26
 838:	64 9f       	mul	r22, r20
 83a:	66 27       	eor	r22, r22
 83c:	b0 0d       	add	r27, r0
 83e:	a1 1d       	adc	r26, r1
 840:	66 1f       	adc	r22, r22
 842:	82 9f       	mul	r24, r18
 844:	22 27       	eor	r18, r18
 846:	b0 0d       	add	r27, r0
 848:	a1 1d       	adc	r26, r1
 84a:	62 1f       	adc	r22, r18
 84c:	73 9f       	mul	r23, r19
 84e:	b0 0d       	add	r27, r0
 850:	a1 1d       	adc	r26, r1
 852:	62 1f       	adc	r22, r18
 854:	83 9f       	mul	r24, r19
 856:	a0 0d       	add	r26, r0
 858:	61 1d       	adc	r22, r1
 85a:	22 1f       	adc	r18, r18
 85c:	74 9f       	mul	r23, r20
 85e:	33 27       	eor	r19, r19
 860:	a0 0d       	add	r26, r0
 862:	61 1d       	adc	r22, r1
 864:	23 1f       	adc	r18, r19
 866:	84 9f       	mul	r24, r20
 868:	60 0d       	add	r22, r0
 86a:	21 1d       	adc	r18, r1
 86c:	82 2f       	mov	r24, r18
 86e:	76 2f       	mov	r23, r22
 870:	6a 2f       	mov	r22, r26
 872:	11 24       	eor	r1, r1
 874:	9f 57       	subi	r25, 0x7F	; 127
 876:	50 40       	sbci	r21, 0x00	; 0
 878:	9a f0       	brmi	.+38     	; 0x8a0 <__mulsf3_pse+0x88>
 87a:	f1 f0       	breq	.+60     	; 0x8b8 <__mulsf3_pse+0xa0>
 87c:	88 23       	and	r24, r24
 87e:	4a f0       	brmi	.+18     	; 0x892 <__mulsf3_pse+0x7a>
 880:	ee 0f       	add	r30, r30
 882:	ff 1f       	adc	r31, r31
 884:	bb 1f       	adc	r27, r27
 886:	66 1f       	adc	r22, r22
 888:	77 1f       	adc	r23, r23
 88a:	88 1f       	adc	r24, r24
 88c:	91 50       	subi	r25, 0x01	; 1
 88e:	50 40       	sbci	r21, 0x00	; 0
 890:	a9 f7       	brne	.-22     	; 0x87c <__mulsf3_pse+0x64>
 892:	9e 3f       	cpi	r25, 0xFE	; 254
 894:	51 05       	cpc	r21, r1
 896:	80 f0       	brcs	.+32     	; 0x8b8 <__mulsf3_pse+0xa0>
 898:	0c 94 63 04 	jmp	0x8c6	; 0x8c6 <__fp_inf>
 89c:	0c 94 f0 03 	jmp	0x7e0	; 0x7e0 <__fp_szero>
 8a0:	5f 3f       	cpi	r21, 0xFF	; 255
 8a2:	e4 f3       	brlt	.-8      	; 0x89c <__mulsf3_pse+0x84>
 8a4:	98 3e       	cpi	r25, 0xE8	; 232
 8a6:	d4 f3       	brlt	.-12     	; 0x89c <__mulsf3_pse+0x84>
 8a8:	86 95       	lsr	r24
 8aa:	77 95       	ror	r23
 8ac:	67 95       	ror	r22
 8ae:	b7 95       	ror	r27
 8b0:	f7 95       	ror	r31
 8b2:	e7 95       	ror	r30
 8b4:	9f 5f       	subi	r25, 0xFF	; 255
 8b6:	c1 f7       	brne	.-16     	; 0x8a8 <__mulsf3_pse+0x90>
 8b8:	fe 2b       	or	r31, r30
 8ba:	88 0f       	add	r24, r24
 8bc:	91 1d       	adc	r25, r1
 8be:	96 95       	lsr	r25
 8c0:	87 95       	ror	r24
 8c2:	97 f9       	bld	r25, 7
 8c4:	08 95       	ret

000008c6 <__fp_inf>:
 8c6:	97 f9       	bld	r25, 7
 8c8:	9f 67       	ori	r25, 0x7F	; 127
 8ca:	80 e8       	ldi	r24, 0x80	; 128
 8cc:	70 e0       	ldi	r23, 0x00	; 0
 8ce:	60 e0       	ldi	r22, 0x00	; 0
 8d0:	08 95       	ret

000008d2 <__fp_nan>:
 8d2:	9f ef       	ldi	r25, 0xFF	; 255
 8d4:	80 ec       	ldi	r24, 0xC0	; 192
 8d6:	08 95       	ret

000008d8 <__fp_pscA>:
 8d8:	00 24       	eor	r0, r0
 8da:	0a 94       	dec	r0
 8dc:	16 16       	cp	r1, r22
 8de:	17 06       	cpc	r1, r23
 8e0:	18 06       	cpc	r1, r24
 8e2:	09 06       	cpc	r0, r25
 8e4:	08 95       	ret

000008e6 <__fp_pscB>:
 8e6:	00 24       	eor	r0, r0
 8e8:	0a 94       	dec	r0
 8ea:	12 16       	cp	r1, r18
 8ec:	13 06       	cpc	r1, r19
 8ee:	14 06       	cpc	r1, r20
 8f0:	05 06       	cpc	r0, r21
 8f2:	08 95       	ret

000008f4 <__fp_round>:
 8f4:	09 2e       	mov	r0, r25
 8f6:	03 94       	inc	r0
 8f8:	00 0c       	add	r0, r0
 8fa:	11 f4       	brne	.+4      	; 0x900 <__stack+0x1>
 8fc:	88 23       	and	r24, r24
 8fe:	52 f0       	brmi	.+20     	; 0x914 <__stack+0x15>
 900:	bb 0f       	add	r27, r27
 902:	40 f4       	brcc	.+16     	; 0x914 <__stack+0x15>
 904:	bf 2b       	or	r27, r31
 906:	11 f4       	brne	.+4      	; 0x90c <__stack+0xd>
 908:	60 ff       	sbrs	r22, 0
 90a:	04 c0       	rjmp	.+8      	; 0x914 <__stack+0x15>
 90c:	6f 5f       	subi	r22, 0xFF	; 255
 90e:	7f 4f       	sbci	r23, 0xFF	; 255
 910:	8f 4f       	sbci	r24, 0xFF	; 255
 912:	9f 4f       	sbci	r25, 0xFF	; 255
 914:	08 95       	ret

00000916 <__divmodhi4>:
 916:	97 fb       	bst	r25, 7
 918:	07 2e       	mov	r0, r23
 91a:	16 f4       	brtc	.+4      	; 0x920 <__divmodhi4+0xa>
 91c:	00 94       	com	r0
 91e:	07 d0       	rcall	.+14     	; 0x92e <__divmodhi4_neg1>
 920:	77 fd       	sbrc	r23, 7
 922:	09 d0       	rcall	.+18     	; 0x936 <__divmodhi4_neg2>
 924:	0e 94 9f 04 	call	0x93e	; 0x93e <__udivmodhi4>
 928:	07 fc       	sbrc	r0, 7
 92a:	05 d0       	rcall	.+10     	; 0x936 <__divmodhi4_neg2>
 92c:	3e f4       	brtc	.+14     	; 0x93c <__divmodhi4_exit>

0000092e <__divmodhi4_neg1>:
 92e:	90 95       	com	r25
 930:	81 95       	neg	r24
 932:	9f 4f       	sbci	r25, 0xFF	; 255
 934:	08 95       	ret

00000936 <__divmodhi4_neg2>:
 936:	70 95       	com	r23
 938:	61 95       	neg	r22
 93a:	7f 4f       	sbci	r23, 0xFF	; 255

0000093c <__divmodhi4_exit>:
 93c:	08 95       	ret

0000093e <__udivmodhi4>:
 93e:	aa 1b       	sub	r26, r26
 940:	bb 1b       	sub	r27, r27
 942:	51 e1       	ldi	r21, 0x11	; 17
 944:	07 c0       	rjmp	.+14     	; 0x954 <__udivmodhi4_ep>

00000946 <__udivmodhi4_loop>:
 946:	aa 1f       	adc	r26, r26
 948:	bb 1f       	adc	r27, r27
 94a:	a6 17       	cp	r26, r22
 94c:	b7 07       	cpc	r27, r23
 94e:	10 f0       	brcs	.+4      	; 0x954 <__udivmodhi4_ep>
 950:	a6 1b       	sub	r26, r22
 952:	b7 0b       	sbc	r27, r23

00000954 <__udivmodhi4_ep>:
 954:	88 1f       	adc	r24, r24
 956:	99 1f       	adc	r25, r25
 958:	5a 95       	dec	r21
 95a:	a9 f7       	brne	.-22     	; 0x946 <__udivmodhi4_loop>
 95c:	80 95       	com	r24
 95e:	90 95       	com	r25
 960:	bc 01       	movw	r22, r24
 962:	cd 01       	movw	r24, r26
 964:	08 95       	ret

00000966 <malloc>:
 966:	0f 93       	push	r16
 968:	1f 93       	push	r17
 96a:	cf 93       	push	r28
 96c:	df 93       	push	r29
 96e:	82 30       	cpi	r24, 0x02	; 2
 970:	91 05       	cpc	r25, r1
 972:	10 f4       	brcc	.+4      	; 0x978 <malloc+0x12>
 974:	82 e0       	ldi	r24, 0x02	; 2
 976:	90 e0       	ldi	r25, 0x00	; 0
 978:	e0 91 1c 01 	lds	r30, 0x011C	; 0x80011c <__flp>
 97c:	f0 91 1d 01 	lds	r31, 0x011D	; 0x80011d <__flp+0x1>
 980:	20 e0       	ldi	r18, 0x00	; 0
 982:	30 e0       	ldi	r19, 0x00	; 0
 984:	a0 e0       	ldi	r26, 0x00	; 0
 986:	b0 e0       	ldi	r27, 0x00	; 0
 988:	30 97       	sbiw	r30, 0x00	; 0
 98a:	19 f1       	breq	.+70     	; 0x9d2 <malloc+0x6c>
 98c:	40 81       	ld	r20, Z
 98e:	51 81       	ldd	r21, Z+1	; 0x01
 990:	02 81       	ldd	r16, Z+2	; 0x02
 992:	13 81       	ldd	r17, Z+3	; 0x03
 994:	48 17       	cp	r20, r24
 996:	59 07       	cpc	r21, r25
 998:	c8 f0       	brcs	.+50     	; 0x9cc <malloc+0x66>
 99a:	84 17       	cp	r24, r20
 99c:	95 07       	cpc	r25, r21
 99e:	69 f4       	brne	.+26     	; 0x9ba <malloc+0x54>
 9a0:	10 97       	sbiw	r26, 0x00	; 0
 9a2:	31 f0       	breq	.+12     	; 0x9b0 <malloc+0x4a>
 9a4:	12 96       	adiw	r26, 0x02	; 2
 9a6:	0c 93       	st	X, r16
 9a8:	12 97       	sbiw	r26, 0x02	; 2
 9aa:	13 96       	adiw	r26, 0x03	; 3
 9ac:	1c 93       	st	X, r17
 9ae:	27 c0       	rjmp	.+78     	; 0x9fe <malloc+0x98>
 9b0:	00 93 1c 01 	sts	0x011C, r16	; 0x80011c <__flp>
 9b4:	10 93 1d 01 	sts	0x011D, r17	; 0x80011d <__flp+0x1>
 9b8:	22 c0       	rjmp	.+68     	; 0x9fe <malloc+0x98>
 9ba:	21 15       	cp	r18, r1
 9bc:	31 05       	cpc	r19, r1
 9be:	19 f0       	breq	.+6      	; 0x9c6 <malloc+0x60>
 9c0:	42 17       	cp	r20, r18
 9c2:	53 07       	cpc	r21, r19
 9c4:	18 f4       	brcc	.+6      	; 0x9cc <malloc+0x66>
 9c6:	9a 01       	movw	r18, r20
 9c8:	bd 01       	movw	r22, r26
 9ca:	ef 01       	movw	r28, r30
 9cc:	df 01       	movw	r26, r30
 9ce:	f8 01       	movw	r30, r16
 9d0:	db cf       	rjmp	.-74     	; 0x988 <malloc+0x22>
 9d2:	21 15       	cp	r18, r1
 9d4:	31 05       	cpc	r19, r1
 9d6:	f9 f0       	breq	.+62     	; 0xa16 <malloc+0xb0>
 9d8:	28 1b       	sub	r18, r24
 9da:	39 0b       	sbc	r19, r25
 9dc:	24 30       	cpi	r18, 0x04	; 4
 9de:	31 05       	cpc	r19, r1
 9e0:	80 f4       	brcc	.+32     	; 0xa02 <malloc+0x9c>
 9e2:	8a 81       	ldd	r24, Y+2	; 0x02
 9e4:	9b 81       	ldd	r25, Y+3	; 0x03
 9e6:	61 15       	cp	r22, r1
 9e8:	71 05       	cpc	r23, r1
 9ea:	21 f0       	breq	.+8      	; 0x9f4 <malloc+0x8e>
 9ec:	fb 01       	movw	r30, r22
 9ee:	93 83       	std	Z+3, r25	; 0x03
 9f0:	82 83       	std	Z+2, r24	; 0x02
 9f2:	04 c0       	rjmp	.+8      	; 0x9fc <malloc+0x96>
 9f4:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <__flp+0x1>
 9f8:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <__flp>
 9fc:	fe 01       	movw	r30, r28
 9fe:	32 96       	adiw	r30, 0x02	; 2
 a00:	44 c0       	rjmp	.+136    	; 0xa8a <malloc+0x124>
 a02:	fe 01       	movw	r30, r28
 a04:	e2 0f       	add	r30, r18
 a06:	f3 1f       	adc	r31, r19
 a08:	81 93       	st	Z+, r24
 a0a:	91 93       	st	Z+, r25
 a0c:	22 50       	subi	r18, 0x02	; 2
 a0e:	31 09       	sbc	r19, r1
 a10:	39 83       	std	Y+1, r19	; 0x01
 a12:	28 83       	st	Y, r18
 a14:	3a c0       	rjmp	.+116    	; 0xa8a <malloc+0x124>
 a16:	20 91 1a 01 	lds	r18, 0x011A	; 0x80011a <__brkval>
 a1a:	30 91 1b 01 	lds	r19, 0x011B	; 0x80011b <__brkval+0x1>
 a1e:	23 2b       	or	r18, r19
 a20:	41 f4       	brne	.+16     	; 0xa32 <malloc+0xcc>
 a22:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
 a26:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
 a2a:	30 93 1b 01 	sts	0x011B, r19	; 0x80011b <__brkval+0x1>
 a2e:	20 93 1a 01 	sts	0x011A, r18	; 0x80011a <__brkval>
 a32:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 a36:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 a3a:	21 15       	cp	r18, r1
 a3c:	31 05       	cpc	r19, r1
 a3e:	41 f4       	brne	.+16     	; 0xa50 <malloc+0xea>
 a40:	2d b7       	in	r18, 0x3d	; 61
 a42:	3e b7       	in	r19, 0x3e	; 62
 a44:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 a48:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 a4c:	24 1b       	sub	r18, r20
 a4e:	35 0b       	sbc	r19, r21
 a50:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <__brkval>
 a54:	f0 91 1b 01 	lds	r31, 0x011B	; 0x80011b <__brkval+0x1>
 a58:	e2 17       	cp	r30, r18
 a5a:	f3 07       	cpc	r31, r19
 a5c:	a0 f4       	brcc	.+40     	; 0xa86 <malloc+0x120>
 a5e:	2e 1b       	sub	r18, r30
 a60:	3f 0b       	sbc	r19, r31
 a62:	28 17       	cp	r18, r24
 a64:	39 07       	cpc	r19, r25
 a66:	78 f0       	brcs	.+30     	; 0xa86 <malloc+0x120>
 a68:	ac 01       	movw	r20, r24
 a6a:	4e 5f       	subi	r20, 0xFE	; 254
 a6c:	5f 4f       	sbci	r21, 0xFF	; 255
 a6e:	24 17       	cp	r18, r20
 a70:	35 07       	cpc	r19, r21
 a72:	48 f0       	brcs	.+18     	; 0xa86 <malloc+0x120>
 a74:	4e 0f       	add	r20, r30
 a76:	5f 1f       	adc	r21, r31
 a78:	50 93 1b 01 	sts	0x011B, r21	; 0x80011b <__brkval+0x1>
 a7c:	40 93 1a 01 	sts	0x011A, r20	; 0x80011a <__brkval>
 a80:	81 93       	st	Z+, r24
 a82:	91 93       	st	Z+, r25
 a84:	02 c0       	rjmp	.+4      	; 0xa8a <malloc+0x124>
 a86:	e0 e0       	ldi	r30, 0x00	; 0
 a88:	f0 e0       	ldi	r31, 0x00	; 0
 a8a:	cf 01       	movw	r24, r30
 a8c:	df 91       	pop	r29
 a8e:	cf 91       	pop	r28
 a90:	1f 91       	pop	r17
 a92:	0f 91       	pop	r16
 a94:	08 95       	ret

00000a96 <free>:
 a96:	cf 93       	push	r28
 a98:	df 93       	push	r29
 a9a:	00 97       	sbiw	r24, 0x00	; 0
 a9c:	09 f4       	brne	.+2      	; 0xaa0 <free+0xa>
 a9e:	81 c0       	rjmp	.+258    	; 0xba2 <free+0x10c>
 aa0:	fc 01       	movw	r30, r24
 aa2:	32 97       	sbiw	r30, 0x02	; 2
 aa4:	13 82       	std	Z+3, r1	; 0x03
 aa6:	12 82       	std	Z+2, r1	; 0x02
 aa8:	a0 91 1c 01 	lds	r26, 0x011C	; 0x80011c <__flp>
 aac:	b0 91 1d 01 	lds	r27, 0x011D	; 0x80011d <__flp+0x1>
 ab0:	10 97       	sbiw	r26, 0x00	; 0
 ab2:	81 f4       	brne	.+32     	; 0xad4 <free+0x3e>
 ab4:	20 81       	ld	r18, Z
 ab6:	31 81       	ldd	r19, Z+1	; 0x01
 ab8:	82 0f       	add	r24, r18
 aba:	93 1f       	adc	r25, r19
 abc:	20 91 1a 01 	lds	r18, 0x011A	; 0x80011a <__brkval>
 ac0:	30 91 1b 01 	lds	r19, 0x011B	; 0x80011b <__brkval+0x1>
 ac4:	28 17       	cp	r18, r24
 ac6:	39 07       	cpc	r19, r25
 ac8:	51 f5       	brne	.+84     	; 0xb1e <free+0x88>
 aca:	f0 93 1b 01 	sts	0x011B, r31	; 0x80011b <__brkval+0x1>
 ace:	e0 93 1a 01 	sts	0x011A, r30	; 0x80011a <__brkval>
 ad2:	67 c0       	rjmp	.+206    	; 0xba2 <free+0x10c>
 ad4:	ed 01       	movw	r28, r26
 ad6:	20 e0       	ldi	r18, 0x00	; 0
 ad8:	30 e0       	ldi	r19, 0x00	; 0
 ada:	ce 17       	cp	r28, r30
 adc:	df 07       	cpc	r29, r31
 ade:	40 f4       	brcc	.+16     	; 0xaf0 <free+0x5a>
 ae0:	4a 81       	ldd	r20, Y+2	; 0x02
 ae2:	5b 81       	ldd	r21, Y+3	; 0x03
 ae4:	9e 01       	movw	r18, r28
 ae6:	41 15       	cp	r20, r1
 ae8:	51 05       	cpc	r21, r1
 aea:	f1 f0       	breq	.+60     	; 0xb28 <free+0x92>
 aec:	ea 01       	movw	r28, r20
 aee:	f5 cf       	rjmp	.-22     	; 0xada <free+0x44>
 af0:	d3 83       	std	Z+3, r29	; 0x03
 af2:	c2 83       	std	Z+2, r28	; 0x02
 af4:	40 81       	ld	r20, Z
 af6:	51 81       	ldd	r21, Z+1	; 0x01
 af8:	84 0f       	add	r24, r20
 afa:	95 1f       	adc	r25, r21
 afc:	c8 17       	cp	r28, r24
 afe:	d9 07       	cpc	r29, r25
 b00:	59 f4       	brne	.+22     	; 0xb18 <free+0x82>
 b02:	88 81       	ld	r24, Y
 b04:	99 81       	ldd	r25, Y+1	; 0x01
 b06:	84 0f       	add	r24, r20
 b08:	95 1f       	adc	r25, r21
 b0a:	02 96       	adiw	r24, 0x02	; 2
 b0c:	91 83       	std	Z+1, r25	; 0x01
 b0e:	80 83       	st	Z, r24
 b10:	8a 81       	ldd	r24, Y+2	; 0x02
 b12:	9b 81       	ldd	r25, Y+3	; 0x03
 b14:	93 83       	std	Z+3, r25	; 0x03
 b16:	82 83       	std	Z+2, r24	; 0x02
 b18:	21 15       	cp	r18, r1
 b1a:	31 05       	cpc	r19, r1
 b1c:	29 f4       	brne	.+10     	; 0xb28 <free+0x92>
 b1e:	f0 93 1d 01 	sts	0x011D, r31	; 0x80011d <__flp+0x1>
 b22:	e0 93 1c 01 	sts	0x011C, r30	; 0x80011c <__flp>
 b26:	3d c0       	rjmp	.+122    	; 0xba2 <free+0x10c>
 b28:	e9 01       	movw	r28, r18
 b2a:	fb 83       	std	Y+3, r31	; 0x03
 b2c:	ea 83       	std	Y+2, r30	; 0x02
 b2e:	49 91       	ld	r20, Y+
 b30:	59 91       	ld	r21, Y+
 b32:	c4 0f       	add	r28, r20
 b34:	d5 1f       	adc	r29, r21
 b36:	ec 17       	cp	r30, r28
 b38:	fd 07       	cpc	r31, r29
 b3a:	61 f4       	brne	.+24     	; 0xb54 <free+0xbe>
 b3c:	80 81       	ld	r24, Z
 b3e:	91 81       	ldd	r25, Z+1	; 0x01
 b40:	84 0f       	add	r24, r20
 b42:	95 1f       	adc	r25, r21
 b44:	02 96       	adiw	r24, 0x02	; 2
 b46:	e9 01       	movw	r28, r18
 b48:	99 83       	std	Y+1, r25	; 0x01
 b4a:	88 83       	st	Y, r24
 b4c:	82 81       	ldd	r24, Z+2	; 0x02
 b4e:	93 81       	ldd	r25, Z+3	; 0x03
 b50:	9b 83       	std	Y+3, r25	; 0x03
 b52:	8a 83       	std	Y+2, r24	; 0x02
 b54:	e0 e0       	ldi	r30, 0x00	; 0
 b56:	f0 e0       	ldi	r31, 0x00	; 0
 b58:	12 96       	adiw	r26, 0x02	; 2
 b5a:	8d 91       	ld	r24, X+
 b5c:	9c 91       	ld	r25, X
 b5e:	13 97       	sbiw	r26, 0x03	; 3
 b60:	00 97       	sbiw	r24, 0x00	; 0
 b62:	19 f0       	breq	.+6      	; 0xb6a <free+0xd4>
 b64:	fd 01       	movw	r30, r26
 b66:	dc 01       	movw	r26, r24
 b68:	f7 cf       	rjmp	.-18     	; 0xb58 <free+0xc2>
 b6a:	8d 91       	ld	r24, X+
 b6c:	9c 91       	ld	r25, X
 b6e:	11 97       	sbiw	r26, 0x01	; 1
 b70:	9d 01       	movw	r18, r26
 b72:	2e 5f       	subi	r18, 0xFE	; 254
 b74:	3f 4f       	sbci	r19, 0xFF	; 255
 b76:	82 0f       	add	r24, r18
 b78:	93 1f       	adc	r25, r19
 b7a:	20 91 1a 01 	lds	r18, 0x011A	; 0x80011a <__brkval>
 b7e:	30 91 1b 01 	lds	r19, 0x011B	; 0x80011b <__brkval+0x1>
 b82:	28 17       	cp	r18, r24
 b84:	39 07       	cpc	r19, r25
 b86:	69 f4       	brne	.+26     	; 0xba2 <free+0x10c>
 b88:	30 97       	sbiw	r30, 0x00	; 0
 b8a:	29 f4       	brne	.+10     	; 0xb96 <free+0x100>
 b8c:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <__flp+0x1>
 b90:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <__flp>
 b94:	02 c0       	rjmp	.+4      	; 0xb9a <free+0x104>
 b96:	13 82       	std	Z+3, r1	; 0x03
 b98:	12 82       	std	Z+2, r1	; 0x02
 b9a:	b0 93 1b 01 	sts	0x011B, r27	; 0x80011b <__brkval+0x1>
 b9e:	a0 93 1a 01 	sts	0x011A, r26	; 0x80011a <__brkval>
 ba2:	df 91       	pop	r29
 ba4:	cf 91       	pop	r28
 ba6:	08 95       	ret

00000ba8 <_exit>:
 ba8:	f8 94       	cli

00000baa <__stop_program>:
 baa:	ff cf       	rjmp	.-2      	; 0xbaa <__stop_program>
