
Main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  000008a0  00000934  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000008a0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800106  00800106  0000093a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000093a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000096c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b8  00000000  00000000  000009ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f39  00000000  00000000  00000a64  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000934  00000000  00000000  0000199d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000750  00000000  00000000  000022d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000204  00000000  00000000  00002a24  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004e0  00000000  00000000  00002c28  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a6f  00000000  00000000  00003108  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  00003b77  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 ea       	ldi	r30, 0xA0	; 160
  7c:	f8 e0       	ldi	r31, 0x08	; 8
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 30       	cpi	r26, 0x06	; 6
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a6 e0       	ldi	r26, 0x06	; 6
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	aa 30       	cpi	r26, 0x0A	; 10
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 55 01 	call	0x2aa	; 0x2aa <main>
  9e:	0c 94 4e 04 	jmp	0x89c	; 0x89c <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <i2c_init>:
	data[(length-1)] = i2c_read_nack();
	
	i2c_stop();
	
	return 0;
}
  a6:	8c e0       	ldi	r24, 0x0C	; 12
  a8:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
  ac:	08 95       	ret

000000ae <i2c_start>:
  ae:	ec eb       	ldi	r30, 0xBC	; 188
  b0:	f0 e0       	ldi	r31, 0x00	; 0
  b2:	10 82       	st	Z, r1
  b4:	94 ea       	ldi	r25, 0xA4	; 164
  b6:	90 83       	st	Z, r25
  b8:	90 81       	ld	r25, Z
  ba:	99 23       	and	r25, r25
  bc:	ec f7       	brge	.-6      	; 0xb8 <i2c_start+0xa>
  be:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
  c2:	98 7f       	andi	r25, 0xF8	; 248
  c4:	98 30       	cpi	r25, 0x08	; 8
  c6:	a1 f4       	brne	.+40     	; 0xf0 <i2c_start+0x42>
  c8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
  cc:	84 e8       	ldi	r24, 0x84	; 132
  ce:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
  d2:	ec eb       	ldi	r30, 0xBC	; 188
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	80 81       	ld	r24, Z
  d8:	88 23       	and	r24, r24
  da:	ec f7       	brge	.-6      	; 0xd6 <i2c_start+0x28>
  dc:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
  e0:	98 7f       	andi	r25, 0xF8	; 248
  e2:	98 31       	cpi	r25, 0x18	; 24
  e4:	39 f0       	breq	.+14     	; 0xf4 <i2c_start+0x46>
  e6:	81 e0       	ldi	r24, 0x01	; 1
  e8:	90 34       	cpi	r25, 0x40	; 64
  ea:	29 f4       	brne	.+10     	; 0xf6 <i2c_start+0x48>
  ec:	80 e0       	ldi	r24, 0x00	; 0
  ee:	08 95       	ret
  f0:	81 e0       	ldi	r24, 0x01	; 1
  f2:	08 95       	ret
  f4:	80 e0       	ldi	r24, 0x00	; 0
  f6:	08 95       	ret

000000f8 <i2c_write>:
  f8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
  fc:	84 e8       	ldi	r24, 0x84	; 132
  fe:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 102:	ec eb       	ldi	r30, 0xBC	; 188
 104:	f0 e0       	ldi	r31, 0x00	; 0
 106:	80 81       	ld	r24, Z
 108:	88 23       	and	r24, r24
 10a:	ec f7       	brge	.-6      	; 0x106 <i2c_write+0xe>
 10c:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 110:	98 7f       	andi	r25, 0xF8	; 248
 112:	81 e0       	ldi	r24, 0x01	; 1
 114:	98 32       	cpi	r25, 0x28	; 40
 116:	09 f4       	brne	.+2      	; 0x11a <i2c_write+0x22>
 118:	80 e0       	ldi	r24, 0x00	; 0
 11a:	08 95       	ret

0000011c <i2c_read_ack>:
 11c:	84 ec       	ldi	r24, 0xC4	; 196
 11e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 122:	ec eb       	ldi	r30, 0xBC	; 188
 124:	f0 e0       	ldi	r31, 0x00	; 0
 126:	80 81       	ld	r24, Z
 128:	88 23       	and	r24, r24
 12a:	ec f7       	brge	.-6      	; 0x126 <i2c_read_ack+0xa>
 12c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 130:	08 95       	ret

00000132 <i2c_read_nack>:
 132:	84 e8       	ldi	r24, 0x84	; 132
 134:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 138:	ec eb       	ldi	r30, 0xBC	; 188
 13a:	f0 e0       	ldi	r31, 0x00	; 0
 13c:	80 81       	ld	r24, Z
 13e:	88 23       	and	r24, r24
 140:	ec f7       	brge	.-6      	; 0x13c <i2c_read_nack+0xa>
 142:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 146:	08 95       	ret

00000148 <i2c_writeReg>:

uint8_t i2c_writeReg(uint8_t devaddr, uint8_t regaddr, uint8_t* data, uint16_t length)
{
 148:	cf 92       	push	r12
 14a:	df 92       	push	r13
 14c:	ff 92       	push	r15
 14e:	0f 93       	push	r16
 150:	1f 93       	push	r17
 152:	cf 93       	push	r28
 154:	df 93       	push	r29
 156:	c6 2f       	mov	r28, r22
 158:	6a 01       	movw	r12, r20
 15a:	89 01       	movw	r16, r18
	if (i2c_start(devaddr | 0x00)) return 1;
 15c:	0e 94 57 00 	call	0xae	; 0xae <i2c_start>
 160:	f8 2e       	mov	r15, r24
 162:	81 11       	cpse	r24, r1
 164:	15 c0       	rjmp	.+42     	; 0x190 <i2c_writeReg+0x48>

	i2c_write(regaddr);
 166:	8c 2f       	mov	r24, r28
 168:	0e 94 7c 00 	call	0xf8	; 0xf8 <i2c_write>

	for (uint16_t i = 0; i < length; i++)
 16c:	01 15       	cp	r16, r1
 16e:	11 05       	cpc	r17, r1
 170:	59 f0       	breq	.+22     	; 0x188 <i2c_writeReg+0x40>
 172:	e6 01       	movw	r28, r12
 174:	0c 0d       	add	r16, r12
 176:	1d 1d       	adc	r17, r13
	{
		if (i2c_write(data[i])) return 1;
 178:	89 91       	ld	r24, Y+
 17a:	0e 94 7c 00 	call	0xf8	; 0xf8 <i2c_write>
 17e:	81 11       	cpse	r24, r1
 180:	0a c0       	rjmp	.+20     	; 0x196 <i2c_writeReg+0x4e>
{
	if (i2c_start(devaddr | 0x00)) return 1;

	i2c_write(regaddr);

	for (uint16_t i = 0; i < length; i++)
 182:	c0 17       	cp	r28, r16
 184:	d1 07       	cpc	r29, r17
 186:	c1 f7       	brne	.-16     	; 0x178 <i2c_writeReg+0x30>
}

void i2c_stop(void)
{
	// transmit STOP condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 188:	84 e9       	ldi	r24, 0x94	; 148
 18a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 18e:	05 c0       	rjmp	.+10     	; 0x19a <i2c_writeReg+0x52>
	return 0;
}

uint8_t i2c_writeReg(uint8_t devaddr, uint8_t regaddr, uint8_t* data, uint16_t length)
{
	if (i2c_start(devaddr | 0x00)) return 1;
 190:	ff 24       	eor	r15, r15
 192:	f3 94       	inc	r15
 194:	02 c0       	rjmp	.+4      	; 0x19a <i2c_writeReg+0x52>

	i2c_write(regaddr);

	for (uint16_t i = 0; i < length; i++)
	{
		if (i2c_write(data[i])) return 1;
 196:	ff 24       	eor	r15, r15
 198:	f3 94       	inc	r15
	}

	i2c_stop();

	return 0;
}
 19a:	8f 2d       	mov	r24, r15
 19c:	df 91       	pop	r29
 19e:	cf 91       	pop	r28
 1a0:	1f 91       	pop	r17
 1a2:	0f 91       	pop	r16
 1a4:	ff 90       	pop	r15
 1a6:	df 90       	pop	r13
 1a8:	cf 90       	pop	r12
 1aa:	08 95       	ret

000001ac <i2c_readReg>:

uint8_t i2c_readReg(uint8_t devaddr, uint8_t regaddr, uint8_t* data, uint16_t length)
{
 1ac:	af 92       	push	r10
 1ae:	bf 92       	push	r11
 1b0:	df 92       	push	r13
 1b2:	ef 92       	push	r14
 1b4:	ff 92       	push	r15
 1b6:	0f 93       	push	r16
 1b8:	1f 93       	push	r17
 1ba:	cf 93       	push	r28
 1bc:	df 93       	push	r29
 1be:	18 2f       	mov	r17, r24
 1c0:	06 2f       	mov	r16, r22
 1c2:	5a 01       	movw	r10, r20
 1c4:	e9 01       	movw	r28, r18
	if (i2c_start(devaddr)) return 1;
 1c6:	0e 94 57 00 	call	0xae	; 0xae <i2c_start>
 1ca:	81 11       	cpse	r24, r1
 1cc:	22 c0       	rjmp	.+68     	; 0x212 <i2c_readReg+0x66>

	i2c_write(regaddr);
 1ce:	80 2f       	mov	r24, r16
 1d0:	0e 94 7c 00 	call	0xf8	; 0xf8 <i2c_write>

	if (i2c_start(devaddr | 0x01)) return 1;
 1d4:	81 2f       	mov	r24, r17
 1d6:	81 60       	ori	r24, 0x01	; 1
 1d8:	0e 94 57 00 	call	0xae	; 0xae <i2c_start>
 1dc:	d8 2e       	mov	r13, r24
 1de:	81 11       	cpse	r24, r1
 1e0:	1b c0       	rjmp	.+54     	; 0x218 <i2c_readReg+0x6c>

	for (uint16_t i = 0; i < (length-1); i++)
 1e2:	8e 01       	movw	r16, r28
 1e4:	01 50       	subi	r16, 0x01	; 1
 1e6:	11 09       	sbc	r17, r1
 1e8:	51 f0       	breq	.+20     	; 0x1fe <i2c_readReg+0x52>
 1ea:	e5 01       	movw	r28, r10
 1ec:	75 01       	movw	r14, r10
 1ee:	e0 0e       	add	r14, r16
 1f0:	f1 1e       	adc	r15, r17
	{
		data[i] = i2c_read_ack();
 1f2:	0e 94 8e 00 	call	0x11c	; 0x11c <i2c_read_ack>
 1f6:	89 93       	st	Y+, r24

	i2c_write(regaddr);

	if (i2c_start(devaddr | 0x01)) return 1;

	for (uint16_t i = 0; i < (length-1); i++)
 1f8:	ec 16       	cp	r14, r28
 1fa:	fd 06       	cpc	r15, r29
 1fc:	d1 f7       	brne	.-12     	; 0x1f2 <i2c_readReg+0x46>
	{
		data[i] = i2c_read_ack();
	}
	data[(length-1)] = i2c_read_nack();
 1fe:	e5 01       	movw	r28, r10
 200:	c0 0f       	add	r28, r16
 202:	d1 1f       	adc	r29, r17
 204:	0e 94 99 00 	call	0x132	; 0x132 <i2c_read_nack>
 208:	88 83       	st	Y, r24
}

void i2c_stop(void)
{
	// transmit STOP condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 20a:	84 e9       	ldi	r24, 0x94	; 148
 20c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 210:	05 c0       	rjmp	.+10     	; 0x21c <i2c_readReg+0x70>
	return 0;
}

uint8_t i2c_readReg(uint8_t devaddr, uint8_t regaddr, uint8_t* data, uint16_t length)
{
	if (i2c_start(devaddr)) return 1;
 212:	dd 24       	eor	r13, r13
 214:	d3 94       	inc	r13
 216:	02 c0       	rjmp	.+4      	; 0x21c <i2c_readReg+0x70>

	i2c_write(regaddr);

	if (i2c_start(devaddr | 0x01)) return 1;
 218:	dd 24       	eor	r13, r13
 21a:	d3 94       	inc	r13
	data[(length-1)] = i2c_read_nack();

	i2c_stop();

	return 0;
}
 21c:	8d 2d       	mov	r24, r13
 21e:	df 91       	pop	r29
 220:	cf 91       	pop	r28
 222:	1f 91       	pop	r17
 224:	0f 91       	pop	r16
 226:	ff 90       	pop	r15
 228:	ef 90       	pop	r14
 22a:	df 90       	pop	r13
 22c:	bf 90       	pop	r11
 22e:	af 90       	pop	r10
 230:	08 95       	ret

00000232 <serialWrite>:
unsigned char serialRead(void)
{
	while( !(UCSR0A & (1 << RXC0)) )
	;
	return UDR0;
}
 232:	e0 ec       	ldi	r30, 0xC0	; 192
 234:	f0 e0       	ldi	r31, 0x00	; 0
 236:	90 81       	ld	r25, Z
 238:	95 ff       	sbrs	r25, 5
 23a:	fd cf       	rjmp	.-6      	; 0x236 <serialWrite+0x4>
 23c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 240:	08 95       	ret

00000242 <print>:

void print(int num,char c){
 242:	df 92       	push	r13
 244:	ef 92       	push	r14
 246:	ff 92       	push	r15
 248:	0f 93       	push	r16
 24a:	1f 93       	push	r17
 24c:	cf 93       	push	r28
 24e:	df 93       	push	r29
 250:	d6 2e       	mov	r13, r22
 252:	ca e0       	ldi	r28, 0x0A	; 10
 254:	d0 e0       	ldi	r29, 0x00	; 0
	char string[16];
	int j=0;
	for(;j<10;j++){
		string[j]=(num%10)+'0';
		serialWrite((num%10)+'0');
 256:	0f 2e       	mov	r0, r31
 258:	fa e0       	ldi	r31, 0x0A	; 10
 25a:	ef 2e       	mov	r14, r31
 25c:	f1 2c       	mov	r15, r1
 25e:	f0 2d       	mov	r31, r0
 260:	b7 01       	movw	r22, r14
 262:	0e 94 05 03 	call	0x60a	; 0x60a <__divmodhi4>
 266:	06 2f       	mov	r16, r22
 268:	17 2f       	mov	r17, r23
 26a:	c0 96       	adiw	r24, 0x30	; 48
 26c:	0e 94 19 01 	call	0x232	; 0x232 <serialWrite>
		num=num/10;
 270:	80 2f       	mov	r24, r16
 272:	91 2f       	mov	r25, r17
		if(num==0)
 274:	00 97       	sbiw	r24, 0x00	; 0
 276:	11 f0       	breq	.+4      	; 0x27c <print+0x3a>
 278:	21 97       	sbiw	r28, 0x01	; 1
}

void print(int num,char c){
	char string[16];
	int j=0;
	for(;j<10;j++){
 27a:	91 f7       	brne	.-28     	; 0x260 <print+0x1e>
	//int i=j;
	//char string1[j];
	//for(;i>=0;i--){
	//	serialWrite(string[i]);
	//}
	serialWrite(c);
 27c:	8d 2d       	mov	r24, r13
 27e:	90 e0       	ldi	r25, 0x00	; 0
 280:	0e 94 19 01 	call	0x232	; 0x232 <serialWrite>
}
 284:	df 91       	pop	r29
 286:	cf 91       	pop	r28
 288:	1f 91       	pop	r17
 28a:	0f 91       	pop	r16
 28c:	ff 90       	pop	r15
 28e:	ef 90       	pop	r14
 290:	df 90       	pop	r13
 292:	08 95       	ret

00000294 <serial_init>:


void serial_init(unsigned int bittimer)
{
	/* Set the baud rate */
	UBRR0H = (unsigned char) (bittimer >> 8);
 294:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = (unsigned char) bittimer;
 298:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	/* set the framing to 8N1 (8 data bits + 1 stop bit (default) */
	UCSR0C = (3 << UCSZ00);
 29c:	86 e0       	ldi	r24, 0x06	; 6
 29e:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	/* Enable receiver and transmitter */
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);
 2a2:	88 e1       	ldi	r24, 0x18	; 24
 2a4:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 2a8:	08 95       	ret

000002aa <main>:

int main (void)
{
	//asm("cli");  // DISABLE global interrupts.

	serial_init(MYUBRR);
 2aa:	87 e6       	ldi	r24, 0x67	; 103
 2ac:	90 e0       	ldi	r25, 0x00	; 0
 2ae:	0e 94 4a 01 	call	0x294	; 0x294 <serial_init>
	//serialWrite('H'); // Char : H
	i2c_init();
 2b2:	0e 94 53 00 	call	0xa6	; 0xa6 <i2c_init>
	uint8_t* data;
	data = (uint8_t *)malloc(sizeof(uint8_t));
 2b6:	81 e0       	ldi	r24, 0x01	; 1
 2b8:	90 e0       	ldi	r25, 0x00	; 0
 2ba:	0e 94 2d 03 	call	0x65a	; 0x65a <malloc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2be:	2f ef       	ldi	r18, 0xFF	; 255
 2c0:	31 ee       	ldi	r19, 0xE1	; 225
 2c2:	44 e0       	ldi	r20, 0x04	; 4
 2c4:	21 50       	subi	r18, 0x01	; 1
 2c6:	30 40       	sbci	r19, 0x00	; 0
 2c8:	40 40       	sbci	r20, 0x00	; 0
 2ca:	e1 f7       	brne	.-8      	; 0x2c4 <main+0x1a>
 2cc:	00 c0       	rjmp	.+0      	; 0x2ce <main+0x24>
 2ce:	00 00       	nop
	_delay_ms(100);
	//dat = (uint8_t *)malloc(sizeof(uint8_t));
	data[0]=0x00;
	//i2c_writeReg(0x3C,0x20,data,1);
    data[0]=0x2F;
 2d0:	2f e2       	ldi	r18, 0x2F	; 47
 2d2:	fc 01       	movw	r30, r24
 2d4:	20 83       	st	Z, r18
	i2c_writeReg(0x30,0x20,data,1);	
 2d6:	21 e0       	ldi	r18, 0x01	; 1
 2d8:	30 e0       	ldi	r19, 0x00	; 0
 2da:	ac 01       	movw	r20, r24
 2dc:	60 e2       	ldi	r22, 0x20	; 32
 2de:	80 e3       	ldi	r24, 0x30	; 48
 2e0:	0e 94 a4 00 	call	0x148	; 0x148 <i2c_writeReg>
	DDRB =1;
 2e4:	81 e0       	ldi	r24, 0x01	; 1
 2e6:	84 b9       	out	0x04, r24	; 4
	PORTB =1;
 2e8:	85 b9       	out	0x05, r24	; 5
	while(1) // main loop
	{	// Send 'Hello' to the LCD

		DDRB=1;
 2ea:	11 e0       	ldi	r17, 0x01	; 1
 2ec:	14 b9       	out	0x04, r17	; 4
		PORTB=0;
 2ee:	15 b8       	out	0x05, r1	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2f0:	fa e0       	ldi	r31, 0x0A	; 10
 2f2:	fa 95       	dec	r31
 2f4:	f1 f7       	brne	.-4      	; 0x2f2 <main+0x48>
 2f6:	00 c0       	rjmp	.+0      	; 0x2f8 <main+0x4e>
		_delay_us(2);
		PORTB=1;
 2f8:	15 b9       	out	0x05, r17	; 5
 2fa:	2a e1       	ldi	r18, 0x1A	; 26
 2fc:	2a 95       	dec	r18
 2fe:	f1 f7       	brne	.-4      	; 0x2fc <main+0x52>
 300:	00 c0       	rjmp	.+0      	; 0x302 <main+0x58>
		_delay_us(5);
		PORTB=0;
 302:	15 b8       	out	0x05, r1	; 5

		
		DDRB=0;
 304:	14 b8       	out	0x04, r1	; 4
		int counter=0;

		while(!(PINB&0x01)&&counter<1000)
 306:	18 99       	sbic	0x03, 0	; 3
 308:	4a c0       	rjmp	.+148    	; 0x39e <main+0xf4>
 30a:	88 ee       	ldi	r24, 0xE8	; 232
 30c:	93 e0       	ldi	r25, 0x03	; 3
 30e:	35 e0       	ldi	r19, 0x05	; 5
 310:	3a 95       	dec	r19
 312:	f1 f7       	brne	.-4      	; 0x310 <main+0x66>
 314:	00 00       	nop
 316:	18 99       	sbic	0x03, 0	; 3
 318:	42 c0       	rjmp	.+132    	; 0x39e <main+0xf4>
 31a:	01 97       	sbiw	r24, 0x01	; 1
 31c:	c1 f7       	brne	.-16     	; 0x30e <main+0x64>
 31e:	3f c0       	rjmp	.+126    	; 0x39e <main+0xf4>
		{
			_delay_us(1);
			counter++;
		}
		int distance=0;
		while((PINB&0x01)&&distance<25000)
 320:	60 e0       	ldi	r22, 0x00	; 0
 322:	70 e0       	ldi	r23, 0x00	; 0
 324:	45 e3       	ldi	r20, 0x35	; 53
 326:	4a 95       	dec	r20
 328:	f1 f7       	brne	.-4      	; 0x326 <main+0x7c>
 32a:	00 00       	nop
		{
			_delay_us(10);
			distance++;
 32c:	6f 5f       	subi	r22, 0xFF	; 255
 32e:	7f 4f       	sbci	r23, 0xFF	; 255
		{
			_delay_us(1);
			counter++;
		}
		int distance=0;
		while((PINB&0x01)&&distance<25000)
 330:	18 9b       	sbis	0x03, 0	; 3
 332:	04 c0       	rjmp	.+8      	; 0x33c <main+0x92>
 334:	68 3a       	cpi	r22, 0xA8	; 168
 336:	81 e6       	ldi	r24, 0x61	; 97
 338:	78 07       	cpc	r23, r24
 33a:	a1 f7       	brne	.-24     	; 0x324 <main+0x7a>
		{
			_delay_us(10);
			distance++;
		}
		
		distance =(float)distance *(float)0.174;
 33c:	07 2e       	mov	r0, r23
 33e:	00 0c       	add	r0, r0
 340:	88 0b       	sbc	r24, r24
 342:	99 0b       	sbc	r25, r25
 344:	0e 94 0c 02 	call	0x418	; 0x418 <__floatsisf>
 348:	2e e0       	ldi	r18, 0x0E	; 14
 34a:	3d e2       	ldi	r19, 0x2D	; 45
 34c:	42 e3       	ldi	r20, 0x32	; 50
 34e:	5e e3       	ldi	r21, 0x3E	; 62
 350:	0e 94 70 02 	call	0x4e0	; 0x4e0 <__mulsf3>
		
		print(distance,'a');
 354:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <__fixsfsi>
 358:	dc 01       	movw	r26, r24
 35a:	cb 01       	movw	r24, r22
 35c:	61 e6       	ldi	r22, 0x61	; 97
 35e:	0e 94 21 01 	call	0x242	; 0x242 <print>
		
		
		uint8_t* dat;
		dat = (uint8_t *)malloc(sizeof(uint8_t));
 362:	81 e0       	ldi	r24, 0x01	; 1
 364:	90 e0       	ldi	r25, 0x00	; 0
 366:	0e 94 2d 03 	call	0x65a	; 0x65a <malloc>
 36a:	ec 01       	movw	r28, r24
		i2c_readReg(0x30,0x29,dat,1);
 36c:	21 e0       	ldi	r18, 0x01	; 1
 36e:	30 e0       	ldi	r19, 0x00	; 0
 370:	ac 01       	movw	r20, r24
 372:	69 e2       	ldi	r22, 0x29	; 41
 374:	80 e3       	ldi	r24, 0x30	; 48
 376:	0e 94 d6 00 	call	0x1ac	; 0x1ac <i2c_readReg>
		//serialWrite(data[0]);
		print(*dat,'b');
 37a:	88 81       	ld	r24, Y
 37c:	62 e6       	ldi	r22, 0x62	; 98
 37e:	90 e0       	ldi	r25, 0x00	; 0
 380:	0e 94 21 01 	call	0x242	; 0x242 <print>
		free(dat);
 384:	ce 01       	movw	r24, r28
 386:	0e 94 c5 03 	call	0x78a	; 0x78a <free>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 38a:	9f ef       	ldi	r25, 0xFF	; 255
 38c:	e3 ed       	ldi	r30, 0xD3	; 211
 38e:	f0 e3       	ldi	r31, 0x30	; 48
 390:	91 50       	subi	r25, 0x01	; 1
 392:	e0 40       	sbci	r30, 0x00	; 0
 394:	f0 40       	sbci	r31, 0x00	; 0
 396:	e1 f7       	brne	.-8      	; 0x390 <main+0xe6>
 398:	00 c0       	rjmp	.+0      	; 0x39a <main+0xf0>
 39a:	00 00       	nop
 39c:	a7 cf       	rjmp	.-178    	; 0x2ec <main+0x42>
		{
			_delay_us(1);
			counter++;
		}
		int distance=0;
		while((PINB&0x01)&&distance<25000)
 39e:	18 99       	sbic	0x03, 0	; 3
 3a0:	bf cf       	rjmp	.-130    	; 0x320 <main+0x76>
 3a2:	60 e0       	ldi	r22, 0x00	; 0
 3a4:	70 e0       	ldi	r23, 0x00	; 0
 3a6:	ca cf       	rjmp	.-108    	; 0x33c <main+0x92>

000003a8 <__fixsfsi>:
 3a8:	0e 94 db 01 	call	0x3b6	; 0x3b6 <__fixunssfsi>
 3ac:	68 94       	set
 3ae:	b1 11       	cpse	r27, r1
 3b0:	0c 94 6a 02 	jmp	0x4d4	; 0x4d4 <__fp_szero>
 3b4:	08 95       	ret

000003b6 <__fixunssfsi>:
 3b6:	0e 94 4f 02 	call	0x49e	; 0x49e <__fp_splitA>
 3ba:	88 f0       	brcs	.+34     	; 0x3de <__fixunssfsi+0x28>
 3bc:	9f 57       	subi	r25, 0x7F	; 127
 3be:	98 f0       	brcs	.+38     	; 0x3e6 <__fixunssfsi+0x30>
 3c0:	b9 2f       	mov	r27, r25
 3c2:	99 27       	eor	r25, r25
 3c4:	b7 51       	subi	r27, 0x17	; 23
 3c6:	b0 f0       	brcs	.+44     	; 0x3f4 <__fixunssfsi+0x3e>
 3c8:	e1 f0       	breq	.+56     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 3ca:	66 0f       	add	r22, r22
 3cc:	77 1f       	adc	r23, r23
 3ce:	88 1f       	adc	r24, r24
 3d0:	99 1f       	adc	r25, r25
 3d2:	1a f0       	brmi	.+6      	; 0x3da <__fixunssfsi+0x24>
 3d4:	ba 95       	dec	r27
 3d6:	c9 f7       	brne	.-14     	; 0x3ca <__fixunssfsi+0x14>
 3d8:	14 c0       	rjmp	.+40     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 3da:	b1 30       	cpi	r27, 0x01	; 1
 3dc:	91 f0       	breq	.+36     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 3de:	0e 94 69 02 	call	0x4d2	; 0x4d2 <__fp_zero>
 3e2:	b1 e0       	ldi	r27, 0x01	; 1
 3e4:	08 95       	ret
 3e6:	0c 94 69 02 	jmp	0x4d2	; 0x4d2 <__fp_zero>
 3ea:	67 2f       	mov	r22, r23
 3ec:	78 2f       	mov	r23, r24
 3ee:	88 27       	eor	r24, r24
 3f0:	b8 5f       	subi	r27, 0xF8	; 248
 3f2:	39 f0       	breq	.+14     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 3f4:	b9 3f       	cpi	r27, 0xF9	; 249
 3f6:	cc f3       	brlt	.-14     	; 0x3ea <__fixunssfsi+0x34>
 3f8:	86 95       	lsr	r24
 3fa:	77 95       	ror	r23
 3fc:	67 95       	ror	r22
 3fe:	b3 95       	inc	r27
 400:	d9 f7       	brne	.-10     	; 0x3f8 <__fixunssfsi+0x42>
 402:	3e f4       	brtc	.+14     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
 404:	90 95       	com	r25
 406:	80 95       	com	r24
 408:	70 95       	com	r23
 40a:	61 95       	neg	r22
 40c:	7f 4f       	sbci	r23, 0xFF	; 255
 40e:	8f 4f       	sbci	r24, 0xFF	; 255
 410:	9f 4f       	sbci	r25, 0xFF	; 255
 412:	08 95       	ret

00000414 <__floatunsisf>:
 414:	e8 94       	clt
 416:	09 c0       	rjmp	.+18     	; 0x42a <__floatsisf+0x12>

00000418 <__floatsisf>:
 418:	97 fb       	bst	r25, 7
 41a:	3e f4       	brtc	.+14     	; 0x42a <__floatsisf+0x12>
 41c:	90 95       	com	r25
 41e:	80 95       	com	r24
 420:	70 95       	com	r23
 422:	61 95       	neg	r22
 424:	7f 4f       	sbci	r23, 0xFF	; 255
 426:	8f 4f       	sbci	r24, 0xFF	; 255
 428:	9f 4f       	sbci	r25, 0xFF	; 255
 42a:	99 23       	and	r25, r25
 42c:	a9 f0       	breq	.+42     	; 0x458 <__floatsisf+0x40>
 42e:	f9 2f       	mov	r31, r25
 430:	96 e9       	ldi	r25, 0x96	; 150
 432:	bb 27       	eor	r27, r27
 434:	93 95       	inc	r25
 436:	f6 95       	lsr	r31
 438:	87 95       	ror	r24
 43a:	77 95       	ror	r23
 43c:	67 95       	ror	r22
 43e:	b7 95       	ror	r27
 440:	f1 11       	cpse	r31, r1
 442:	f8 cf       	rjmp	.-16     	; 0x434 <__floatsisf+0x1c>
 444:	fa f4       	brpl	.+62     	; 0x484 <__floatsisf+0x6c>
 446:	bb 0f       	add	r27, r27
 448:	11 f4       	brne	.+4      	; 0x44e <__floatsisf+0x36>
 44a:	60 ff       	sbrs	r22, 0
 44c:	1b c0       	rjmp	.+54     	; 0x484 <__floatsisf+0x6c>
 44e:	6f 5f       	subi	r22, 0xFF	; 255
 450:	7f 4f       	sbci	r23, 0xFF	; 255
 452:	8f 4f       	sbci	r24, 0xFF	; 255
 454:	9f 4f       	sbci	r25, 0xFF	; 255
 456:	16 c0       	rjmp	.+44     	; 0x484 <__floatsisf+0x6c>
 458:	88 23       	and	r24, r24
 45a:	11 f0       	breq	.+4      	; 0x460 <__floatsisf+0x48>
 45c:	96 e9       	ldi	r25, 0x96	; 150
 45e:	11 c0       	rjmp	.+34     	; 0x482 <__floatsisf+0x6a>
 460:	77 23       	and	r23, r23
 462:	21 f0       	breq	.+8      	; 0x46c <__floatsisf+0x54>
 464:	9e e8       	ldi	r25, 0x8E	; 142
 466:	87 2f       	mov	r24, r23
 468:	76 2f       	mov	r23, r22
 46a:	05 c0       	rjmp	.+10     	; 0x476 <__floatsisf+0x5e>
 46c:	66 23       	and	r22, r22
 46e:	71 f0       	breq	.+28     	; 0x48c <__floatsisf+0x74>
 470:	96 e8       	ldi	r25, 0x86	; 134
 472:	86 2f       	mov	r24, r22
 474:	70 e0       	ldi	r23, 0x00	; 0
 476:	60 e0       	ldi	r22, 0x00	; 0
 478:	2a f0       	brmi	.+10     	; 0x484 <__floatsisf+0x6c>
 47a:	9a 95       	dec	r25
 47c:	66 0f       	add	r22, r22
 47e:	77 1f       	adc	r23, r23
 480:	88 1f       	adc	r24, r24
 482:	da f7       	brpl	.-10     	; 0x47a <__floatsisf+0x62>
 484:	88 0f       	add	r24, r24
 486:	96 95       	lsr	r25
 488:	87 95       	ror	r24
 48a:	97 f9       	bld	r25, 7
 48c:	08 95       	ret

0000048e <__fp_split3>:
 48e:	57 fd       	sbrc	r21, 7
 490:	90 58       	subi	r25, 0x80	; 128
 492:	44 0f       	add	r20, r20
 494:	55 1f       	adc	r21, r21
 496:	59 f0       	breq	.+22     	; 0x4ae <__fp_splitA+0x10>
 498:	5f 3f       	cpi	r21, 0xFF	; 255
 49a:	71 f0       	breq	.+28     	; 0x4b8 <__fp_splitA+0x1a>
 49c:	47 95       	ror	r20

0000049e <__fp_splitA>:
 49e:	88 0f       	add	r24, r24
 4a0:	97 fb       	bst	r25, 7
 4a2:	99 1f       	adc	r25, r25
 4a4:	61 f0       	breq	.+24     	; 0x4be <__fp_splitA+0x20>
 4a6:	9f 3f       	cpi	r25, 0xFF	; 255
 4a8:	79 f0       	breq	.+30     	; 0x4c8 <__fp_splitA+0x2a>
 4aa:	87 95       	ror	r24
 4ac:	08 95       	ret
 4ae:	12 16       	cp	r1, r18
 4b0:	13 06       	cpc	r1, r19
 4b2:	14 06       	cpc	r1, r20
 4b4:	55 1f       	adc	r21, r21
 4b6:	f2 cf       	rjmp	.-28     	; 0x49c <__fp_split3+0xe>
 4b8:	46 95       	lsr	r20
 4ba:	f1 df       	rcall	.-30     	; 0x49e <__fp_splitA>
 4bc:	08 c0       	rjmp	.+16     	; 0x4ce <__fp_splitA+0x30>
 4be:	16 16       	cp	r1, r22
 4c0:	17 06       	cpc	r1, r23
 4c2:	18 06       	cpc	r1, r24
 4c4:	99 1f       	adc	r25, r25
 4c6:	f1 cf       	rjmp	.-30     	; 0x4aa <__fp_splitA+0xc>
 4c8:	86 95       	lsr	r24
 4ca:	71 05       	cpc	r23, r1
 4cc:	61 05       	cpc	r22, r1
 4ce:	08 94       	sec
 4d0:	08 95       	ret

000004d2 <__fp_zero>:
 4d2:	e8 94       	clt

000004d4 <__fp_szero>:
 4d4:	bb 27       	eor	r27, r27
 4d6:	66 27       	eor	r22, r22
 4d8:	77 27       	eor	r23, r23
 4da:	cb 01       	movw	r24, r22
 4dc:	97 f9       	bld	r25, 7
 4de:	08 95       	ret

000004e0 <__mulsf3>:
 4e0:	0e 94 83 02 	call	0x506	; 0x506 <__mulsf3x>
 4e4:	0c 94 f4 02 	jmp	0x5e8	; 0x5e8 <__fp_round>
 4e8:	0e 94 e6 02 	call	0x5cc	; 0x5cc <__fp_pscA>
 4ec:	38 f0       	brcs	.+14     	; 0x4fc <__mulsf3+0x1c>
 4ee:	0e 94 ed 02 	call	0x5da	; 0x5da <__fp_pscB>
 4f2:	20 f0       	brcs	.+8      	; 0x4fc <__mulsf3+0x1c>
 4f4:	95 23       	and	r25, r21
 4f6:	11 f0       	breq	.+4      	; 0x4fc <__mulsf3+0x1c>
 4f8:	0c 94 dd 02 	jmp	0x5ba	; 0x5ba <__fp_inf>
 4fc:	0c 94 e3 02 	jmp	0x5c6	; 0x5c6 <__fp_nan>
 500:	11 24       	eor	r1, r1
 502:	0c 94 6a 02 	jmp	0x4d4	; 0x4d4 <__fp_szero>

00000506 <__mulsf3x>:
 506:	0e 94 47 02 	call	0x48e	; 0x48e <__fp_split3>
 50a:	70 f3       	brcs	.-36     	; 0x4e8 <__mulsf3+0x8>

0000050c <__mulsf3_pse>:
 50c:	95 9f       	mul	r25, r21
 50e:	c1 f3       	breq	.-16     	; 0x500 <__mulsf3+0x20>
 510:	95 0f       	add	r25, r21
 512:	50 e0       	ldi	r21, 0x00	; 0
 514:	55 1f       	adc	r21, r21
 516:	62 9f       	mul	r22, r18
 518:	f0 01       	movw	r30, r0
 51a:	72 9f       	mul	r23, r18
 51c:	bb 27       	eor	r27, r27
 51e:	f0 0d       	add	r31, r0
 520:	b1 1d       	adc	r27, r1
 522:	63 9f       	mul	r22, r19
 524:	aa 27       	eor	r26, r26
 526:	f0 0d       	add	r31, r0
 528:	b1 1d       	adc	r27, r1
 52a:	aa 1f       	adc	r26, r26
 52c:	64 9f       	mul	r22, r20
 52e:	66 27       	eor	r22, r22
 530:	b0 0d       	add	r27, r0
 532:	a1 1d       	adc	r26, r1
 534:	66 1f       	adc	r22, r22
 536:	82 9f       	mul	r24, r18
 538:	22 27       	eor	r18, r18
 53a:	b0 0d       	add	r27, r0
 53c:	a1 1d       	adc	r26, r1
 53e:	62 1f       	adc	r22, r18
 540:	73 9f       	mul	r23, r19
 542:	b0 0d       	add	r27, r0
 544:	a1 1d       	adc	r26, r1
 546:	62 1f       	adc	r22, r18
 548:	83 9f       	mul	r24, r19
 54a:	a0 0d       	add	r26, r0
 54c:	61 1d       	adc	r22, r1
 54e:	22 1f       	adc	r18, r18
 550:	74 9f       	mul	r23, r20
 552:	33 27       	eor	r19, r19
 554:	a0 0d       	add	r26, r0
 556:	61 1d       	adc	r22, r1
 558:	23 1f       	adc	r18, r19
 55a:	84 9f       	mul	r24, r20
 55c:	60 0d       	add	r22, r0
 55e:	21 1d       	adc	r18, r1
 560:	82 2f       	mov	r24, r18
 562:	76 2f       	mov	r23, r22
 564:	6a 2f       	mov	r22, r26
 566:	11 24       	eor	r1, r1
 568:	9f 57       	subi	r25, 0x7F	; 127
 56a:	50 40       	sbci	r21, 0x00	; 0
 56c:	9a f0       	brmi	.+38     	; 0x594 <__mulsf3_pse+0x88>
 56e:	f1 f0       	breq	.+60     	; 0x5ac <__mulsf3_pse+0xa0>
 570:	88 23       	and	r24, r24
 572:	4a f0       	brmi	.+18     	; 0x586 <__mulsf3_pse+0x7a>
 574:	ee 0f       	add	r30, r30
 576:	ff 1f       	adc	r31, r31
 578:	bb 1f       	adc	r27, r27
 57a:	66 1f       	adc	r22, r22
 57c:	77 1f       	adc	r23, r23
 57e:	88 1f       	adc	r24, r24
 580:	91 50       	subi	r25, 0x01	; 1
 582:	50 40       	sbci	r21, 0x00	; 0
 584:	a9 f7       	brne	.-22     	; 0x570 <__mulsf3_pse+0x64>
 586:	9e 3f       	cpi	r25, 0xFE	; 254
 588:	51 05       	cpc	r21, r1
 58a:	80 f0       	brcs	.+32     	; 0x5ac <__mulsf3_pse+0xa0>
 58c:	0c 94 dd 02 	jmp	0x5ba	; 0x5ba <__fp_inf>
 590:	0c 94 6a 02 	jmp	0x4d4	; 0x4d4 <__fp_szero>
 594:	5f 3f       	cpi	r21, 0xFF	; 255
 596:	e4 f3       	brlt	.-8      	; 0x590 <__mulsf3_pse+0x84>
 598:	98 3e       	cpi	r25, 0xE8	; 232
 59a:	d4 f3       	brlt	.-12     	; 0x590 <__mulsf3_pse+0x84>
 59c:	86 95       	lsr	r24
 59e:	77 95       	ror	r23
 5a0:	67 95       	ror	r22
 5a2:	b7 95       	ror	r27
 5a4:	f7 95       	ror	r31
 5a6:	e7 95       	ror	r30
 5a8:	9f 5f       	subi	r25, 0xFF	; 255
 5aa:	c1 f7       	brne	.-16     	; 0x59c <__mulsf3_pse+0x90>
 5ac:	fe 2b       	or	r31, r30
 5ae:	88 0f       	add	r24, r24
 5b0:	91 1d       	adc	r25, r1
 5b2:	96 95       	lsr	r25
 5b4:	87 95       	ror	r24
 5b6:	97 f9       	bld	r25, 7
 5b8:	08 95       	ret

000005ba <__fp_inf>:
 5ba:	97 f9       	bld	r25, 7
 5bc:	9f 67       	ori	r25, 0x7F	; 127
 5be:	80 e8       	ldi	r24, 0x80	; 128
 5c0:	70 e0       	ldi	r23, 0x00	; 0
 5c2:	60 e0       	ldi	r22, 0x00	; 0
 5c4:	08 95       	ret

000005c6 <__fp_nan>:
 5c6:	9f ef       	ldi	r25, 0xFF	; 255
 5c8:	80 ec       	ldi	r24, 0xC0	; 192
 5ca:	08 95       	ret

000005cc <__fp_pscA>:
 5cc:	00 24       	eor	r0, r0
 5ce:	0a 94       	dec	r0
 5d0:	16 16       	cp	r1, r22
 5d2:	17 06       	cpc	r1, r23
 5d4:	18 06       	cpc	r1, r24
 5d6:	09 06       	cpc	r0, r25
 5d8:	08 95       	ret

000005da <__fp_pscB>:
 5da:	00 24       	eor	r0, r0
 5dc:	0a 94       	dec	r0
 5de:	12 16       	cp	r1, r18
 5e0:	13 06       	cpc	r1, r19
 5e2:	14 06       	cpc	r1, r20
 5e4:	05 06       	cpc	r0, r21
 5e6:	08 95       	ret

000005e8 <__fp_round>:
 5e8:	09 2e       	mov	r0, r25
 5ea:	03 94       	inc	r0
 5ec:	00 0c       	add	r0, r0
 5ee:	11 f4       	brne	.+4      	; 0x5f4 <__fp_round+0xc>
 5f0:	88 23       	and	r24, r24
 5f2:	52 f0       	brmi	.+20     	; 0x608 <__fp_round+0x20>
 5f4:	bb 0f       	add	r27, r27
 5f6:	40 f4       	brcc	.+16     	; 0x608 <__fp_round+0x20>
 5f8:	bf 2b       	or	r27, r31
 5fa:	11 f4       	brne	.+4      	; 0x600 <__fp_round+0x18>
 5fc:	60 ff       	sbrs	r22, 0
 5fe:	04 c0       	rjmp	.+8      	; 0x608 <__fp_round+0x20>
 600:	6f 5f       	subi	r22, 0xFF	; 255
 602:	7f 4f       	sbci	r23, 0xFF	; 255
 604:	8f 4f       	sbci	r24, 0xFF	; 255
 606:	9f 4f       	sbci	r25, 0xFF	; 255
 608:	08 95       	ret

0000060a <__divmodhi4>:
 60a:	97 fb       	bst	r25, 7
 60c:	07 2e       	mov	r0, r23
 60e:	16 f4       	brtc	.+4      	; 0x614 <__divmodhi4+0xa>
 610:	00 94       	com	r0
 612:	07 d0       	rcall	.+14     	; 0x622 <__divmodhi4_neg1>
 614:	77 fd       	sbrc	r23, 7
 616:	09 d0       	rcall	.+18     	; 0x62a <__divmodhi4_neg2>
 618:	0e 94 19 03 	call	0x632	; 0x632 <__udivmodhi4>
 61c:	07 fc       	sbrc	r0, 7
 61e:	05 d0       	rcall	.+10     	; 0x62a <__divmodhi4_neg2>
 620:	3e f4       	brtc	.+14     	; 0x630 <__divmodhi4_exit>

00000622 <__divmodhi4_neg1>:
 622:	90 95       	com	r25
 624:	81 95       	neg	r24
 626:	9f 4f       	sbci	r25, 0xFF	; 255
 628:	08 95       	ret

0000062a <__divmodhi4_neg2>:
 62a:	70 95       	com	r23
 62c:	61 95       	neg	r22
 62e:	7f 4f       	sbci	r23, 0xFF	; 255

00000630 <__divmodhi4_exit>:
 630:	08 95       	ret

00000632 <__udivmodhi4>:
 632:	aa 1b       	sub	r26, r26
 634:	bb 1b       	sub	r27, r27
 636:	51 e1       	ldi	r21, 0x11	; 17
 638:	07 c0       	rjmp	.+14     	; 0x648 <__udivmodhi4_ep>

0000063a <__udivmodhi4_loop>:
 63a:	aa 1f       	adc	r26, r26
 63c:	bb 1f       	adc	r27, r27
 63e:	a6 17       	cp	r26, r22
 640:	b7 07       	cpc	r27, r23
 642:	10 f0       	brcs	.+4      	; 0x648 <__udivmodhi4_ep>
 644:	a6 1b       	sub	r26, r22
 646:	b7 0b       	sbc	r27, r23

00000648 <__udivmodhi4_ep>:
 648:	88 1f       	adc	r24, r24
 64a:	99 1f       	adc	r25, r25
 64c:	5a 95       	dec	r21
 64e:	a9 f7       	brne	.-22     	; 0x63a <__udivmodhi4_loop>
 650:	80 95       	com	r24
 652:	90 95       	com	r25
 654:	bc 01       	movw	r22, r24
 656:	cd 01       	movw	r24, r26
 658:	08 95       	ret

0000065a <malloc>:
 65a:	0f 93       	push	r16
 65c:	1f 93       	push	r17
 65e:	cf 93       	push	r28
 660:	df 93       	push	r29
 662:	82 30       	cpi	r24, 0x02	; 2
 664:	91 05       	cpc	r25, r1
 666:	10 f4       	brcc	.+4      	; 0x66c <malloc+0x12>
 668:	82 e0       	ldi	r24, 0x02	; 2
 66a:	90 e0       	ldi	r25, 0x00	; 0
 66c:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <__flp>
 670:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <__flp+0x1>
 674:	20 e0       	ldi	r18, 0x00	; 0
 676:	30 e0       	ldi	r19, 0x00	; 0
 678:	a0 e0       	ldi	r26, 0x00	; 0
 67a:	b0 e0       	ldi	r27, 0x00	; 0
 67c:	30 97       	sbiw	r30, 0x00	; 0
 67e:	19 f1       	breq	.+70     	; 0x6c6 <malloc+0x6c>
 680:	40 81       	ld	r20, Z
 682:	51 81       	ldd	r21, Z+1	; 0x01
 684:	02 81       	ldd	r16, Z+2	; 0x02
 686:	13 81       	ldd	r17, Z+3	; 0x03
 688:	48 17       	cp	r20, r24
 68a:	59 07       	cpc	r21, r25
 68c:	c8 f0       	brcs	.+50     	; 0x6c0 <malloc+0x66>
 68e:	84 17       	cp	r24, r20
 690:	95 07       	cpc	r25, r21
 692:	69 f4       	brne	.+26     	; 0x6ae <malloc+0x54>
 694:	10 97       	sbiw	r26, 0x00	; 0
 696:	31 f0       	breq	.+12     	; 0x6a4 <malloc+0x4a>
 698:	12 96       	adiw	r26, 0x02	; 2
 69a:	0c 93       	st	X, r16
 69c:	12 97       	sbiw	r26, 0x02	; 2
 69e:	13 96       	adiw	r26, 0x03	; 3
 6a0:	1c 93       	st	X, r17
 6a2:	27 c0       	rjmp	.+78     	; 0x6f2 <malloc+0x98>
 6a4:	00 93 08 01 	sts	0x0108, r16	; 0x800108 <__flp>
 6a8:	10 93 09 01 	sts	0x0109, r17	; 0x800109 <__flp+0x1>
 6ac:	22 c0       	rjmp	.+68     	; 0x6f2 <malloc+0x98>
 6ae:	21 15       	cp	r18, r1
 6b0:	31 05       	cpc	r19, r1
 6b2:	19 f0       	breq	.+6      	; 0x6ba <malloc+0x60>
 6b4:	42 17       	cp	r20, r18
 6b6:	53 07       	cpc	r21, r19
 6b8:	18 f4       	brcc	.+6      	; 0x6c0 <malloc+0x66>
 6ba:	9a 01       	movw	r18, r20
 6bc:	bd 01       	movw	r22, r26
 6be:	ef 01       	movw	r28, r30
 6c0:	df 01       	movw	r26, r30
 6c2:	f8 01       	movw	r30, r16
 6c4:	db cf       	rjmp	.-74     	; 0x67c <malloc+0x22>
 6c6:	21 15       	cp	r18, r1
 6c8:	31 05       	cpc	r19, r1
 6ca:	f9 f0       	breq	.+62     	; 0x70a <malloc+0xb0>
 6cc:	28 1b       	sub	r18, r24
 6ce:	39 0b       	sbc	r19, r25
 6d0:	24 30       	cpi	r18, 0x04	; 4
 6d2:	31 05       	cpc	r19, r1
 6d4:	80 f4       	brcc	.+32     	; 0x6f6 <malloc+0x9c>
 6d6:	8a 81       	ldd	r24, Y+2	; 0x02
 6d8:	9b 81       	ldd	r25, Y+3	; 0x03
 6da:	61 15       	cp	r22, r1
 6dc:	71 05       	cpc	r23, r1
 6de:	21 f0       	breq	.+8      	; 0x6e8 <malloc+0x8e>
 6e0:	fb 01       	movw	r30, r22
 6e2:	93 83       	std	Z+3, r25	; 0x03
 6e4:	82 83       	std	Z+2, r24	; 0x02
 6e6:	04 c0       	rjmp	.+8      	; 0x6f0 <malloc+0x96>
 6e8:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <__flp+0x1>
 6ec:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__flp>
 6f0:	fe 01       	movw	r30, r28
 6f2:	32 96       	adiw	r30, 0x02	; 2
 6f4:	44 c0       	rjmp	.+136    	; 0x77e <malloc+0x124>
 6f6:	fe 01       	movw	r30, r28
 6f8:	e2 0f       	add	r30, r18
 6fa:	f3 1f       	adc	r31, r19
 6fc:	81 93       	st	Z+, r24
 6fe:	91 93       	st	Z+, r25
 700:	22 50       	subi	r18, 0x02	; 2
 702:	31 09       	sbc	r19, r1
 704:	39 83       	std	Y+1, r19	; 0x01
 706:	28 83       	st	Y, r18
 708:	3a c0       	rjmp	.+116    	; 0x77e <malloc+0x124>
 70a:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <__data_end>
 70e:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <__data_end+0x1>
 712:	23 2b       	or	r18, r19
 714:	41 f4       	brne	.+16     	; 0x726 <malloc+0xcc>
 716:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
 71a:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
 71e:	30 93 07 01 	sts	0x0107, r19	; 0x800107 <__data_end+0x1>
 722:	20 93 06 01 	sts	0x0106, r18	; 0x800106 <__data_end>
 726:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 72a:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 72e:	21 15       	cp	r18, r1
 730:	31 05       	cpc	r19, r1
 732:	41 f4       	brne	.+16     	; 0x744 <malloc+0xea>
 734:	2d b7       	in	r18, 0x3d	; 61
 736:	3e b7       	in	r19, 0x3e	; 62
 738:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 73c:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 740:	24 1b       	sub	r18, r20
 742:	35 0b       	sbc	r19, r21
 744:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <__data_end>
 748:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <__data_end+0x1>
 74c:	e2 17       	cp	r30, r18
 74e:	f3 07       	cpc	r31, r19
 750:	a0 f4       	brcc	.+40     	; 0x77a <malloc+0x120>
 752:	2e 1b       	sub	r18, r30
 754:	3f 0b       	sbc	r19, r31
 756:	28 17       	cp	r18, r24
 758:	39 07       	cpc	r19, r25
 75a:	78 f0       	brcs	.+30     	; 0x77a <malloc+0x120>
 75c:	ac 01       	movw	r20, r24
 75e:	4e 5f       	subi	r20, 0xFE	; 254
 760:	5f 4f       	sbci	r21, 0xFF	; 255
 762:	24 17       	cp	r18, r20
 764:	35 07       	cpc	r19, r21
 766:	48 f0       	brcs	.+18     	; 0x77a <malloc+0x120>
 768:	4e 0f       	add	r20, r30
 76a:	5f 1f       	adc	r21, r31
 76c:	50 93 07 01 	sts	0x0107, r21	; 0x800107 <__data_end+0x1>
 770:	40 93 06 01 	sts	0x0106, r20	; 0x800106 <__data_end>
 774:	81 93       	st	Z+, r24
 776:	91 93       	st	Z+, r25
 778:	02 c0       	rjmp	.+4      	; 0x77e <malloc+0x124>
 77a:	e0 e0       	ldi	r30, 0x00	; 0
 77c:	f0 e0       	ldi	r31, 0x00	; 0
 77e:	cf 01       	movw	r24, r30
 780:	df 91       	pop	r29
 782:	cf 91       	pop	r28
 784:	1f 91       	pop	r17
 786:	0f 91       	pop	r16
 788:	08 95       	ret

0000078a <free>:
 78a:	cf 93       	push	r28
 78c:	df 93       	push	r29
 78e:	00 97       	sbiw	r24, 0x00	; 0
 790:	09 f4       	brne	.+2      	; 0x794 <free+0xa>
 792:	81 c0       	rjmp	.+258    	; 0x896 <free+0x10c>
 794:	fc 01       	movw	r30, r24
 796:	32 97       	sbiw	r30, 0x02	; 2
 798:	13 82       	std	Z+3, r1	; 0x03
 79a:	12 82       	std	Z+2, r1	; 0x02
 79c:	a0 91 08 01 	lds	r26, 0x0108	; 0x800108 <__flp>
 7a0:	b0 91 09 01 	lds	r27, 0x0109	; 0x800109 <__flp+0x1>
 7a4:	10 97       	sbiw	r26, 0x00	; 0
 7a6:	81 f4       	brne	.+32     	; 0x7c8 <free+0x3e>
 7a8:	20 81       	ld	r18, Z
 7aa:	31 81       	ldd	r19, Z+1	; 0x01
 7ac:	82 0f       	add	r24, r18
 7ae:	93 1f       	adc	r25, r19
 7b0:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <__data_end>
 7b4:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <__data_end+0x1>
 7b8:	28 17       	cp	r18, r24
 7ba:	39 07       	cpc	r19, r25
 7bc:	51 f5       	brne	.+84     	; 0x812 <free+0x88>
 7be:	f0 93 07 01 	sts	0x0107, r31	; 0x800107 <__data_end+0x1>
 7c2:	e0 93 06 01 	sts	0x0106, r30	; 0x800106 <__data_end>
 7c6:	67 c0       	rjmp	.+206    	; 0x896 <free+0x10c>
 7c8:	ed 01       	movw	r28, r26
 7ca:	20 e0       	ldi	r18, 0x00	; 0
 7cc:	30 e0       	ldi	r19, 0x00	; 0
 7ce:	ce 17       	cp	r28, r30
 7d0:	df 07       	cpc	r29, r31
 7d2:	40 f4       	brcc	.+16     	; 0x7e4 <free+0x5a>
 7d4:	4a 81       	ldd	r20, Y+2	; 0x02
 7d6:	5b 81       	ldd	r21, Y+3	; 0x03
 7d8:	9e 01       	movw	r18, r28
 7da:	41 15       	cp	r20, r1
 7dc:	51 05       	cpc	r21, r1
 7de:	f1 f0       	breq	.+60     	; 0x81c <free+0x92>
 7e0:	ea 01       	movw	r28, r20
 7e2:	f5 cf       	rjmp	.-22     	; 0x7ce <free+0x44>
 7e4:	d3 83       	std	Z+3, r29	; 0x03
 7e6:	c2 83       	std	Z+2, r28	; 0x02
 7e8:	40 81       	ld	r20, Z
 7ea:	51 81       	ldd	r21, Z+1	; 0x01
 7ec:	84 0f       	add	r24, r20
 7ee:	95 1f       	adc	r25, r21
 7f0:	c8 17       	cp	r28, r24
 7f2:	d9 07       	cpc	r29, r25
 7f4:	59 f4       	brne	.+22     	; 0x80c <free+0x82>
 7f6:	88 81       	ld	r24, Y
 7f8:	99 81       	ldd	r25, Y+1	; 0x01
 7fa:	84 0f       	add	r24, r20
 7fc:	95 1f       	adc	r25, r21
 7fe:	02 96       	adiw	r24, 0x02	; 2
 800:	91 83       	std	Z+1, r25	; 0x01
 802:	80 83       	st	Z, r24
 804:	8a 81       	ldd	r24, Y+2	; 0x02
 806:	9b 81       	ldd	r25, Y+3	; 0x03
 808:	93 83       	std	Z+3, r25	; 0x03
 80a:	82 83       	std	Z+2, r24	; 0x02
 80c:	21 15       	cp	r18, r1
 80e:	31 05       	cpc	r19, r1
 810:	29 f4       	brne	.+10     	; 0x81c <free+0x92>
 812:	f0 93 09 01 	sts	0x0109, r31	; 0x800109 <__flp+0x1>
 816:	e0 93 08 01 	sts	0x0108, r30	; 0x800108 <__flp>
 81a:	3d c0       	rjmp	.+122    	; 0x896 <free+0x10c>
 81c:	e9 01       	movw	r28, r18
 81e:	fb 83       	std	Y+3, r31	; 0x03
 820:	ea 83       	std	Y+2, r30	; 0x02
 822:	49 91       	ld	r20, Y+
 824:	59 91       	ld	r21, Y+
 826:	c4 0f       	add	r28, r20
 828:	d5 1f       	adc	r29, r21
 82a:	ec 17       	cp	r30, r28
 82c:	fd 07       	cpc	r31, r29
 82e:	61 f4       	brne	.+24     	; 0x848 <free+0xbe>
 830:	80 81       	ld	r24, Z
 832:	91 81       	ldd	r25, Z+1	; 0x01
 834:	84 0f       	add	r24, r20
 836:	95 1f       	adc	r25, r21
 838:	02 96       	adiw	r24, 0x02	; 2
 83a:	e9 01       	movw	r28, r18
 83c:	99 83       	std	Y+1, r25	; 0x01
 83e:	88 83       	st	Y, r24
 840:	82 81       	ldd	r24, Z+2	; 0x02
 842:	93 81       	ldd	r25, Z+3	; 0x03
 844:	9b 83       	std	Y+3, r25	; 0x03
 846:	8a 83       	std	Y+2, r24	; 0x02
 848:	e0 e0       	ldi	r30, 0x00	; 0
 84a:	f0 e0       	ldi	r31, 0x00	; 0
 84c:	12 96       	adiw	r26, 0x02	; 2
 84e:	8d 91       	ld	r24, X+
 850:	9c 91       	ld	r25, X
 852:	13 97       	sbiw	r26, 0x03	; 3
 854:	00 97       	sbiw	r24, 0x00	; 0
 856:	19 f0       	breq	.+6      	; 0x85e <free+0xd4>
 858:	fd 01       	movw	r30, r26
 85a:	dc 01       	movw	r26, r24
 85c:	f7 cf       	rjmp	.-18     	; 0x84c <free+0xc2>
 85e:	8d 91       	ld	r24, X+
 860:	9c 91       	ld	r25, X
 862:	11 97       	sbiw	r26, 0x01	; 1
 864:	9d 01       	movw	r18, r26
 866:	2e 5f       	subi	r18, 0xFE	; 254
 868:	3f 4f       	sbci	r19, 0xFF	; 255
 86a:	82 0f       	add	r24, r18
 86c:	93 1f       	adc	r25, r19
 86e:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <__data_end>
 872:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <__data_end+0x1>
 876:	28 17       	cp	r18, r24
 878:	39 07       	cpc	r19, r25
 87a:	69 f4       	brne	.+26     	; 0x896 <free+0x10c>
 87c:	30 97       	sbiw	r30, 0x00	; 0
 87e:	29 f4       	brne	.+10     	; 0x88a <free+0x100>
 880:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <__flp+0x1>
 884:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <__flp>
 888:	02 c0       	rjmp	.+4      	; 0x88e <free+0x104>
 88a:	13 82       	std	Z+3, r1	; 0x03
 88c:	12 82       	std	Z+2, r1	; 0x02
 88e:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <__data_end+0x1>
 892:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <__data_end>
 896:	df 91       	pop	r29
 898:	cf 91       	pop	r28
 89a:	08 95       	ret

0000089c <_exit>:
 89c:	f8 94       	cli

0000089e <__stop_program>:
 89e:	ff cf       	rjmp	.-2      	; 0x89e <__stop_program>
