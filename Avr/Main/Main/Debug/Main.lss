
Main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  00000aa8  00000b3c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000aa8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000e  00800106  00800106  00000b42  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b42  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000b74  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000110  00000000  00000000  00000bb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001322  00000000  00000000  00000cc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a1f  00000000  00000000  00001fe6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000096b  00000000  00000000  00002a05  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000304  00000000  00000000  00003370  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000592  00000000  00000000  00003674  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000d43  00000000  00000000  00003c06  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000128  00000000  00000000  00004949  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 5e 02 	jmp	0x4bc	; 0x4bc <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a6 e0       	ldi	r26, 0x06	; 6
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a4 31       	cpi	r26, 0x14	; 20
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>

00000084 <__do_copy_data>:
  84:	11 e0       	ldi	r17, 0x01	; 1
  86:	a0 e0       	ldi	r26, 0x00	; 0
  88:	b1 e0       	ldi	r27, 0x01	; 1
  8a:	e8 ea       	ldi	r30, 0xA8	; 168
  8c:	fa e0       	ldi	r31, 0x0A	; 10
  8e:	02 c0       	rjmp	.+4      	; 0x94 <__do_copy_data+0x10>
  90:	05 90       	lpm	r0, Z+
  92:	0d 92       	st	X+, r0
  94:	a6 30       	cpi	r26, 0x06	; 6
  96:	b1 07       	cpc	r27, r17
  98:	d9 f7       	brne	.-10     	; 0x90 <__do_copy_data+0xc>
  9a:	0e 94 98 01 	call	0x330	; 0x330 <main>
  9e:	0c 94 52 05 	jmp	0xaa4	; 0xaa4 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <i2c_init>:
	data[(length-1)] = i2c_read_nack();
	
	i2c_stop();
	
	return 0;
}
  a6:	8c e0       	ldi	r24, 0x0C	; 12
  a8:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
  ac:	08 95       	ret

000000ae <i2c_start>:
  ae:	ec eb       	ldi	r30, 0xBC	; 188
  b0:	f0 e0       	ldi	r31, 0x00	; 0
  b2:	10 82       	st	Z, r1
  b4:	94 ea       	ldi	r25, 0xA4	; 164
  b6:	90 83       	st	Z, r25
  b8:	90 81       	ld	r25, Z
  ba:	99 23       	and	r25, r25
  bc:	ec f7       	brge	.-6      	; 0xb8 <i2c_start+0xa>
  be:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
  c2:	98 7f       	andi	r25, 0xF8	; 248
  c4:	98 30       	cpi	r25, 0x08	; 8
  c6:	a1 f4       	brne	.+40     	; 0xf0 <i2c_start+0x42>
  c8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
  cc:	84 e8       	ldi	r24, 0x84	; 132
  ce:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
  d2:	ec eb       	ldi	r30, 0xBC	; 188
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	80 81       	ld	r24, Z
  d8:	88 23       	and	r24, r24
  da:	ec f7       	brge	.-6      	; 0xd6 <i2c_start+0x28>
  dc:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
  e0:	98 7f       	andi	r25, 0xF8	; 248
  e2:	98 31       	cpi	r25, 0x18	; 24
  e4:	39 f0       	breq	.+14     	; 0xf4 <i2c_start+0x46>
  e6:	81 e0       	ldi	r24, 0x01	; 1
  e8:	90 34       	cpi	r25, 0x40	; 64
  ea:	29 f4       	brne	.+10     	; 0xf6 <i2c_start+0x48>
  ec:	80 e0       	ldi	r24, 0x00	; 0
  ee:	08 95       	ret
  f0:	81 e0       	ldi	r24, 0x01	; 1
  f2:	08 95       	ret
  f4:	80 e0       	ldi	r24, 0x00	; 0
  f6:	08 95       	ret

000000f8 <i2c_write>:
  f8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
  fc:	84 e8       	ldi	r24, 0x84	; 132
  fe:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 102:	ec eb       	ldi	r30, 0xBC	; 188
 104:	f0 e0       	ldi	r31, 0x00	; 0
 106:	80 81       	ld	r24, Z
 108:	88 23       	and	r24, r24
 10a:	ec f7       	brge	.-6      	; 0x106 <i2c_write+0xe>
 10c:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 110:	98 7f       	andi	r25, 0xF8	; 248
 112:	81 e0       	ldi	r24, 0x01	; 1
 114:	98 32       	cpi	r25, 0x28	; 40
 116:	09 f4       	brne	.+2      	; 0x11a <i2c_write+0x22>
 118:	80 e0       	ldi	r24, 0x00	; 0
 11a:	08 95       	ret

0000011c <i2c_read_ack>:
 11c:	84 ec       	ldi	r24, 0xC4	; 196
 11e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 122:	ec eb       	ldi	r30, 0xBC	; 188
 124:	f0 e0       	ldi	r31, 0x00	; 0
 126:	80 81       	ld	r24, Z
 128:	88 23       	and	r24, r24
 12a:	ec f7       	brge	.-6      	; 0x126 <i2c_read_ack+0xa>
 12c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 130:	08 95       	ret

00000132 <i2c_read_nack>:
 132:	84 e8       	ldi	r24, 0x84	; 132
 134:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 138:	ec eb       	ldi	r30, 0xBC	; 188
 13a:	f0 e0       	ldi	r31, 0x00	; 0
 13c:	80 81       	ld	r24, Z
 13e:	88 23       	and	r24, r24
 140:	ec f7       	brge	.-6      	; 0x13c <i2c_read_nack+0xa>
 142:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 146:	08 95       	ret

00000148 <i2c_writeReg>:

uint8_t i2c_writeReg(uint8_t devaddr, uint8_t regaddr, uint8_t* data, uint16_t length)
{
 148:	cf 92       	push	r12
 14a:	df 92       	push	r13
 14c:	ff 92       	push	r15
 14e:	0f 93       	push	r16
 150:	1f 93       	push	r17
 152:	cf 93       	push	r28
 154:	df 93       	push	r29
 156:	c6 2f       	mov	r28, r22
 158:	6a 01       	movw	r12, r20
 15a:	89 01       	movw	r16, r18
	if (i2c_start(devaddr | 0x00)) return 1;
 15c:	0e 94 57 00 	call	0xae	; 0xae <i2c_start>
 160:	f8 2e       	mov	r15, r24
 162:	81 11       	cpse	r24, r1
 164:	15 c0       	rjmp	.+42     	; 0x190 <i2c_writeReg+0x48>

	i2c_write(regaddr);
 166:	8c 2f       	mov	r24, r28
 168:	0e 94 7c 00 	call	0xf8	; 0xf8 <i2c_write>

	for (uint16_t i = 0; i < length; i++)
 16c:	01 15       	cp	r16, r1
 16e:	11 05       	cpc	r17, r1
 170:	59 f0       	breq	.+22     	; 0x188 <i2c_writeReg+0x40>
 172:	e6 01       	movw	r28, r12
 174:	0c 0d       	add	r16, r12
 176:	1d 1d       	adc	r17, r13
	{
		if (i2c_write(data[i])) return 1;
 178:	89 91       	ld	r24, Y+
 17a:	0e 94 7c 00 	call	0xf8	; 0xf8 <i2c_write>
 17e:	81 11       	cpse	r24, r1
 180:	0a c0       	rjmp	.+20     	; 0x196 <i2c_writeReg+0x4e>
{
	if (i2c_start(devaddr | 0x00)) return 1;

	i2c_write(regaddr);

	for (uint16_t i = 0; i < length; i++)
 182:	c0 17       	cp	r28, r16
 184:	d1 07       	cpc	r29, r17
 186:	c1 f7       	brne	.-16     	; 0x178 <i2c_writeReg+0x30>
}

void i2c_stop(void)
{
	// transmit STOP condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 188:	84 e9       	ldi	r24, 0x94	; 148
 18a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 18e:	05 c0       	rjmp	.+10     	; 0x19a <i2c_writeReg+0x52>
	return 0;
}

uint8_t i2c_writeReg(uint8_t devaddr, uint8_t regaddr, uint8_t* data, uint16_t length)
{
	if (i2c_start(devaddr | 0x00)) return 1;
 190:	ff 24       	eor	r15, r15
 192:	f3 94       	inc	r15
 194:	02 c0       	rjmp	.+4      	; 0x19a <i2c_writeReg+0x52>

	i2c_write(regaddr);

	for (uint16_t i = 0; i < length; i++)
	{
		if (i2c_write(data[i])) return 1;
 196:	ff 24       	eor	r15, r15
 198:	f3 94       	inc	r15
	}

	i2c_stop();

	return 0;
}
 19a:	8f 2d       	mov	r24, r15
 19c:	df 91       	pop	r29
 19e:	cf 91       	pop	r28
 1a0:	1f 91       	pop	r17
 1a2:	0f 91       	pop	r16
 1a4:	ff 90       	pop	r15
 1a6:	df 90       	pop	r13
 1a8:	cf 90       	pop	r12
 1aa:	08 95       	ret

000001ac <i2c_readReg>:

uint8_t i2c_readReg(uint8_t devaddr, uint8_t regaddr, uint8_t* data, uint16_t length)
{
 1ac:	af 92       	push	r10
 1ae:	bf 92       	push	r11
 1b0:	df 92       	push	r13
 1b2:	ef 92       	push	r14
 1b4:	ff 92       	push	r15
 1b6:	0f 93       	push	r16
 1b8:	1f 93       	push	r17
 1ba:	cf 93       	push	r28
 1bc:	df 93       	push	r29
 1be:	18 2f       	mov	r17, r24
 1c0:	06 2f       	mov	r16, r22
 1c2:	5a 01       	movw	r10, r20
 1c4:	e9 01       	movw	r28, r18
	if (i2c_start(devaddr)) return 1;
 1c6:	0e 94 57 00 	call	0xae	; 0xae <i2c_start>
 1ca:	81 11       	cpse	r24, r1
 1cc:	22 c0       	rjmp	.+68     	; 0x212 <i2c_readReg+0x66>

	i2c_write(regaddr);
 1ce:	80 2f       	mov	r24, r16
 1d0:	0e 94 7c 00 	call	0xf8	; 0xf8 <i2c_write>

	if (i2c_start(devaddr | 0x01)) return 1;
 1d4:	81 2f       	mov	r24, r17
 1d6:	81 60       	ori	r24, 0x01	; 1
 1d8:	0e 94 57 00 	call	0xae	; 0xae <i2c_start>
 1dc:	d8 2e       	mov	r13, r24
 1de:	81 11       	cpse	r24, r1
 1e0:	1b c0       	rjmp	.+54     	; 0x218 <i2c_readReg+0x6c>

	for (uint16_t i = 0; i < (length-1); i++)
 1e2:	8e 01       	movw	r16, r28
 1e4:	01 50       	subi	r16, 0x01	; 1
 1e6:	11 09       	sbc	r17, r1
 1e8:	51 f0       	breq	.+20     	; 0x1fe <i2c_readReg+0x52>
 1ea:	e5 01       	movw	r28, r10
 1ec:	75 01       	movw	r14, r10
 1ee:	e0 0e       	add	r14, r16
 1f0:	f1 1e       	adc	r15, r17
	{
		data[i] = i2c_read_ack();
 1f2:	0e 94 8e 00 	call	0x11c	; 0x11c <i2c_read_ack>
 1f6:	89 93       	st	Y+, r24

	i2c_write(regaddr);

	if (i2c_start(devaddr | 0x01)) return 1;

	for (uint16_t i = 0; i < (length-1); i++)
 1f8:	ec 16       	cp	r14, r28
 1fa:	fd 06       	cpc	r15, r29
 1fc:	d1 f7       	brne	.-12     	; 0x1f2 <i2c_readReg+0x46>
	{
		data[i] = i2c_read_ack();
	}
	data[(length-1)] = i2c_read_nack();
 1fe:	e5 01       	movw	r28, r10
 200:	c0 0f       	add	r28, r16
 202:	d1 1f       	adc	r29, r17
 204:	0e 94 99 00 	call	0x132	; 0x132 <i2c_read_nack>
 208:	88 83       	st	Y, r24
}

void i2c_stop(void)
{
	// transmit STOP condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 20a:	84 e9       	ldi	r24, 0x94	; 148
 20c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 210:	05 c0       	rjmp	.+10     	; 0x21c <i2c_readReg+0x70>
	return 0;
}

uint8_t i2c_readReg(uint8_t devaddr, uint8_t regaddr, uint8_t* data, uint16_t length)
{
	if (i2c_start(devaddr)) return 1;
 212:	dd 24       	eor	r13, r13
 214:	d3 94       	inc	r13
 216:	02 c0       	rjmp	.+4      	; 0x21c <i2c_readReg+0x70>

	i2c_write(regaddr);

	if (i2c_start(devaddr | 0x01)) return 1;
 218:	dd 24       	eor	r13, r13
 21a:	d3 94       	inc	r13
	data[(length-1)] = i2c_read_nack();

	i2c_stop();

	return 0;
}
 21c:	8d 2d       	mov	r24, r13
 21e:	df 91       	pop	r29
 220:	cf 91       	pop	r28
 222:	1f 91       	pop	r17
 224:	0f 91       	pop	r16
 226:	ff 90       	pop	r15
 228:	ef 90       	pop	r14
 22a:	df 90       	pop	r13
 22c:	bf 90       	pop	r11
 22e:	af 90       	pop	r10
 230:	08 95       	ret

00000232 <print>:
print(*dat,id);
free(dat);
	
}
void SPI_sensor()
{
 232:	df 92       	push	r13
 234:	ef 92       	push	r14
 236:	ff 92       	push	r15
 238:	0f 93       	push	r16
 23a:	1f 93       	push	r17
 23c:	cf 93       	push	r28
 23e:	df 93       	push	r29
 240:	d6 2e       	mov	r13, r22
 242:	ca e0       	ldi	r28, 0x0A	; 10
 244:	d0 e0       	ldi	r29, 0x00	; 0
 246:	0f 2e       	mov	r0, r31
 248:	fa e0       	ldi	r31, 0x0A	; 10
 24a:	ef 2e       	mov	r14, r31
 24c:	f1 2c       	mov	r15, r1
 24e:	f0 2d       	mov	r31, r0
 250:	b7 01       	movw	r22, r14
 252:	0e 94 09 04 	call	0x812	; 0x812 <__divmodhi4>
 256:	06 2f       	mov	r16, r22
 258:	17 2f       	mov	r17, r23
 25a:	c0 96       	adiw	r24, 0x30	; 48
 25c:	0e 94 bd 02 	call	0x57a	; 0x57a <serialWrite>
 260:	80 2f       	mov	r24, r16
 262:	91 2f       	mov	r25, r17
 264:	00 97       	sbiw	r24, 0x00	; 0
 266:	11 f0       	breq	.+4      	; 0x26c <print+0x3a>
 268:	21 97       	sbiw	r28, 0x01	; 1
 26a:	91 f7       	brne	.-28     	; 0x250 <print+0x1e>
 26c:	8d 2d       	mov	r24, r13
 26e:	90 e0       	ldi	r25, 0x00	; 0
 270:	0e 94 bd 02 	call	0x57a	; 0x57a <serialWrite>
 274:	df 91       	pop	r29
 276:	cf 91       	pop	r28
 278:	1f 91       	pop	r17
 27a:	0f 91       	pop	r16
 27c:	ff 90       	pop	r15
 27e:	ef 90       	pop	r14
 280:	df 90       	pop	r13
 282:	08 95       	ret

00000284 <adc_init>:
 284:	80 e4       	ldi	r24, 0x40	; 64
 286:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
 28a:	87 e8       	ldi	r24, 0x87	; 135
 28c:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
 290:	08 95       	ret

00000292 <Timer1init>:
 292:	82 e0       	ldi	r24, 0x02	; 2
 294:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 298:	8d e0       	ldi	r24, 0x0D	; 13
 29a:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 29e:	89 e0       	ldi	r24, 0x09	; 9
 2a0:	9d e3       	ldi	r25, 0x3D	; 61
 2a2:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 2a6:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 2aa:	78 94       	sei
 2ac:	08 95       	ret

000002ae <adc_read>:
 2ae:	ec e7       	ldi	r30, 0x7C	; 124
 2b0:	f0 e0       	ldi	r31, 0x00	; 0
 2b2:	90 81       	ld	r25, Z
 2b4:	98 7f       	andi	r25, 0xF8	; 248
 2b6:	87 70       	andi	r24, 0x07	; 7
 2b8:	89 2b       	or	r24, r25
 2ba:	80 83       	st	Z, r24
 2bc:	ea e7       	ldi	r30, 0x7A	; 122
 2be:	f0 e0       	ldi	r31, 0x00	; 0
 2c0:	80 81       	ld	r24, Z
 2c2:	80 64       	ori	r24, 0x40	; 64
 2c4:	80 83       	st	Z, r24
 2c6:	80 81       	ld	r24, Z
 2c8:	86 fd       	sbrc	r24, 6
 2ca:	fd cf       	rjmp	.-6      	; 0x2c6 <adc_read+0x18>
 2cc:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 2d0:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 2d4:	08 95       	ret

000002d6 <session_init>:
 2d6:	0e 94 c5 02 	call	0x58a	; 0x58a <serialRead>
 2da:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <A1>
 2de:	0e 94 c5 02 	call	0x58a	; 0x58a <serialRead>
 2e2:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <A2>
 2e6:	0e 94 c5 02 	call	0x58a	; 0x58a <serialRead>
 2ea:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <A3>
 2ee:	0e 94 c5 02 	call	0x58a	; 0x58a <serialRead>
 2f2:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <A4>
 2f6:	0e 94 c5 02 	call	0x58a	; 0x58a <serialRead>
 2fa:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <A5>
 2fe:	0e 94 c5 02 	call	0x58a	; 0x58a <serialRead>
 302:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <A6>
 306:	0e 94 c5 02 	call	0x58a	; 0x58a <serialRead>
 30a:	88 23       	and	r24, r24
 30c:	31 f0       	breq	.+12     	; 0x31a <session_init+0x44>
 30e:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <I2C1_addr>
 312:	0e 94 c5 02 	call	0x58a	; 0x58a <serialRead>
 316:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end>
 31a:	0e 94 c5 02 	call	0x58a	; 0x58a <serialRead>
 31e:	88 23       	and	r24, r24
 320:	31 f0       	breq	.+12     	; 0x32e <session_init+0x58>
 322:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <I2C2_addr>
 326:	0e 94 c5 02 	call	0x58a	; 0x58a <serialRead>
 32a:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <I2C2_reg>
 32e:	08 95       	ret

00000330 <main>:
 330:	0e 94 42 01 	call	0x284	; 0x284 <adc_init>
 334:	87 e6       	ldi	r24, 0x67	; 103
 336:	90 e0       	ldi	r25, 0x00	; 0
 338:	0e 94 cd 02 	call	0x59a	; 0x59a <serial_init>
 33c:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <session_init>
 340:	0e 94 53 00 	call	0xa6	; 0xa6 <i2c_init>
 344:	81 e0       	ldi	r24, 0x01	; 1
 346:	90 e0       	ldi	r25, 0x00	; 0
 348:	0e 94 31 04 	call	0x862	; 0x862 <malloc>
 34c:	2f ef       	ldi	r18, 0xFF	; 255
 34e:	31 ee       	ldi	r19, 0xE1	; 225
 350:	44 e0       	ldi	r20, 0x04	; 4
 352:	21 50       	subi	r18, 0x01	; 1
 354:	30 40       	sbci	r19, 0x00	; 0
 356:	40 40       	sbci	r20, 0x00	; 0
 358:	e1 f7       	brne	.-8      	; 0x352 <main+0x22>
 35a:	00 c0       	rjmp	.+0      	; 0x35c <main+0x2c>
 35c:	00 00       	nop
 35e:	2f e2       	ldi	r18, 0x2F	; 47
 360:	fc 01       	movw	r30, r24
 362:	20 83       	st	Z, r18
 364:	21 e0       	ldi	r18, 0x01	; 1
 366:	30 e0       	ldi	r19, 0x00	; 0
 368:	ac 01       	movw	r20, r24
 36a:	60 e2       	ldi	r22, 0x20	; 32
 36c:	80 e3       	ldi	r24, 0x30	; 48
 36e:	0e 94 a4 00 	call	0x148	; 0x148 <i2c_writeReg>
 372:	81 e0       	ldi	r24, 0x01	; 1
 374:	84 b9       	out	0x04, r24	; 4
 376:	85 b9       	out	0x05, r24	; 5
 378:	0e 94 49 01 	call	0x292	; 0x292 <Timer1init>
 37c:	ff cf       	rjmp	.-2      	; 0x37c <main+0x4c>

0000037e <Analog_digital_sensor>:
 37e:	cf 93       	push	r28
 380:	c4 2f       	mov	r28, r20
 382:	61 30       	cpi	r22, 0x01	; 1
 384:	71 05       	cpc	r23, r1
 386:	09 f0       	breq	.+2      	; 0x38a <Analog_digital_sensor+0xc>
 388:	5f c0       	rjmp	.+190    	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
 38a:	97 b1       	in	r25, 0x07	; 7
 38c:	e1 e0       	ldi	r30, 0x01	; 1
 38e:	f0 e0       	ldi	r31, 0x00	; 0
 390:	08 2e       	mov	r0, r24
 392:	02 c0       	rjmp	.+4      	; 0x398 <Analog_digital_sensor+0x1a>
 394:	ee 0f       	add	r30, r30
 396:	ff 1f       	adc	r31, r31
 398:	0a 94       	dec	r0
 39a:	e2 f7       	brpl	.-8      	; 0x394 <Analog_digital_sensor+0x16>
 39c:	9e 2b       	or	r25, r30
 39e:	97 b9       	out	0x07, r25	; 7
 3a0:	98 b1       	in	r25, 0x08	; 8
 3a2:	9e 27       	eor	r25, r30
 3a4:	98 b9       	out	0x08, r25	; 8
 3a6:	4a e0       	ldi	r20, 0x0A	; 10
 3a8:	4a 95       	dec	r20
 3aa:	f1 f7       	brne	.-4      	; 0x3a8 <Analog_digital_sensor+0x2a>
 3ac:	00 c0       	rjmp	.+0      	; 0x3ae <Analog_digital_sensor+0x30>
 3ae:	98 b1       	in	r25, 0x08	; 8
 3b0:	9e 2b       	or	r25, r30
 3b2:	98 b9       	out	0x08, r25	; 8
 3b4:	5a e1       	ldi	r21, 0x1A	; 26
 3b6:	5a 95       	dec	r21
 3b8:	f1 f7       	brne	.-4      	; 0x3b6 <Analog_digital_sensor+0x38>
 3ba:	00 c0       	rjmp	.+0      	; 0x3bc <Analog_digital_sensor+0x3e>
 3bc:	98 b1       	in	r25, 0x08	; 8
 3be:	9e 27       	eor	r25, r30
 3c0:	98 b9       	out	0x08, r25	; 8
 3c2:	97 b1       	in	r25, 0x07	; 7
 3c4:	9e 27       	eor	r25, r30
 3c6:	97 b9       	out	0x07, r25	; 7
 3c8:	26 b1       	in	r18, 0x06	; 6
 3ca:	30 e0       	ldi	r19, 0x00	; 0
 3cc:	08 2e       	mov	r0, r24
 3ce:	02 c0       	rjmp	.+4      	; 0x3d4 <Analog_digital_sensor+0x56>
 3d0:	35 95       	asr	r19
 3d2:	27 95       	ror	r18
 3d4:	0a 94       	dec	r0
 3d6:	e2 f7       	brpl	.-8      	; 0x3d0 <Analog_digital_sensor+0x52>
 3d8:	20 fd       	sbrc	r18, 0
 3da:	3f c0       	rjmp	.+126    	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
 3dc:	48 ee       	ldi	r20, 0xE8	; 232
 3de:	53 e0       	ldi	r21, 0x03	; 3
 3e0:	95 e0       	ldi	r25, 0x05	; 5
 3e2:	9a 95       	dec	r25
 3e4:	f1 f7       	brne	.-4      	; 0x3e2 <Analog_digital_sensor+0x64>
 3e6:	00 00       	nop
 3e8:	26 b1       	in	r18, 0x06	; 6
 3ea:	30 e0       	ldi	r19, 0x00	; 0
 3ec:	2e 23       	and	r18, r30
 3ee:	3f 23       	and	r19, r31
 3f0:	23 2b       	or	r18, r19
 3f2:	99 f5       	brne	.+102    	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
 3f4:	41 50       	subi	r20, 0x01	; 1
 3f6:	51 09       	sbc	r21, r1
 3f8:	99 f7       	brne	.-26     	; 0x3e0 <Analog_digital_sensor+0x62>
 3fa:	2f c0       	rjmp	.+94     	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
 3fc:	60 e0       	ldi	r22, 0x00	; 0
 3fe:	70 e0       	ldi	r23, 0x00	; 0
 400:	45 e3       	ldi	r20, 0x35	; 53
 402:	4a 95       	dec	r20
 404:	f1 f7       	brne	.-4      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 406:	00 00       	nop
 408:	6f 5f       	subi	r22, 0xFF	; 255
 40a:	7f 4f       	sbci	r23, 0xFF	; 255
 40c:	86 b1       	in	r24, 0x06	; 6
 40e:	90 e0       	ldi	r25, 0x00	; 0
 410:	8e 23       	and	r24, r30
 412:	9f 23       	and	r25, r31
 414:	89 2b       	or	r24, r25
 416:	21 f0       	breq	.+8      	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
 418:	68 3a       	cpi	r22, 0xA8	; 168
 41a:	51 e6       	ldi	r21, 0x61	; 97
 41c:	75 07       	cpc	r23, r21
 41e:	81 f7       	brne	.-32     	; 0x400 <__LOCK_REGION_LENGTH__>
 420:	07 2e       	mov	r0, r23
 422:	00 0c       	add	r0, r0
 424:	88 0b       	sbc	r24, r24
 426:	99 0b       	sbc	r25, r25
 428:	0e 94 10 03 	call	0x620	; 0x620 <__floatsisf>
 42c:	2e e0       	ldi	r18, 0x0E	; 14
 42e:	3d e2       	ldi	r19, 0x2D	; 45
 430:	42 e3       	ldi	r20, 0x32	; 50
 432:	5e e3       	ldi	r21, 0x3E	; 62
 434:	0e 94 74 03 	call	0x6e8	; 0x6e8 <__mulsf3>
 438:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <__fixsfsi>
 43c:	dc 01       	movw	r26, r24
 43e:	cb 01       	movw	r24, r22
 440:	6c 2f       	mov	r22, r28
 442:	0e 94 19 01 	call	0x232	; 0x232 <print>
 446:	16 c0       	rjmp	.+44     	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
 448:	62 30       	cpi	r22, 0x02	; 2
 44a:	71 05       	cpc	r23, r1
 44c:	99 f4       	brne	.+38     	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
 44e:	0e 94 57 01 	call	0x2ae	; 0x2ae <adc_read>
 452:	6c 2f       	mov	r22, r28
 454:	0e 94 19 01 	call	0x232	; 0x232 <print>
 458:	0d c0       	rjmp	.+26     	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
 45a:	26 b1       	in	r18, 0x06	; 6
 45c:	30 e0       	ldi	r19, 0x00	; 0
 45e:	a9 01       	movw	r20, r18
 460:	02 c0       	rjmp	.+4      	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
 462:	55 95       	asr	r21
 464:	47 95       	ror	r20
 466:	8a 95       	dec	r24
 468:	e2 f7       	brpl	.-8      	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
 46a:	40 fd       	sbrc	r20, 0
 46c:	c7 cf       	rjmp	.-114    	; 0x3fc <Analog_digital_sensor+0x7e>
 46e:	60 e0       	ldi	r22, 0x00	; 0
 470:	70 e0       	ldi	r23, 0x00	; 0
 472:	d6 cf       	rjmp	.-84     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
 474:	cf 91       	pop	r28
 476:	08 95       	ret

00000478 <I2C_sensor>:
 478:	ff 92       	push	r15
 47a:	0f 93       	push	r16
 47c:	1f 93       	push	r17
 47e:	cf 93       	push	r28
 480:	df 93       	push	r29
 482:	08 2f       	mov	r16, r24
 484:	f6 2e       	mov	r15, r22
 486:	14 2f       	mov	r17, r20
 488:	81 e0       	ldi	r24, 0x01	; 1
 48a:	90 e0       	ldi	r25, 0x00	; 0
 48c:	0e 94 31 04 	call	0x862	; 0x862 <malloc>
 490:	ec 01       	movw	r28, r24
 492:	21 e0       	ldi	r18, 0x01	; 1
 494:	30 e0       	ldi	r19, 0x00	; 0
 496:	ac 01       	movw	r20, r24
 498:	6f 2d       	mov	r22, r15
 49a:	80 2f       	mov	r24, r16
 49c:	0e 94 d6 00 	call	0x1ac	; 0x1ac <i2c_readReg>
 4a0:	88 81       	ld	r24, Y
 4a2:	61 2f       	mov	r22, r17
 4a4:	90 e0       	ldi	r25, 0x00	; 0
 4a6:	0e 94 19 01 	call	0x232	; 0x232 <print>
 4aa:	ce 01       	movw	r24, r28
 4ac:	0e 94 c9 04 	call	0x992	; 0x992 <free>
 4b0:	df 91       	pop	r29
 4b2:	cf 91       	pop	r28
 4b4:	1f 91       	pop	r17
 4b6:	0f 91       	pop	r16
 4b8:	ff 90       	pop	r15
 4ba:	08 95       	ret

000004bc <__vector_11>:
}
	


ISR(TIMER1_COMPA_vect)
{
 4bc:	1f 92       	push	r1
 4be:	0f 92       	push	r0
 4c0:	0f b6       	in	r0, 0x3f	; 63
 4c2:	0f 92       	push	r0
 4c4:	11 24       	eor	r1, r1
 4c6:	2f 93       	push	r18
 4c8:	3f 93       	push	r19
 4ca:	4f 93       	push	r20
 4cc:	5f 93       	push	r21
 4ce:	6f 93       	push	r22
 4d0:	7f 93       	push	r23
 4d2:	8f 93       	push	r24
 4d4:	9f 93       	push	r25
 4d6:	af 93       	push	r26
 4d8:	bf 93       	push	r27
 4da:	ef 93       	push	r30
 4dc:	ff 93       	push	r31
		
		Analog_digital_sensor(0,A1,'a');
 4de:	60 91 0e 01 	lds	r22, 0x010E	; 0x80010e <A1>
 4e2:	70 e0       	ldi	r23, 0x00	; 0
 4e4:	41 e6       	ldi	r20, 0x61	; 97
 4e6:	80 e0       	ldi	r24, 0x00	; 0
 4e8:	90 e0       	ldi	r25, 0x00	; 0
 4ea:	0e 94 bf 01 	call	0x37e	; 0x37e <Analog_digital_sensor>
		Analog_digital_sensor(1,A2,'b');
 4ee:	60 91 0c 01 	lds	r22, 0x010C	; 0x80010c <A2>
 4f2:	70 e0       	ldi	r23, 0x00	; 0
 4f4:	42 e6       	ldi	r20, 0x62	; 98
 4f6:	81 e0       	ldi	r24, 0x01	; 1
 4f8:	90 e0       	ldi	r25, 0x00	; 0
 4fa:	0e 94 bf 01 	call	0x37e	; 0x37e <Analog_digital_sensor>
		Analog_digital_sensor(0,A3,'c');
 4fe:	60 91 07 01 	lds	r22, 0x0107	; 0x800107 <A3>
 502:	70 e0       	ldi	r23, 0x00	; 0
 504:	43 e6       	ldi	r20, 0x63	; 99
 506:	80 e0       	ldi	r24, 0x00	; 0
 508:	90 e0       	ldi	r25, 0x00	; 0
 50a:	0e 94 bf 01 	call	0x37e	; 0x37e <Analog_digital_sensor>
		Analog_digital_sensor(1,A4,'d');
 50e:	60 91 0a 01 	lds	r22, 0x010A	; 0x80010a <A4>
 512:	70 e0       	ldi	r23, 0x00	; 0
 514:	44 e6       	ldi	r20, 0x64	; 100
 516:	81 e0       	ldi	r24, 0x01	; 1
 518:	90 e0       	ldi	r25, 0x00	; 0
 51a:	0e 94 bf 01 	call	0x37e	; 0x37e <Analog_digital_sensor>
		Analog_digital_sensor(0,A5,'e');
 51e:	60 91 09 01 	lds	r22, 0x0109	; 0x800109 <A5>
 522:	70 e0       	ldi	r23, 0x00	; 0
 524:	45 e6       	ldi	r20, 0x65	; 101
 526:	80 e0       	ldi	r24, 0x00	; 0
 528:	90 e0       	ldi	r25, 0x00	; 0
 52a:	0e 94 bf 01 	call	0x37e	; 0x37e <Analog_digital_sensor>
		Analog_digital_sensor(1,A6,'f');
 52e:	60 91 0f 01 	lds	r22, 0x010F	; 0x80010f <A6>
 532:	70 e0       	ldi	r23, 0x00	; 0
 534:	46 e6       	ldi	r20, 0x66	; 102
 536:	81 e0       	ldi	r24, 0x01	; 1
 538:	90 e0       	ldi	r25, 0x00	; 0
 53a:	0e 94 bf 01 	call	0x37e	; 0x37e <Analog_digital_sensor>
		I2C_sensor(I2C1_addr,I2C1_reg,'g');
 53e:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <__data_end>
 542:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <I2C1_addr>
 546:	70 e0       	ldi	r23, 0x00	; 0
 548:	47 e6       	ldi	r20, 0x67	; 103
 54a:	90 e0       	ldi	r25, 0x00	; 0
 54c:	0e 94 3c 02 	call	0x478	; 0x478 <I2C_sensor>
		//I2C_sensor(I2C2_addr,I2C2_reg,'h');
		serialWrite('x');
 550:	88 e7       	ldi	r24, 0x78	; 120
 552:	90 e0       	ldi	r25, 0x00	; 0
 554:	0e 94 bd 02 	call	0x57a	; 0x57a <serialWrite>
		
		
		
}
 558:	ff 91       	pop	r31
 55a:	ef 91       	pop	r30
 55c:	bf 91       	pop	r27
 55e:	af 91       	pop	r26
 560:	9f 91       	pop	r25
 562:	8f 91       	pop	r24
 564:	7f 91       	pop	r23
 566:	6f 91       	pop	r22
 568:	5f 91       	pop	r21
 56a:	4f 91       	pop	r20
 56c:	3f 91       	pop	r19
 56e:	2f 91       	pop	r18
 570:	0f 90       	pop	r0
 572:	0f be       	out	0x3f, r0	; 63
 574:	0f 90       	pop	r0
 576:	1f 90       	pop	r1
 578:	18 95       	reti

0000057a <serialWrite>:


unsigned char serialCheckRxComplete(void)
{
	return( UCSR0A & _BV(RXC0)) ;  // _BV(x) macro set bit x in a byte which is equivalent to 1<<x. nonzero if serial data is available to read.
}
 57a:	e0 ec       	ldi	r30, 0xC0	; 192
 57c:	f0 e0       	ldi	r31, 0x00	; 0
 57e:	90 81       	ld	r25, Z
 580:	95 ff       	sbrs	r25, 5
 582:	fd cf       	rjmp	.-6      	; 0x57e <serialWrite+0x4>
 584:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 588:	08 95       	ret

0000058a <serialRead>:


unsigned char serialRead(void)
{
	while( !(UCSR0A & (1 << RXC0)) )
 58a:	e0 ec       	ldi	r30, 0xC0	; 192
 58c:	f0 e0       	ldi	r31, 0x00	; 0
 58e:	80 81       	ld	r24, Z
 590:	88 23       	and	r24, r24
 592:	ec f7       	brge	.-6      	; 0x58e <serialRead+0x4>
	;
	return UDR0;
 594:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
}
 598:	08 95       	ret

0000059a <serial_init>:
void serial_init(unsigned int bittimer)
{
	/* Set the baud rate */
	UBRR0H = (unsigned char) (bittimer >> 8);
 59a:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = (unsigned char) bittimer;
 59e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	/* set the framing to 8N1 (8 data bits + 1 stop bit (default) */
	UCSR0C = (3 << UCSZ00);
 5a2:	86 e0       	ldi	r24, 0x06	; 6
 5a4:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	/* Enable receiver and transmitter */
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);
 5a8:	88 e1       	ldi	r24, 0x18	; 24
 5aa:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 5ae:	08 95       	ret

000005b0 <__fixsfsi>:
 5b0:	0e 94 df 02 	call	0x5be	; 0x5be <__fixunssfsi>
 5b4:	68 94       	set
 5b6:	b1 11       	cpse	r27, r1
 5b8:	0c 94 6e 03 	jmp	0x6dc	; 0x6dc <__fp_szero>
 5bc:	08 95       	ret

000005be <__fixunssfsi>:
 5be:	0e 94 53 03 	call	0x6a6	; 0x6a6 <__fp_splitA>
 5c2:	88 f0       	brcs	.+34     	; 0x5e6 <__fixunssfsi+0x28>
 5c4:	9f 57       	subi	r25, 0x7F	; 127
 5c6:	98 f0       	brcs	.+38     	; 0x5ee <__fixunssfsi+0x30>
 5c8:	b9 2f       	mov	r27, r25
 5ca:	99 27       	eor	r25, r25
 5cc:	b7 51       	subi	r27, 0x17	; 23
 5ce:	b0 f0       	brcs	.+44     	; 0x5fc <__fixunssfsi+0x3e>
 5d0:	e1 f0       	breq	.+56     	; 0x60a <__fixunssfsi+0x4c>
 5d2:	66 0f       	add	r22, r22
 5d4:	77 1f       	adc	r23, r23
 5d6:	88 1f       	adc	r24, r24
 5d8:	99 1f       	adc	r25, r25
 5da:	1a f0       	brmi	.+6      	; 0x5e2 <__fixunssfsi+0x24>
 5dc:	ba 95       	dec	r27
 5de:	c9 f7       	brne	.-14     	; 0x5d2 <__fixunssfsi+0x14>
 5e0:	14 c0       	rjmp	.+40     	; 0x60a <__fixunssfsi+0x4c>
 5e2:	b1 30       	cpi	r27, 0x01	; 1
 5e4:	91 f0       	breq	.+36     	; 0x60a <__fixunssfsi+0x4c>
 5e6:	0e 94 6d 03 	call	0x6da	; 0x6da <__fp_zero>
 5ea:	b1 e0       	ldi	r27, 0x01	; 1
 5ec:	08 95       	ret
 5ee:	0c 94 6d 03 	jmp	0x6da	; 0x6da <__fp_zero>
 5f2:	67 2f       	mov	r22, r23
 5f4:	78 2f       	mov	r23, r24
 5f6:	88 27       	eor	r24, r24
 5f8:	b8 5f       	subi	r27, 0xF8	; 248
 5fa:	39 f0       	breq	.+14     	; 0x60a <__fixunssfsi+0x4c>
 5fc:	b9 3f       	cpi	r27, 0xF9	; 249
 5fe:	cc f3       	brlt	.-14     	; 0x5f2 <__fixunssfsi+0x34>
 600:	86 95       	lsr	r24
 602:	77 95       	ror	r23
 604:	67 95       	ror	r22
 606:	b3 95       	inc	r27
 608:	d9 f7       	brne	.-10     	; 0x600 <__fixunssfsi+0x42>
 60a:	3e f4       	brtc	.+14     	; 0x61a <__fixunssfsi+0x5c>
 60c:	90 95       	com	r25
 60e:	80 95       	com	r24
 610:	70 95       	com	r23
 612:	61 95       	neg	r22
 614:	7f 4f       	sbci	r23, 0xFF	; 255
 616:	8f 4f       	sbci	r24, 0xFF	; 255
 618:	9f 4f       	sbci	r25, 0xFF	; 255
 61a:	08 95       	ret

0000061c <__floatunsisf>:
 61c:	e8 94       	clt
 61e:	09 c0       	rjmp	.+18     	; 0x632 <__floatsisf+0x12>

00000620 <__floatsisf>:
 620:	97 fb       	bst	r25, 7
 622:	3e f4       	brtc	.+14     	; 0x632 <__floatsisf+0x12>
 624:	90 95       	com	r25
 626:	80 95       	com	r24
 628:	70 95       	com	r23
 62a:	61 95       	neg	r22
 62c:	7f 4f       	sbci	r23, 0xFF	; 255
 62e:	8f 4f       	sbci	r24, 0xFF	; 255
 630:	9f 4f       	sbci	r25, 0xFF	; 255
 632:	99 23       	and	r25, r25
 634:	a9 f0       	breq	.+42     	; 0x660 <__floatsisf+0x40>
 636:	f9 2f       	mov	r31, r25
 638:	96 e9       	ldi	r25, 0x96	; 150
 63a:	bb 27       	eor	r27, r27
 63c:	93 95       	inc	r25
 63e:	f6 95       	lsr	r31
 640:	87 95       	ror	r24
 642:	77 95       	ror	r23
 644:	67 95       	ror	r22
 646:	b7 95       	ror	r27
 648:	f1 11       	cpse	r31, r1
 64a:	f8 cf       	rjmp	.-16     	; 0x63c <__floatsisf+0x1c>
 64c:	fa f4       	brpl	.+62     	; 0x68c <__floatsisf+0x6c>
 64e:	bb 0f       	add	r27, r27
 650:	11 f4       	brne	.+4      	; 0x656 <__floatsisf+0x36>
 652:	60 ff       	sbrs	r22, 0
 654:	1b c0       	rjmp	.+54     	; 0x68c <__floatsisf+0x6c>
 656:	6f 5f       	subi	r22, 0xFF	; 255
 658:	7f 4f       	sbci	r23, 0xFF	; 255
 65a:	8f 4f       	sbci	r24, 0xFF	; 255
 65c:	9f 4f       	sbci	r25, 0xFF	; 255
 65e:	16 c0       	rjmp	.+44     	; 0x68c <__floatsisf+0x6c>
 660:	88 23       	and	r24, r24
 662:	11 f0       	breq	.+4      	; 0x668 <__floatsisf+0x48>
 664:	96 e9       	ldi	r25, 0x96	; 150
 666:	11 c0       	rjmp	.+34     	; 0x68a <__floatsisf+0x6a>
 668:	77 23       	and	r23, r23
 66a:	21 f0       	breq	.+8      	; 0x674 <__floatsisf+0x54>
 66c:	9e e8       	ldi	r25, 0x8E	; 142
 66e:	87 2f       	mov	r24, r23
 670:	76 2f       	mov	r23, r22
 672:	05 c0       	rjmp	.+10     	; 0x67e <__floatsisf+0x5e>
 674:	66 23       	and	r22, r22
 676:	71 f0       	breq	.+28     	; 0x694 <__floatsisf+0x74>
 678:	96 e8       	ldi	r25, 0x86	; 134
 67a:	86 2f       	mov	r24, r22
 67c:	70 e0       	ldi	r23, 0x00	; 0
 67e:	60 e0       	ldi	r22, 0x00	; 0
 680:	2a f0       	brmi	.+10     	; 0x68c <__floatsisf+0x6c>
 682:	9a 95       	dec	r25
 684:	66 0f       	add	r22, r22
 686:	77 1f       	adc	r23, r23
 688:	88 1f       	adc	r24, r24
 68a:	da f7       	brpl	.-10     	; 0x682 <__floatsisf+0x62>
 68c:	88 0f       	add	r24, r24
 68e:	96 95       	lsr	r25
 690:	87 95       	ror	r24
 692:	97 f9       	bld	r25, 7
 694:	08 95       	ret

00000696 <__fp_split3>:
 696:	57 fd       	sbrc	r21, 7
 698:	90 58       	subi	r25, 0x80	; 128
 69a:	44 0f       	add	r20, r20
 69c:	55 1f       	adc	r21, r21
 69e:	59 f0       	breq	.+22     	; 0x6b6 <__fp_splitA+0x10>
 6a0:	5f 3f       	cpi	r21, 0xFF	; 255
 6a2:	71 f0       	breq	.+28     	; 0x6c0 <__fp_splitA+0x1a>
 6a4:	47 95       	ror	r20

000006a6 <__fp_splitA>:
 6a6:	88 0f       	add	r24, r24
 6a8:	97 fb       	bst	r25, 7
 6aa:	99 1f       	adc	r25, r25
 6ac:	61 f0       	breq	.+24     	; 0x6c6 <__fp_splitA+0x20>
 6ae:	9f 3f       	cpi	r25, 0xFF	; 255
 6b0:	79 f0       	breq	.+30     	; 0x6d0 <__fp_splitA+0x2a>
 6b2:	87 95       	ror	r24
 6b4:	08 95       	ret
 6b6:	12 16       	cp	r1, r18
 6b8:	13 06       	cpc	r1, r19
 6ba:	14 06       	cpc	r1, r20
 6bc:	55 1f       	adc	r21, r21
 6be:	f2 cf       	rjmp	.-28     	; 0x6a4 <__fp_split3+0xe>
 6c0:	46 95       	lsr	r20
 6c2:	f1 df       	rcall	.-30     	; 0x6a6 <__fp_splitA>
 6c4:	08 c0       	rjmp	.+16     	; 0x6d6 <__fp_splitA+0x30>
 6c6:	16 16       	cp	r1, r22
 6c8:	17 06       	cpc	r1, r23
 6ca:	18 06       	cpc	r1, r24
 6cc:	99 1f       	adc	r25, r25
 6ce:	f1 cf       	rjmp	.-30     	; 0x6b2 <__fp_splitA+0xc>
 6d0:	86 95       	lsr	r24
 6d2:	71 05       	cpc	r23, r1
 6d4:	61 05       	cpc	r22, r1
 6d6:	08 94       	sec
 6d8:	08 95       	ret

000006da <__fp_zero>:
 6da:	e8 94       	clt

000006dc <__fp_szero>:
 6dc:	bb 27       	eor	r27, r27
 6de:	66 27       	eor	r22, r22
 6e0:	77 27       	eor	r23, r23
 6e2:	cb 01       	movw	r24, r22
 6e4:	97 f9       	bld	r25, 7
 6e6:	08 95       	ret

000006e8 <__mulsf3>:
 6e8:	0e 94 87 03 	call	0x70e	; 0x70e <__mulsf3x>
 6ec:	0c 94 f8 03 	jmp	0x7f0	; 0x7f0 <__fp_round>
 6f0:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <__fp_pscA>
 6f4:	38 f0       	brcs	.+14     	; 0x704 <__mulsf3+0x1c>
 6f6:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <__fp_pscB>
 6fa:	20 f0       	brcs	.+8      	; 0x704 <__mulsf3+0x1c>
 6fc:	95 23       	and	r25, r21
 6fe:	11 f0       	breq	.+4      	; 0x704 <__mulsf3+0x1c>
 700:	0c 94 e1 03 	jmp	0x7c2	; 0x7c2 <__fp_inf>
 704:	0c 94 e7 03 	jmp	0x7ce	; 0x7ce <__fp_nan>
 708:	11 24       	eor	r1, r1
 70a:	0c 94 6e 03 	jmp	0x6dc	; 0x6dc <__fp_szero>

0000070e <__mulsf3x>:
 70e:	0e 94 4b 03 	call	0x696	; 0x696 <__fp_split3>
 712:	70 f3       	brcs	.-36     	; 0x6f0 <__mulsf3+0x8>

00000714 <__mulsf3_pse>:
 714:	95 9f       	mul	r25, r21
 716:	c1 f3       	breq	.-16     	; 0x708 <__mulsf3+0x20>
 718:	95 0f       	add	r25, r21
 71a:	50 e0       	ldi	r21, 0x00	; 0
 71c:	55 1f       	adc	r21, r21
 71e:	62 9f       	mul	r22, r18
 720:	f0 01       	movw	r30, r0
 722:	72 9f       	mul	r23, r18
 724:	bb 27       	eor	r27, r27
 726:	f0 0d       	add	r31, r0
 728:	b1 1d       	adc	r27, r1
 72a:	63 9f       	mul	r22, r19
 72c:	aa 27       	eor	r26, r26
 72e:	f0 0d       	add	r31, r0
 730:	b1 1d       	adc	r27, r1
 732:	aa 1f       	adc	r26, r26
 734:	64 9f       	mul	r22, r20
 736:	66 27       	eor	r22, r22
 738:	b0 0d       	add	r27, r0
 73a:	a1 1d       	adc	r26, r1
 73c:	66 1f       	adc	r22, r22
 73e:	82 9f       	mul	r24, r18
 740:	22 27       	eor	r18, r18
 742:	b0 0d       	add	r27, r0
 744:	a1 1d       	adc	r26, r1
 746:	62 1f       	adc	r22, r18
 748:	73 9f       	mul	r23, r19
 74a:	b0 0d       	add	r27, r0
 74c:	a1 1d       	adc	r26, r1
 74e:	62 1f       	adc	r22, r18
 750:	83 9f       	mul	r24, r19
 752:	a0 0d       	add	r26, r0
 754:	61 1d       	adc	r22, r1
 756:	22 1f       	adc	r18, r18
 758:	74 9f       	mul	r23, r20
 75a:	33 27       	eor	r19, r19
 75c:	a0 0d       	add	r26, r0
 75e:	61 1d       	adc	r22, r1
 760:	23 1f       	adc	r18, r19
 762:	84 9f       	mul	r24, r20
 764:	60 0d       	add	r22, r0
 766:	21 1d       	adc	r18, r1
 768:	82 2f       	mov	r24, r18
 76a:	76 2f       	mov	r23, r22
 76c:	6a 2f       	mov	r22, r26
 76e:	11 24       	eor	r1, r1
 770:	9f 57       	subi	r25, 0x7F	; 127
 772:	50 40       	sbci	r21, 0x00	; 0
 774:	9a f0       	brmi	.+38     	; 0x79c <__mulsf3_pse+0x88>
 776:	f1 f0       	breq	.+60     	; 0x7b4 <__mulsf3_pse+0xa0>
 778:	88 23       	and	r24, r24
 77a:	4a f0       	brmi	.+18     	; 0x78e <__mulsf3_pse+0x7a>
 77c:	ee 0f       	add	r30, r30
 77e:	ff 1f       	adc	r31, r31
 780:	bb 1f       	adc	r27, r27
 782:	66 1f       	adc	r22, r22
 784:	77 1f       	adc	r23, r23
 786:	88 1f       	adc	r24, r24
 788:	91 50       	subi	r25, 0x01	; 1
 78a:	50 40       	sbci	r21, 0x00	; 0
 78c:	a9 f7       	brne	.-22     	; 0x778 <__mulsf3_pse+0x64>
 78e:	9e 3f       	cpi	r25, 0xFE	; 254
 790:	51 05       	cpc	r21, r1
 792:	80 f0       	brcs	.+32     	; 0x7b4 <__mulsf3_pse+0xa0>
 794:	0c 94 e1 03 	jmp	0x7c2	; 0x7c2 <__fp_inf>
 798:	0c 94 6e 03 	jmp	0x6dc	; 0x6dc <__fp_szero>
 79c:	5f 3f       	cpi	r21, 0xFF	; 255
 79e:	e4 f3       	brlt	.-8      	; 0x798 <__mulsf3_pse+0x84>
 7a0:	98 3e       	cpi	r25, 0xE8	; 232
 7a2:	d4 f3       	brlt	.-12     	; 0x798 <__mulsf3_pse+0x84>
 7a4:	86 95       	lsr	r24
 7a6:	77 95       	ror	r23
 7a8:	67 95       	ror	r22
 7aa:	b7 95       	ror	r27
 7ac:	f7 95       	ror	r31
 7ae:	e7 95       	ror	r30
 7b0:	9f 5f       	subi	r25, 0xFF	; 255
 7b2:	c1 f7       	brne	.-16     	; 0x7a4 <__mulsf3_pse+0x90>
 7b4:	fe 2b       	or	r31, r30
 7b6:	88 0f       	add	r24, r24
 7b8:	91 1d       	adc	r25, r1
 7ba:	96 95       	lsr	r25
 7bc:	87 95       	ror	r24
 7be:	97 f9       	bld	r25, 7
 7c0:	08 95       	ret

000007c2 <__fp_inf>:
 7c2:	97 f9       	bld	r25, 7
 7c4:	9f 67       	ori	r25, 0x7F	; 127
 7c6:	80 e8       	ldi	r24, 0x80	; 128
 7c8:	70 e0       	ldi	r23, 0x00	; 0
 7ca:	60 e0       	ldi	r22, 0x00	; 0
 7cc:	08 95       	ret

000007ce <__fp_nan>:
 7ce:	9f ef       	ldi	r25, 0xFF	; 255
 7d0:	80 ec       	ldi	r24, 0xC0	; 192
 7d2:	08 95       	ret

000007d4 <__fp_pscA>:
 7d4:	00 24       	eor	r0, r0
 7d6:	0a 94       	dec	r0
 7d8:	16 16       	cp	r1, r22
 7da:	17 06       	cpc	r1, r23
 7dc:	18 06       	cpc	r1, r24
 7de:	09 06       	cpc	r0, r25
 7e0:	08 95       	ret

000007e2 <__fp_pscB>:
 7e2:	00 24       	eor	r0, r0
 7e4:	0a 94       	dec	r0
 7e6:	12 16       	cp	r1, r18
 7e8:	13 06       	cpc	r1, r19
 7ea:	14 06       	cpc	r1, r20
 7ec:	05 06       	cpc	r0, r21
 7ee:	08 95       	ret

000007f0 <__fp_round>:
 7f0:	09 2e       	mov	r0, r25
 7f2:	03 94       	inc	r0
 7f4:	00 0c       	add	r0, r0
 7f6:	11 f4       	brne	.+4      	; 0x7fc <__fp_round+0xc>
 7f8:	88 23       	and	r24, r24
 7fa:	52 f0       	brmi	.+20     	; 0x810 <__fp_round+0x20>
 7fc:	bb 0f       	add	r27, r27
 7fe:	40 f4       	brcc	.+16     	; 0x810 <__fp_round+0x20>
 800:	bf 2b       	or	r27, r31
 802:	11 f4       	brne	.+4      	; 0x808 <__fp_round+0x18>
 804:	60 ff       	sbrs	r22, 0
 806:	04 c0       	rjmp	.+8      	; 0x810 <__fp_round+0x20>
 808:	6f 5f       	subi	r22, 0xFF	; 255
 80a:	7f 4f       	sbci	r23, 0xFF	; 255
 80c:	8f 4f       	sbci	r24, 0xFF	; 255
 80e:	9f 4f       	sbci	r25, 0xFF	; 255
 810:	08 95       	ret

00000812 <__divmodhi4>:
 812:	97 fb       	bst	r25, 7
 814:	07 2e       	mov	r0, r23
 816:	16 f4       	brtc	.+4      	; 0x81c <__divmodhi4+0xa>
 818:	00 94       	com	r0
 81a:	07 d0       	rcall	.+14     	; 0x82a <__divmodhi4_neg1>
 81c:	77 fd       	sbrc	r23, 7
 81e:	09 d0       	rcall	.+18     	; 0x832 <__divmodhi4_neg2>
 820:	0e 94 1d 04 	call	0x83a	; 0x83a <__udivmodhi4>
 824:	07 fc       	sbrc	r0, 7
 826:	05 d0       	rcall	.+10     	; 0x832 <__divmodhi4_neg2>
 828:	3e f4       	brtc	.+14     	; 0x838 <__divmodhi4_exit>

0000082a <__divmodhi4_neg1>:
 82a:	90 95       	com	r25
 82c:	81 95       	neg	r24
 82e:	9f 4f       	sbci	r25, 0xFF	; 255
 830:	08 95       	ret

00000832 <__divmodhi4_neg2>:
 832:	70 95       	com	r23
 834:	61 95       	neg	r22
 836:	7f 4f       	sbci	r23, 0xFF	; 255

00000838 <__divmodhi4_exit>:
 838:	08 95       	ret

0000083a <__udivmodhi4>:
 83a:	aa 1b       	sub	r26, r26
 83c:	bb 1b       	sub	r27, r27
 83e:	51 e1       	ldi	r21, 0x11	; 17
 840:	07 c0       	rjmp	.+14     	; 0x850 <__udivmodhi4_ep>

00000842 <__udivmodhi4_loop>:
 842:	aa 1f       	adc	r26, r26
 844:	bb 1f       	adc	r27, r27
 846:	a6 17       	cp	r26, r22
 848:	b7 07       	cpc	r27, r23
 84a:	10 f0       	brcs	.+4      	; 0x850 <__udivmodhi4_ep>
 84c:	a6 1b       	sub	r26, r22
 84e:	b7 0b       	sbc	r27, r23

00000850 <__udivmodhi4_ep>:
 850:	88 1f       	adc	r24, r24
 852:	99 1f       	adc	r25, r25
 854:	5a 95       	dec	r21
 856:	a9 f7       	brne	.-22     	; 0x842 <__udivmodhi4_loop>
 858:	80 95       	com	r24
 85a:	90 95       	com	r25
 85c:	bc 01       	movw	r22, r24
 85e:	cd 01       	movw	r24, r26
 860:	08 95       	ret

00000862 <malloc>:
 862:	0f 93       	push	r16
 864:	1f 93       	push	r17
 866:	cf 93       	push	r28
 868:	df 93       	push	r29
 86a:	82 30       	cpi	r24, 0x02	; 2
 86c:	91 05       	cpc	r25, r1
 86e:	10 f4       	brcc	.+4      	; 0x874 <malloc+0x12>
 870:	82 e0       	ldi	r24, 0x02	; 2
 872:	90 e0       	ldi	r25, 0x00	; 0
 874:	e0 91 12 01 	lds	r30, 0x0112	; 0x800112 <__flp>
 878:	f0 91 13 01 	lds	r31, 0x0113	; 0x800113 <__flp+0x1>
 87c:	20 e0       	ldi	r18, 0x00	; 0
 87e:	30 e0       	ldi	r19, 0x00	; 0
 880:	a0 e0       	ldi	r26, 0x00	; 0
 882:	b0 e0       	ldi	r27, 0x00	; 0
 884:	30 97       	sbiw	r30, 0x00	; 0
 886:	19 f1       	breq	.+70     	; 0x8ce <malloc+0x6c>
 888:	40 81       	ld	r20, Z
 88a:	51 81       	ldd	r21, Z+1	; 0x01
 88c:	02 81       	ldd	r16, Z+2	; 0x02
 88e:	13 81       	ldd	r17, Z+3	; 0x03
 890:	48 17       	cp	r20, r24
 892:	59 07       	cpc	r21, r25
 894:	c8 f0       	brcs	.+50     	; 0x8c8 <malloc+0x66>
 896:	84 17       	cp	r24, r20
 898:	95 07       	cpc	r25, r21
 89a:	69 f4       	brne	.+26     	; 0x8b6 <malloc+0x54>
 89c:	10 97       	sbiw	r26, 0x00	; 0
 89e:	31 f0       	breq	.+12     	; 0x8ac <malloc+0x4a>
 8a0:	12 96       	adiw	r26, 0x02	; 2
 8a2:	0c 93       	st	X, r16
 8a4:	12 97       	sbiw	r26, 0x02	; 2
 8a6:	13 96       	adiw	r26, 0x03	; 3
 8a8:	1c 93       	st	X, r17
 8aa:	27 c0       	rjmp	.+78     	; 0x8fa <malloc+0x98>
 8ac:	00 93 12 01 	sts	0x0112, r16	; 0x800112 <__flp>
 8b0:	10 93 13 01 	sts	0x0113, r17	; 0x800113 <__flp+0x1>
 8b4:	22 c0       	rjmp	.+68     	; 0x8fa <malloc+0x98>
 8b6:	21 15       	cp	r18, r1
 8b8:	31 05       	cpc	r19, r1
 8ba:	19 f0       	breq	.+6      	; 0x8c2 <malloc+0x60>
 8bc:	42 17       	cp	r20, r18
 8be:	53 07       	cpc	r21, r19
 8c0:	18 f4       	brcc	.+6      	; 0x8c8 <malloc+0x66>
 8c2:	9a 01       	movw	r18, r20
 8c4:	bd 01       	movw	r22, r26
 8c6:	ef 01       	movw	r28, r30
 8c8:	df 01       	movw	r26, r30
 8ca:	f8 01       	movw	r30, r16
 8cc:	db cf       	rjmp	.-74     	; 0x884 <malloc+0x22>
 8ce:	21 15       	cp	r18, r1
 8d0:	31 05       	cpc	r19, r1
 8d2:	f9 f0       	breq	.+62     	; 0x912 <__stack+0x13>
 8d4:	28 1b       	sub	r18, r24
 8d6:	39 0b       	sbc	r19, r25
 8d8:	24 30       	cpi	r18, 0x04	; 4
 8da:	31 05       	cpc	r19, r1
 8dc:	80 f4       	brcc	.+32     	; 0x8fe <malloc+0x9c>
 8de:	8a 81       	ldd	r24, Y+2	; 0x02
 8e0:	9b 81       	ldd	r25, Y+3	; 0x03
 8e2:	61 15       	cp	r22, r1
 8e4:	71 05       	cpc	r23, r1
 8e6:	21 f0       	breq	.+8      	; 0x8f0 <malloc+0x8e>
 8e8:	fb 01       	movw	r30, r22
 8ea:	93 83       	std	Z+3, r25	; 0x03
 8ec:	82 83       	std	Z+2, r24	; 0x02
 8ee:	04 c0       	rjmp	.+8      	; 0x8f8 <malloc+0x96>
 8f0:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <__flp+0x1>
 8f4:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <__flp>
 8f8:	fe 01       	movw	r30, r28
 8fa:	32 96       	adiw	r30, 0x02	; 2
 8fc:	44 c0       	rjmp	.+136    	; 0x986 <__stack+0x87>
 8fe:	fe 01       	movw	r30, r28
 900:	e2 0f       	add	r30, r18
 902:	f3 1f       	adc	r31, r19
 904:	81 93       	st	Z+, r24
 906:	91 93       	st	Z+, r25
 908:	22 50       	subi	r18, 0x02	; 2
 90a:	31 09       	sbc	r19, r1
 90c:	39 83       	std	Y+1, r19	; 0x01
 90e:	28 83       	st	Y, r18
 910:	3a c0       	rjmp	.+116    	; 0x986 <__stack+0x87>
 912:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <__brkval>
 916:	30 91 11 01 	lds	r19, 0x0111	; 0x800111 <__brkval+0x1>
 91a:	23 2b       	or	r18, r19
 91c:	41 f4       	brne	.+16     	; 0x92e <__stack+0x2f>
 91e:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
 922:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
 926:	30 93 11 01 	sts	0x0111, r19	; 0x800111 <__brkval+0x1>
 92a:	20 93 10 01 	sts	0x0110, r18	; 0x800110 <__brkval>
 92e:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 932:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 936:	21 15       	cp	r18, r1
 938:	31 05       	cpc	r19, r1
 93a:	41 f4       	brne	.+16     	; 0x94c <__stack+0x4d>
 93c:	2d b7       	in	r18, 0x3d	; 61
 93e:	3e b7       	in	r19, 0x3e	; 62
 940:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 944:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 948:	24 1b       	sub	r18, r20
 94a:	35 0b       	sbc	r19, r21
 94c:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <__brkval>
 950:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <__brkval+0x1>
 954:	e2 17       	cp	r30, r18
 956:	f3 07       	cpc	r31, r19
 958:	a0 f4       	brcc	.+40     	; 0x982 <__stack+0x83>
 95a:	2e 1b       	sub	r18, r30
 95c:	3f 0b       	sbc	r19, r31
 95e:	28 17       	cp	r18, r24
 960:	39 07       	cpc	r19, r25
 962:	78 f0       	brcs	.+30     	; 0x982 <__stack+0x83>
 964:	ac 01       	movw	r20, r24
 966:	4e 5f       	subi	r20, 0xFE	; 254
 968:	5f 4f       	sbci	r21, 0xFF	; 255
 96a:	24 17       	cp	r18, r20
 96c:	35 07       	cpc	r19, r21
 96e:	48 f0       	brcs	.+18     	; 0x982 <__stack+0x83>
 970:	4e 0f       	add	r20, r30
 972:	5f 1f       	adc	r21, r31
 974:	50 93 11 01 	sts	0x0111, r21	; 0x800111 <__brkval+0x1>
 978:	40 93 10 01 	sts	0x0110, r20	; 0x800110 <__brkval>
 97c:	81 93       	st	Z+, r24
 97e:	91 93       	st	Z+, r25
 980:	02 c0       	rjmp	.+4      	; 0x986 <__stack+0x87>
 982:	e0 e0       	ldi	r30, 0x00	; 0
 984:	f0 e0       	ldi	r31, 0x00	; 0
 986:	cf 01       	movw	r24, r30
 988:	df 91       	pop	r29
 98a:	cf 91       	pop	r28
 98c:	1f 91       	pop	r17
 98e:	0f 91       	pop	r16
 990:	08 95       	ret

00000992 <free>:
 992:	cf 93       	push	r28
 994:	df 93       	push	r29
 996:	00 97       	sbiw	r24, 0x00	; 0
 998:	09 f4       	brne	.+2      	; 0x99c <free+0xa>
 99a:	81 c0       	rjmp	.+258    	; 0xa9e <free+0x10c>
 99c:	fc 01       	movw	r30, r24
 99e:	32 97       	sbiw	r30, 0x02	; 2
 9a0:	13 82       	std	Z+3, r1	; 0x03
 9a2:	12 82       	std	Z+2, r1	; 0x02
 9a4:	a0 91 12 01 	lds	r26, 0x0112	; 0x800112 <__flp>
 9a8:	b0 91 13 01 	lds	r27, 0x0113	; 0x800113 <__flp+0x1>
 9ac:	10 97       	sbiw	r26, 0x00	; 0
 9ae:	81 f4       	brne	.+32     	; 0x9d0 <free+0x3e>
 9b0:	20 81       	ld	r18, Z
 9b2:	31 81       	ldd	r19, Z+1	; 0x01
 9b4:	82 0f       	add	r24, r18
 9b6:	93 1f       	adc	r25, r19
 9b8:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <__brkval>
 9bc:	30 91 11 01 	lds	r19, 0x0111	; 0x800111 <__brkval+0x1>
 9c0:	28 17       	cp	r18, r24
 9c2:	39 07       	cpc	r19, r25
 9c4:	51 f5       	brne	.+84     	; 0xa1a <free+0x88>
 9c6:	f0 93 11 01 	sts	0x0111, r31	; 0x800111 <__brkval+0x1>
 9ca:	e0 93 10 01 	sts	0x0110, r30	; 0x800110 <__brkval>
 9ce:	67 c0       	rjmp	.+206    	; 0xa9e <free+0x10c>
 9d0:	ed 01       	movw	r28, r26
 9d2:	20 e0       	ldi	r18, 0x00	; 0
 9d4:	30 e0       	ldi	r19, 0x00	; 0
 9d6:	ce 17       	cp	r28, r30
 9d8:	df 07       	cpc	r29, r31
 9da:	40 f4       	brcc	.+16     	; 0x9ec <free+0x5a>
 9dc:	4a 81       	ldd	r20, Y+2	; 0x02
 9de:	5b 81       	ldd	r21, Y+3	; 0x03
 9e0:	9e 01       	movw	r18, r28
 9e2:	41 15       	cp	r20, r1
 9e4:	51 05       	cpc	r21, r1
 9e6:	f1 f0       	breq	.+60     	; 0xa24 <free+0x92>
 9e8:	ea 01       	movw	r28, r20
 9ea:	f5 cf       	rjmp	.-22     	; 0x9d6 <free+0x44>
 9ec:	d3 83       	std	Z+3, r29	; 0x03
 9ee:	c2 83       	std	Z+2, r28	; 0x02
 9f0:	40 81       	ld	r20, Z
 9f2:	51 81       	ldd	r21, Z+1	; 0x01
 9f4:	84 0f       	add	r24, r20
 9f6:	95 1f       	adc	r25, r21
 9f8:	c8 17       	cp	r28, r24
 9fa:	d9 07       	cpc	r29, r25
 9fc:	59 f4       	brne	.+22     	; 0xa14 <free+0x82>
 9fe:	88 81       	ld	r24, Y
 a00:	99 81       	ldd	r25, Y+1	; 0x01
 a02:	84 0f       	add	r24, r20
 a04:	95 1f       	adc	r25, r21
 a06:	02 96       	adiw	r24, 0x02	; 2
 a08:	91 83       	std	Z+1, r25	; 0x01
 a0a:	80 83       	st	Z, r24
 a0c:	8a 81       	ldd	r24, Y+2	; 0x02
 a0e:	9b 81       	ldd	r25, Y+3	; 0x03
 a10:	93 83       	std	Z+3, r25	; 0x03
 a12:	82 83       	std	Z+2, r24	; 0x02
 a14:	21 15       	cp	r18, r1
 a16:	31 05       	cpc	r19, r1
 a18:	29 f4       	brne	.+10     	; 0xa24 <free+0x92>
 a1a:	f0 93 13 01 	sts	0x0113, r31	; 0x800113 <__flp+0x1>
 a1e:	e0 93 12 01 	sts	0x0112, r30	; 0x800112 <__flp>
 a22:	3d c0       	rjmp	.+122    	; 0xa9e <free+0x10c>
 a24:	e9 01       	movw	r28, r18
 a26:	fb 83       	std	Y+3, r31	; 0x03
 a28:	ea 83       	std	Y+2, r30	; 0x02
 a2a:	49 91       	ld	r20, Y+
 a2c:	59 91       	ld	r21, Y+
 a2e:	c4 0f       	add	r28, r20
 a30:	d5 1f       	adc	r29, r21
 a32:	ec 17       	cp	r30, r28
 a34:	fd 07       	cpc	r31, r29
 a36:	61 f4       	brne	.+24     	; 0xa50 <free+0xbe>
 a38:	80 81       	ld	r24, Z
 a3a:	91 81       	ldd	r25, Z+1	; 0x01
 a3c:	84 0f       	add	r24, r20
 a3e:	95 1f       	adc	r25, r21
 a40:	02 96       	adiw	r24, 0x02	; 2
 a42:	e9 01       	movw	r28, r18
 a44:	99 83       	std	Y+1, r25	; 0x01
 a46:	88 83       	st	Y, r24
 a48:	82 81       	ldd	r24, Z+2	; 0x02
 a4a:	93 81       	ldd	r25, Z+3	; 0x03
 a4c:	9b 83       	std	Y+3, r25	; 0x03
 a4e:	8a 83       	std	Y+2, r24	; 0x02
 a50:	e0 e0       	ldi	r30, 0x00	; 0
 a52:	f0 e0       	ldi	r31, 0x00	; 0
 a54:	12 96       	adiw	r26, 0x02	; 2
 a56:	8d 91       	ld	r24, X+
 a58:	9c 91       	ld	r25, X
 a5a:	13 97       	sbiw	r26, 0x03	; 3
 a5c:	00 97       	sbiw	r24, 0x00	; 0
 a5e:	19 f0       	breq	.+6      	; 0xa66 <free+0xd4>
 a60:	fd 01       	movw	r30, r26
 a62:	dc 01       	movw	r26, r24
 a64:	f7 cf       	rjmp	.-18     	; 0xa54 <free+0xc2>
 a66:	8d 91       	ld	r24, X+
 a68:	9c 91       	ld	r25, X
 a6a:	11 97       	sbiw	r26, 0x01	; 1
 a6c:	9d 01       	movw	r18, r26
 a6e:	2e 5f       	subi	r18, 0xFE	; 254
 a70:	3f 4f       	sbci	r19, 0xFF	; 255
 a72:	82 0f       	add	r24, r18
 a74:	93 1f       	adc	r25, r19
 a76:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <__brkval>
 a7a:	30 91 11 01 	lds	r19, 0x0111	; 0x800111 <__brkval+0x1>
 a7e:	28 17       	cp	r18, r24
 a80:	39 07       	cpc	r19, r25
 a82:	69 f4       	brne	.+26     	; 0xa9e <free+0x10c>
 a84:	30 97       	sbiw	r30, 0x00	; 0
 a86:	29 f4       	brne	.+10     	; 0xa92 <free+0x100>
 a88:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <__flp+0x1>
 a8c:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <__flp>
 a90:	02 c0       	rjmp	.+4      	; 0xa96 <free+0x104>
 a92:	13 82       	std	Z+3, r1	; 0x03
 a94:	12 82       	std	Z+2, r1	; 0x02
 a96:	b0 93 11 01 	sts	0x0111, r27	; 0x800111 <__brkval+0x1>
 a9a:	a0 93 10 01 	sts	0x0110, r26	; 0x800110 <__brkval>
 a9e:	df 91       	pop	r29
 aa0:	cf 91       	pop	r28
 aa2:	08 95       	ret

00000aa4 <_exit>:
 aa4:	f8 94       	cli

00000aa6 <__stop_program>:
 aa6:	ff cf       	rjmp	.-2      	; 0xaa6 <__stop_program>
