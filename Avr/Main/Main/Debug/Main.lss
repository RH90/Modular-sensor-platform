
Main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  00000b60  00000bf4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b60  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000014  0080010a  0080010a  00000bfe  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000bfe  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000c30  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000118  00000000  00000000  00000c70  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000013b3  00000000  00000000  00000d88  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a37  00000000  00000000  0000213b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009b9  00000000  00000000  00002b72  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000344  00000000  00000000  0000352c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000599  00000000  00000000  00003870  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000e47  00000000  00000000  00003e09  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000130  00000000  00000000  00004c50  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 97 02 	jmp	0x52e	; 0x52e <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e6       	ldi	r30, 0x60	; 96
  7c:	fb e0       	ldi	r31, 0x0B	; 11
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 30       	cpi	r26, 0x0A	; 10
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	aa e0       	ldi	r26, 0x0A	; 10
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ae 31       	cpi	r26, 0x1E	; 30
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <main>
  9e:	0c 94 ae 05 	jmp	0xb5c	; 0xb5c <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <i2c_init>:
	data[(length-1)] = i2c_read_nack();
	
	i2c_stop();
	
	return 0;
}
  a6:	8c e0       	ldi	r24, 0x0C	; 12
  a8:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
  ac:	08 95       	ret

000000ae <i2c_start>:
  ae:	ec eb       	ldi	r30, 0xBC	; 188
  b0:	f0 e0       	ldi	r31, 0x00	; 0
  b2:	10 82       	st	Z, r1
  b4:	94 ea       	ldi	r25, 0xA4	; 164
  b6:	90 83       	st	Z, r25
  b8:	90 81       	ld	r25, Z
  ba:	99 23       	and	r25, r25
  bc:	ec f7       	brge	.-6      	; 0xb8 <i2c_start+0xa>
  be:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
  c2:	98 7f       	andi	r25, 0xF8	; 248
  c4:	98 30       	cpi	r25, 0x08	; 8
  c6:	a1 f4       	brne	.+40     	; 0xf0 <i2c_start+0x42>
  c8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
  cc:	84 e8       	ldi	r24, 0x84	; 132
  ce:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
  d2:	ec eb       	ldi	r30, 0xBC	; 188
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	80 81       	ld	r24, Z
  d8:	88 23       	and	r24, r24
  da:	ec f7       	brge	.-6      	; 0xd6 <i2c_start+0x28>
  dc:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
  e0:	98 7f       	andi	r25, 0xF8	; 248
  e2:	98 31       	cpi	r25, 0x18	; 24
  e4:	39 f0       	breq	.+14     	; 0xf4 <i2c_start+0x46>
  e6:	81 e0       	ldi	r24, 0x01	; 1
  e8:	90 34       	cpi	r25, 0x40	; 64
  ea:	29 f4       	brne	.+10     	; 0xf6 <i2c_start+0x48>
  ec:	80 e0       	ldi	r24, 0x00	; 0
  ee:	08 95       	ret
  f0:	81 e0       	ldi	r24, 0x01	; 1
  f2:	08 95       	ret
  f4:	80 e0       	ldi	r24, 0x00	; 0
  f6:	08 95       	ret

000000f8 <i2c_write>:
  f8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
  fc:	84 e8       	ldi	r24, 0x84	; 132
  fe:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 102:	ec eb       	ldi	r30, 0xBC	; 188
 104:	f0 e0       	ldi	r31, 0x00	; 0
 106:	80 81       	ld	r24, Z
 108:	88 23       	and	r24, r24
 10a:	ec f7       	brge	.-6      	; 0x106 <i2c_write+0xe>
 10c:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 110:	98 7f       	andi	r25, 0xF8	; 248
 112:	81 e0       	ldi	r24, 0x01	; 1
 114:	98 32       	cpi	r25, 0x28	; 40
 116:	09 f4       	brne	.+2      	; 0x11a <i2c_write+0x22>
 118:	80 e0       	ldi	r24, 0x00	; 0
 11a:	08 95       	ret

0000011c <i2c_read_ack>:
 11c:	84 ec       	ldi	r24, 0xC4	; 196
 11e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 122:	ec eb       	ldi	r30, 0xBC	; 188
 124:	f0 e0       	ldi	r31, 0x00	; 0
 126:	80 81       	ld	r24, Z
 128:	88 23       	and	r24, r24
 12a:	ec f7       	brge	.-6      	; 0x126 <i2c_read_ack+0xa>
 12c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 130:	08 95       	ret

00000132 <i2c_read_nack>:
 132:	84 e8       	ldi	r24, 0x84	; 132
 134:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 138:	ec eb       	ldi	r30, 0xBC	; 188
 13a:	f0 e0       	ldi	r31, 0x00	; 0
 13c:	80 81       	ld	r24, Z
 13e:	88 23       	and	r24, r24
 140:	ec f7       	brge	.-6      	; 0x13c <i2c_read_nack+0xa>
 142:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 146:	08 95       	ret

00000148 <i2c_writeReg>:

uint8_t i2c_writeReg(uint8_t devaddr, uint8_t regaddr, uint8_t* data, uint16_t length)
{
 148:	cf 92       	push	r12
 14a:	df 92       	push	r13
 14c:	ff 92       	push	r15
 14e:	0f 93       	push	r16
 150:	1f 93       	push	r17
 152:	cf 93       	push	r28
 154:	df 93       	push	r29
 156:	c6 2f       	mov	r28, r22
 158:	6a 01       	movw	r12, r20
 15a:	89 01       	movw	r16, r18
	if (i2c_start(devaddr | 0x00)) return 1;
 15c:	0e 94 57 00 	call	0xae	; 0xae <i2c_start>
 160:	f8 2e       	mov	r15, r24
 162:	81 11       	cpse	r24, r1
 164:	15 c0       	rjmp	.+42     	; 0x190 <i2c_writeReg+0x48>

	i2c_write(regaddr);
 166:	8c 2f       	mov	r24, r28
 168:	0e 94 7c 00 	call	0xf8	; 0xf8 <i2c_write>

	for (uint16_t i = 0; i < length; i++)
 16c:	01 15       	cp	r16, r1
 16e:	11 05       	cpc	r17, r1
 170:	59 f0       	breq	.+22     	; 0x188 <i2c_writeReg+0x40>
 172:	e6 01       	movw	r28, r12
 174:	0c 0d       	add	r16, r12
 176:	1d 1d       	adc	r17, r13
	{
		if (i2c_write(data[i])) return 1;
 178:	89 91       	ld	r24, Y+
 17a:	0e 94 7c 00 	call	0xf8	; 0xf8 <i2c_write>
 17e:	81 11       	cpse	r24, r1
 180:	0a c0       	rjmp	.+20     	; 0x196 <i2c_writeReg+0x4e>
{
	if (i2c_start(devaddr | 0x00)) return 1;

	i2c_write(regaddr);

	for (uint16_t i = 0; i < length; i++)
 182:	c0 17       	cp	r28, r16
 184:	d1 07       	cpc	r29, r17
 186:	c1 f7       	brne	.-16     	; 0x178 <i2c_writeReg+0x30>
}

void i2c_stop(void)
{
	// transmit STOP condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 188:	84 e9       	ldi	r24, 0x94	; 148
 18a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 18e:	05 c0       	rjmp	.+10     	; 0x19a <i2c_writeReg+0x52>
	return 0;
}

uint8_t i2c_writeReg(uint8_t devaddr, uint8_t regaddr, uint8_t* data, uint16_t length)
{
	if (i2c_start(devaddr | 0x00)) return 1;
 190:	ff 24       	eor	r15, r15
 192:	f3 94       	inc	r15
 194:	02 c0       	rjmp	.+4      	; 0x19a <i2c_writeReg+0x52>

	i2c_write(regaddr);

	for (uint16_t i = 0; i < length; i++)
	{
		if (i2c_write(data[i])) return 1;
 196:	ff 24       	eor	r15, r15
 198:	f3 94       	inc	r15
	}

	i2c_stop();

	return 0;
}
 19a:	8f 2d       	mov	r24, r15
 19c:	df 91       	pop	r29
 19e:	cf 91       	pop	r28
 1a0:	1f 91       	pop	r17
 1a2:	0f 91       	pop	r16
 1a4:	ff 90       	pop	r15
 1a6:	df 90       	pop	r13
 1a8:	cf 90       	pop	r12
 1aa:	08 95       	ret

000001ac <i2c_readReg>:

uint8_t i2c_readReg(uint8_t devaddr, uint8_t regaddr, uint8_t* data, uint16_t length)
{
 1ac:	af 92       	push	r10
 1ae:	bf 92       	push	r11
 1b0:	df 92       	push	r13
 1b2:	ef 92       	push	r14
 1b4:	ff 92       	push	r15
 1b6:	0f 93       	push	r16
 1b8:	1f 93       	push	r17
 1ba:	cf 93       	push	r28
 1bc:	df 93       	push	r29
 1be:	18 2f       	mov	r17, r24
 1c0:	06 2f       	mov	r16, r22
 1c2:	5a 01       	movw	r10, r20
 1c4:	e9 01       	movw	r28, r18
	if (i2c_start(devaddr)) return 1;
 1c6:	0e 94 57 00 	call	0xae	; 0xae <i2c_start>
 1ca:	81 11       	cpse	r24, r1
 1cc:	22 c0       	rjmp	.+68     	; 0x212 <i2c_readReg+0x66>

	i2c_write(regaddr);
 1ce:	80 2f       	mov	r24, r16
 1d0:	0e 94 7c 00 	call	0xf8	; 0xf8 <i2c_write>

	if (i2c_start(devaddr | 0x01)) return 1;
 1d4:	81 2f       	mov	r24, r17
 1d6:	81 60       	ori	r24, 0x01	; 1
 1d8:	0e 94 57 00 	call	0xae	; 0xae <i2c_start>
 1dc:	d8 2e       	mov	r13, r24
 1de:	81 11       	cpse	r24, r1
 1e0:	1b c0       	rjmp	.+54     	; 0x218 <i2c_readReg+0x6c>

	for (uint16_t i = 0; i < (length-1); i++)
 1e2:	8e 01       	movw	r16, r28
 1e4:	01 50       	subi	r16, 0x01	; 1
 1e6:	11 09       	sbc	r17, r1
 1e8:	51 f0       	breq	.+20     	; 0x1fe <i2c_readReg+0x52>
 1ea:	e5 01       	movw	r28, r10
 1ec:	75 01       	movw	r14, r10
 1ee:	e0 0e       	add	r14, r16
 1f0:	f1 1e       	adc	r15, r17
	{
		data[i] = i2c_read_ack();
 1f2:	0e 94 8e 00 	call	0x11c	; 0x11c <i2c_read_ack>
 1f6:	89 93       	st	Y+, r24

	i2c_write(regaddr);

	if (i2c_start(devaddr | 0x01)) return 1;

	for (uint16_t i = 0; i < (length-1); i++)
 1f8:	ec 16       	cp	r14, r28
 1fa:	fd 06       	cpc	r15, r29
 1fc:	d1 f7       	brne	.-12     	; 0x1f2 <i2c_readReg+0x46>
	{
		data[i] = i2c_read_ack();
	}
	data[(length-1)] = i2c_read_nack();
 1fe:	e5 01       	movw	r28, r10
 200:	c0 0f       	add	r28, r16
 202:	d1 1f       	adc	r29, r17
 204:	0e 94 99 00 	call	0x132	; 0x132 <i2c_read_nack>
 208:	88 83       	st	Y, r24
}

void i2c_stop(void)
{
	// transmit STOP condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 20a:	84 e9       	ldi	r24, 0x94	; 148
 20c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 210:	05 c0       	rjmp	.+10     	; 0x21c <i2c_readReg+0x70>
	return 0;
}

uint8_t i2c_readReg(uint8_t devaddr, uint8_t regaddr, uint8_t* data, uint16_t length)
{
	if (i2c_start(devaddr)) return 1;
 212:	dd 24       	eor	r13, r13
 214:	d3 94       	inc	r13
 216:	02 c0       	rjmp	.+4      	; 0x21c <i2c_readReg+0x70>

	i2c_write(regaddr);

	if (i2c_start(devaddr | 0x01)) return 1;
 218:	dd 24       	eor	r13, r13
 21a:	d3 94       	inc	r13
	data[(length-1)] = i2c_read_nack();

	i2c_stop();

	return 0;
}
 21c:	8d 2d       	mov	r24, r13
 21e:	df 91       	pop	r29
 220:	cf 91       	pop	r28
 222:	1f 91       	pop	r17
 224:	0f 91       	pop	r16
 226:	ff 90       	pop	r15
 228:	ef 90       	pop	r14
 22a:	df 90       	pop	r13
 22c:	bf 90       	pop	r11
 22e:	af 90       	pop	r10
 230:	08 95       	ret

00000232 <print>:
	print(*dat,id);
	free(dat);
	
}
void SPI_sensor()
{
 232:	df 92       	push	r13
 234:	ef 92       	push	r14
 236:	ff 92       	push	r15
 238:	0f 93       	push	r16
 23a:	1f 93       	push	r17
 23c:	cf 93       	push	r28
 23e:	df 93       	push	r29
 240:	d6 2e       	mov	r13, r22
 242:	ca e0       	ldi	r28, 0x0A	; 10
 244:	d0 e0       	ldi	r29, 0x00	; 0
 246:	0f 2e       	mov	r0, r31
 248:	fa e0       	ldi	r31, 0x0A	; 10
 24a:	ef 2e       	mov	r14, r31
 24c:	f1 2c       	mov	r15, r1
 24e:	f0 2d       	mov	r31, r0
 250:	b7 01       	movw	r22, r14
 252:	0e 94 65 04 	call	0x8ca	; 0x8ca <__divmodhi4>
 256:	06 2f       	mov	r16, r22
 258:	17 2f       	mov	r17, r23
 25a:	c0 96       	adiw	r24, 0x30	; 48
 25c:	0e 94 19 03 	call	0x632	; 0x632 <serialWrite>
 260:	80 2f       	mov	r24, r16
 262:	91 2f       	mov	r25, r17
 264:	00 97       	sbiw	r24, 0x00	; 0
 266:	11 f0       	breq	.+4      	; 0x26c <print+0x3a>
 268:	21 97       	sbiw	r28, 0x01	; 1
 26a:	91 f7       	brne	.-28     	; 0x250 <print+0x1e>
 26c:	8d 2d       	mov	r24, r13
 26e:	90 e0       	ldi	r25, 0x00	; 0
 270:	0e 94 19 03 	call	0x632	; 0x632 <serialWrite>
 274:	df 91       	pop	r29
 276:	cf 91       	pop	r28
 278:	1f 91       	pop	r17
 27a:	0f 91       	pop	r16
 27c:	ff 90       	pop	r15
 27e:	ef 90       	pop	r14
 280:	df 90       	pop	r13
 282:	08 95       	ret

00000284 <adc_init>:
 284:	80 e4       	ldi	r24, 0x40	; 64
 286:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
 28a:	87 e8       	ldi	r24, 0x87	; 135
 28c:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
 290:	08 95       	ret

00000292 <Timer1init>:
 292:	82 e0       	ldi	r24, 0x02	; 2
 294:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 298:	8c e0       	ldi	r24, 0x0C	; 12
 29a:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 29e:	8a e6       	ldi	r24, 0x6A	; 106
 2a0:	98 e1       	ldi	r25, 0x18	; 24
 2a2:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 2a6:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 2aa:	78 94       	sei
 2ac:	08 95       	ret

000002ae <adc_read>:
 2ae:	ec e7       	ldi	r30, 0x7C	; 124
 2b0:	f0 e0       	ldi	r31, 0x00	; 0
 2b2:	90 81       	ld	r25, Z
 2b4:	98 7f       	andi	r25, 0xF8	; 248
 2b6:	87 70       	andi	r24, 0x07	; 7
 2b8:	89 2b       	or	r24, r25
 2ba:	80 83       	st	Z, r24
 2bc:	ea e7       	ldi	r30, 0x7A	; 122
 2be:	f0 e0       	ldi	r31, 0x00	; 0
 2c0:	80 81       	ld	r24, Z
 2c2:	80 64       	ori	r24, 0x40	; 64
 2c4:	80 83       	st	Z, r24
 2c6:	80 81       	ld	r24, Z
 2c8:	86 fd       	sbrc	r24, 6
 2ca:	fd cf       	rjmp	.-6      	; 0x2c6 <adc_read+0x18>
 2cc:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 2d0:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 2d4:	08 95       	ret

000002d6 <I2CW>:
 2d6:	ff 92       	push	r15
 2d8:	0f 93       	push	r16
 2da:	1f 93       	push	r17
 2dc:	cf 93       	push	r28
 2de:	df 93       	push	r29
 2e0:	18 2f       	mov	r17, r24
 2e2:	06 2f       	mov	r16, r22
 2e4:	f4 2e       	mov	r15, r20
 2e6:	81 e0       	ldi	r24, 0x01	; 1
 2e8:	90 e0       	ldi	r25, 0x00	; 0
 2ea:	0e 94 8d 04 	call	0x91a	; 0x91a <malloc>
 2ee:	ec 01       	movw	r28, r24
 2f0:	f8 82       	st	Y, r15
 2f2:	21 e0       	ldi	r18, 0x01	; 1
 2f4:	30 e0       	ldi	r19, 0x00	; 0
 2f6:	ac 01       	movw	r20, r24
 2f8:	60 2f       	mov	r22, r16
 2fa:	81 2f       	mov	r24, r17
 2fc:	0e 94 a4 00 	call	0x148	; 0x148 <i2c_writeReg>
 300:	ce 01       	movw	r24, r28
 302:	0e 94 25 05 	call	0xa4a	; 0xa4a <free>
 306:	df 91       	pop	r29
 308:	cf 91       	pop	r28
 30a:	1f 91       	pop	r17
 30c:	0f 91       	pop	r16
 30e:	ff 90       	pop	r15
 310:	08 95       	ret

00000312 <session_init>:
 312:	0f 93       	push	r16
 314:	1f 93       	push	r17
 316:	cf 93       	push	r28
 318:	df 93       	push	r29
 31a:	0e 94 21 03 	call	0x642	; 0x642 <serialRead>
 31e:	90 e0       	ldi	r25, 0x00	; 0
 320:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <delay+0x1>
 324:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <delay>
 328:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <delay>
 32c:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <delay+0x1>
 330:	89 2b       	or	r24, r25
 332:	31 f4       	brne	.+12     	; 0x340 <session_init+0x2e>
 334:	8a e0       	ldi	r24, 0x0A	; 10
 336:	90 e0       	ldi	r25, 0x00	; 0
 338:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <delay+0x1>
 33c:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <delay>
 340:	0e 94 21 03 	call	0x642	; 0x642 <serialRead>
 344:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <A1>
 348:	0e 94 21 03 	call	0x642	; 0x642 <serialRead>
 34c:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <A2>
 350:	0e 94 21 03 	call	0x642	; 0x642 <serialRead>
 354:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
 358:	0e 94 21 03 	call	0x642	; 0x642 <serialRead>
 35c:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <A4>
 360:	0e 94 21 03 	call	0x642	; 0x642 <serialRead>
 364:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <A5>
 368:	0e 94 21 03 	call	0x642	; 0x642 <serialRead>
 36c:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <A6>
 370:	c0 e0       	ldi	r28, 0x00	; 0
 372:	d0 e0       	ldi	r29, 0x00	; 0
 374:	0e 94 21 03 	call	0x642	; 0x642 <serialRead>
 378:	88 23       	and	r24, r24
 37a:	21 f1       	breq	.+72     	; 0x3c4 <session_init+0xb2>
 37c:	8e 01       	movw	r16, r28
 37e:	00 0f       	add	r16, r16
 380:	11 1f       	adc	r17, r17
 382:	00 0f       	add	r16, r16
 384:	11 1f       	adc	r17, r17
 386:	04 5f       	subi	r16, 0xF4	; 244
 388:	1e 4f       	sbci	r17, 0xFE	; 254
 38a:	f8 01       	movw	r30, r16
 38c:	80 83       	st	Z, r24
 38e:	0e 94 21 03 	call	0x642	; 0x642 <serialRead>
 392:	f8 01       	movw	r30, r16
 394:	82 83       	std	Z+2, r24	; 0x02
 396:	0e 94 21 03 	call	0x642	; 0x642 <serialRead>
 39a:	f8 01       	movw	r30, r16
 39c:	83 83       	std	Z+3, r24	; 0x03
 39e:	83 81       	ldd	r24, Z+3	; 0x03
 3a0:	88 23       	and	r24, r24
 3a2:	31 f0       	breq	.+12     	; 0x3b0 <session_init+0x9e>
 3a4:	f8 01       	movw	r30, r16
 3a6:	43 81       	ldd	r20, Z+3	; 0x03
 3a8:	62 81       	ldd	r22, Z+2	; 0x02
 3aa:	80 81       	ld	r24, Z
 3ac:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <I2CW>
 3b0:	0e 94 21 03 	call	0x642	; 0x642 <serialRead>
 3b4:	fe 01       	movw	r30, r28
 3b6:	ee 0f       	add	r30, r30
 3b8:	ff 1f       	adc	r31, r31
 3ba:	ee 0f       	add	r30, r30
 3bc:	ff 1f       	adc	r31, r31
 3be:	e4 5f       	subi	r30, 0xF4	; 244
 3c0:	fe 4f       	sbci	r31, 0xFE	; 254
 3c2:	81 83       	std	Z+1, r24	; 0x01
 3c4:	21 96       	adiw	r28, 0x01	; 1
 3c6:	c2 30       	cpi	r28, 0x02	; 2
 3c8:	d1 05       	cpc	r29, r1
 3ca:	a1 f6       	brne	.-88     	; 0x374 <session_init+0x62>
 3cc:	df 91       	pop	r29
 3ce:	cf 91       	pop	r28
 3d0:	1f 91       	pop	r17
 3d2:	0f 91       	pop	r16
 3d4:	08 95       	ret

000003d6 <main>:
 3d6:	0e 94 42 01 	call	0x284	; 0x284 <adc_init>
 3da:	87 e6       	ldi	r24, 0x67	; 103
 3dc:	90 e0       	ldi	r25, 0x00	; 0
 3de:	0e 94 29 03 	call	0x652	; 0x652 <serial_init>
 3e2:	0e 94 53 00 	call	0xa6	; 0xa6 <i2c_init>
 3e6:	0e 94 89 01 	call	0x312	; 0x312 <session_init>
 3ea:	0e 94 49 01 	call	0x292	; 0x292 <Timer1init>
 3ee:	ff cf       	rjmp	.-2      	; 0x3ee <main+0x18>

000003f0 <Analog_digital_sensor>:
 3f0:	cf 93       	push	r28
 3f2:	c4 2f       	mov	r28, r20
 3f4:	61 30       	cpi	r22, 0x01	; 1
 3f6:	71 05       	cpc	r23, r1
 3f8:	09 f0       	breq	.+2      	; 0x3fc <Analog_digital_sensor+0xc>
 3fa:	5f c0       	rjmp	.+190    	; 0x4ba <__LOCK_REGION_LENGTH__+0xba>
 3fc:	97 b1       	in	r25, 0x07	; 7
 3fe:	e1 e0       	ldi	r30, 0x01	; 1
 400:	f0 e0       	ldi	r31, 0x00	; 0
 402:	08 2e       	mov	r0, r24
 404:	02 c0       	rjmp	.+4      	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 406:	ee 0f       	add	r30, r30
 408:	ff 1f       	adc	r31, r31
 40a:	0a 94       	dec	r0
 40c:	e2 f7       	brpl	.-8      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 40e:	9e 2b       	or	r25, r30
 410:	97 b9       	out	0x07, r25	; 7
 412:	98 b1       	in	r25, 0x08	; 8
 414:	9e 27       	eor	r25, r30
 416:	98 b9       	out	0x08, r25	; 8
 418:	4a e0       	ldi	r20, 0x0A	; 10
 41a:	4a 95       	dec	r20
 41c:	f1 f7       	brne	.-4      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
 41e:	00 c0       	rjmp	.+0      	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
 420:	98 b1       	in	r25, 0x08	; 8
 422:	9e 2b       	or	r25, r30
 424:	98 b9       	out	0x08, r25	; 8
 426:	5a e1       	ldi	r21, 0x1A	; 26
 428:	5a 95       	dec	r21
 42a:	f1 f7       	brne	.-4      	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
 42c:	00 c0       	rjmp	.+0      	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
 42e:	98 b1       	in	r25, 0x08	; 8
 430:	9e 27       	eor	r25, r30
 432:	98 b9       	out	0x08, r25	; 8
 434:	97 b1       	in	r25, 0x07	; 7
 436:	9e 27       	eor	r25, r30
 438:	97 b9       	out	0x07, r25	; 7
 43a:	26 b1       	in	r18, 0x06	; 6
 43c:	30 e0       	ldi	r19, 0x00	; 0
 43e:	08 2e       	mov	r0, r24
 440:	02 c0       	rjmp	.+4      	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
 442:	35 95       	asr	r19
 444:	27 95       	ror	r18
 446:	0a 94       	dec	r0
 448:	e2 f7       	brpl	.-8      	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
 44a:	20 fd       	sbrc	r18, 0
 44c:	3f c0       	rjmp	.+126    	; 0x4cc <__LOCK_REGION_LENGTH__+0xcc>
 44e:	48 ee       	ldi	r20, 0xE8	; 232
 450:	53 e0       	ldi	r21, 0x03	; 3
 452:	95 e0       	ldi	r25, 0x05	; 5
 454:	9a 95       	dec	r25
 456:	f1 f7       	brne	.-4      	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
 458:	00 00       	nop
 45a:	26 b1       	in	r18, 0x06	; 6
 45c:	30 e0       	ldi	r19, 0x00	; 0
 45e:	2e 23       	and	r18, r30
 460:	3f 23       	and	r19, r31
 462:	23 2b       	or	r18, r19
 464:	99 f5       	brne	.+102    	; 0x4cc <__LOCK_REGION_LENGTH__+0xcc>
 466:	41 50       	subi	r20, 0x01	; 1
 468:	51 09       	sbc	r21, r1
 46a:	99 f7       	brne	.-26     	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
 46c:	2f c0       	rjmp	.+94     	; 0x4cc <__LOCK_REGION_LENGTH__+0xcc>
 46e:	60 e0       	ldi	r22, 0x00	; 0
 470:	70 e0       	ldi	r23, 0x00	; 0
 472:	45 e3       	ldi	r20, 0x35	; 53
 474:	4a 95       	dec	r20
 476:	f1 f7       	brne	.-4      	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
 478:	00 00       	nop
 47a:	6f 5f       	subi	r22, 0xFF	; 255
 47c:	7f 4f       	sbci	r23, 0xFF	; 255
 47e:	86 b1       	in	r24, 0x06	; 6
 480:	90 e0       	ldi	r25, 0x00	; 0
 482:	8e 23       	and	r24, r30
 484:	9f 23       	and	r25, r31
 486:	89 2b       	or	r24, r25
 488:	21 f0       	breq	.+8      	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
 48a:	68 3a       	cpi	r22, 0xA8	; 168
 48c:	51 e6       	ldi	r21, 0x61	; 97
 48e:	75 07       	cpc	r23, r21
 490:	81 f7       	brne	.-32     	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
 492:	07 2e       	mov	r0, r23
 494:	00 0c       	add	r0, r0
 496:	88 0b       	sbc	r24, r24
 498:	99 0b       	sbc	r25, r25
 49a:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <__floatsisf>
 49e:	2e e0       	ldi	r18, 0x0E	; 14
 4a0:	3d e2       	ldi	r19, 0x2D	; 45
 4a2:	42 e3       	ldi	r20, 0x32	; 50
 4a4:	5e e3       	ldi	r21, 0x3E	; 62
 4a6:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <__mulsf3>
 4aa:	0e 94 34 03 	call	0x668	; 0x668 <__fixsfsi>
 4ae:	dc 01       	movw	r26, r24
 4b0:	cb 01       	movw	r24, r22
 4b2:	6c 2f       	mov	r22, r28
 4b4:	0e 94 19 01 	call	0x232	; 0x232 <print>
 4b8:	16 c0       	rjmp	.+44     	; 0x4e6 <__LOCK_REGION_LENGTH__+0xe6>
 4ba:	62 30       	cpi	r22, 0x02	; 2
 4bc:	71 05       	cpc	r23, r1
 4be:	99 f4       	brne	.+38     	; 0x4e6 <__LOCK_REGION_LENGTH__+0xe6>
 4c0:	0e 94 57 01 	call	0x2ae	; 0x2ae <adc_read>
 4c4:	6c 2f       	mov	r22, r28
 4c6:	0e 94 19 01 	call	0x232	; 0x232 <print>
 4ca:	0d c0       	rjmp	.+26     	; 0x4e6 <__LOCK_REGION_LENGTH__+0xe6>
 4cc:	26 b1       	in	r18, 0x06	; 6
 4ce:	30 e0       	ldi	r19, 0x00	; 0
 4d0:	a9 01       	movw	r20, r18
 4d2:	02 c0       	rjmp	.+4      	; 0x4d8 <__LOCK_REGION_LENGTH__+0xd8>
 4d4:	55 95       	asr	r21
 4d6:	47 95       	ror	r20
 4d8:	8a 95       	dec	r24
 4da:	e2 f7       	brpl	.-8      	; 0x4d4 <__LOCK_REGION_LENGTH__+0xd4>
 4dc:	40 fd       	sbrc	r20, 0
 4de:	c7 cf       	rjmp	.-114    	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
 4e0:	60 e0       	ldi	r22, 0x00	; 0
 4e2:	70 e0       	ldi	r23, 0x00	; 0
 4e4:	d6 cf       	rjmp	.-84     	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
 4e6:	cf 91       	pop	r28
 4e8:	08 95       	ret

000004ea <I2C_sensor>:
 4ea:	ff 92       	push	r15
 4ec:	0f 93       	push	r16
 4ee:	1f 93       	push	r17
 4f0:	cf 93       	push	r28
 4f2:	df 93       	push	r29
 4f4:	08 2f       	mov	r16, r24
 4f6:	f6 2e       	mov	r15, r22
 4f8:	14 2f       	mov	r17, r20
 4fa:	81 e0       	ldi	r24, 0x01	; 1
 4fc:	90 e0       	ldi	r25, 0x00	; 0
 4fe:	0e 94 8d 04 	call	0x91a	; 0x91a <malloc>
 502:	ec 01       	movw	r28, r24
 504:	21 e0       	ldi	r18, 0x01	; 1
 506:	30 e0       	ldi	r19, 0x00	; 0
 508:	ac 01       	movw	r20, r24
 50a:	6f 2d       	mov	r22, r15
 50c:	80 2f       	mov	r24, r16
 50e:	0e 94 d6 00 	call	0x1ac	; 0x1ac <i2c_readReg>
 512:	88 81       	ld	r24, Y
 514:	61 2f       	mov	r22, r17
 516:	90 e0       	ldi	r25, 0x00	; 0
 518:	0e 94 19 01 	call	0x232	; 0x232 <print>
 51c:	ce 01       	movw	r24, r28
 51e:	0e 94 25 05 	call	0xa4a	; 0xa4a <free>
 522:	df 91       	pop	r29
 524:	cf 91       	pop	r28
 526:	1f 91       	pop	r17
 528:	0f 91       	pop	r16
 52a:	ff 90       	pop	r15
 52c:	08 95       	ret

0000052e <__vector_11>:
}



ISR(TIMER1_COMPA_vect)
{
 52e:	1f 92       	push	r1
 530:	0f 92       	push	r0
 532:	0f b6       	in	r0, 0x3f	; 63
 534:	0f 92       	push	r0
 536:	11 24       	eor	r1, r1
 538:	2f 93       	push	r18
 53a:	3f 93       	push	r19
 53c:	4f 93       	push	r20
 53e:	5f 93       	push	r21
 540:	6f 93       	push	r22
 542:	7f 93       	push	r23
 544:	8f 93       	push	r24
 546:	9f 93       	push	r25
 548:	af 93       	push	r26
 54a:	bf 93       	push	r27
 54c:	ef 93       	push	r30
 54e:	ff 93       	push	r31
	if (count_delay>=delay)
 550:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <count_delay>
 554:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <count_delay+0x1>
 558:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <delay>
 55c:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <delay+0x1>
 560:	28 17       	cp	r18, r24
 562:	39 07       	cpc	r19, r25
 564:	08 f4       	brcc	.+2      	; 0x568 <__vector_11+0x3a>
 566:	4b c0       	rjmp	.+150    	; 0x5fe <__vector_11+0xd0>
	{
		count_delay=1;
 568:	81 e0       	ldi	r24, 0x01	; 1
 56a:	90 e0       	ldi	r25, 0x00	; 0
 56c:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <count_delay+0x1>
 570:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <count_delay>
		Analog_digital_sensor(0,A1,'a');
 574:	60 91 18 01 	lds	r22, 0x0118	; 0x800118 <A1>
 578:	70 e0       	ldi	r23, 0x00	; 0
 57a:	41 e6       	ldi	r20, 0x61	; 97
 57c:	80 e0       	ldi	r24, 0x00	; 0
 57e:	90 e0       	ldi	r25, 0x00	; 0
 580:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <Analog_digital_sensor>
		Analog_digital_sensor(1,A2,'b');
 584:	60 91 17 01 	lds	r22, 0x0117	; 0x800117 <A2>
 588:	70 e0       	ldi	r23, 0x00	; 0
 58a:	42 e6       	ldi	r20, 0x62	; 98
 58c:	81 e0       	ldi	r24, 0x01	; 1
 58e:	90 e0       	ldi	r25, 0x00	; 0
 590:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <Analog_digital_sensor>
		Analog_digital_sensor(2,A3,'c');
 594:	60 91 0a 01 	lds	r22, 0x010A	; 0x80010a <__data_end>
 598:	70 e0       	ldi	r23, 0x00	; 0
 59a:	43 e6       	ldi	r20, 0x63	; 99
 59c:	82 e0       	ldi	r24, 0x02	; 2
 59e:	90 e0       	ldi	r25, 0x00	; 0
 5a0:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <Analog_digital_sensor>
		Analog_digital_sensor(3,A4,'d');
 5a4:	60 91 16 01 	lds	r22, 0x0116	; 0x800116 <A4>
 5a8:	70 e0       	ldi	r23, 0x00	; 0
 5aa:	44 e6       	ldi	r20, 0x64	; 100
 5ac:	83 e0       	ldi	r24, 0x03	; 3
 5ae:	90 e0       	ldi	r25, 0x00	; 0
 5b0:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <Analog_digital_sensor>
		//Analog_digital_sensor(4,A5,'e');
		//Analog_digital_sensor(1,A6,'f');
		if(I2C[0].addr)
 5b4:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <I2C>
 5b8:	88 23       	and	r24, r24
 5ba:	49 f0       	breq	.+18     	; 0x5ce <__vector_11+0xa0>
		I2C_sensor(I2C[0].addr,I2C[0].R_reg,'g');
 5bc:	ec e0       	ldi	r30, 0x0C	; 12
 5be:	f1 e0       	ldi	r31, 0x01	; 1
 5c0:	61 81       	ldd	r22, Z+1	; 0x01
 5c2:	80 81       	ld	r24, Z
 5c4:	70 e0       	ldi	r23, 0x00	; 0
 5c6:	47 e6       	ldi	r20, 0x67	; 103
 5c8:	90 e0       	ldi	r25, 0x00	; 0
 5ca:	0e 94 75 02 	call	0x4ea	; 0x4ea <I2C_sensor>
		if(I2C[1].addr)
 5ce:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <I2C+0x4>
 5d2:	88 23       	and	r24, r24
 5d4:	49 f0       	breq	.+18     	; 0x5e8 <__vector_11+0xba>
		I2C_sensor(I2C[1].addr,I2C[1].R_reg,'h');
 5d6:	ec e0       	ldi	r30, 0x0C	; 12
 5d8:	f1 e0       	ldi	r31, 0x01	; 1
 5da:	65 81       	ldd	r22, Z+5	; 0x05
 5dc:	84 81       	ldd	r24, Z+4	; 0x04
 5de:	70 e0       	ldi	r23, 0x00	; 0
 5e0:	48 e6       	ldi	r20, 0x68	; 104
 5e2:	90 e0       	ldi	r25, 0x00	; 0
 5e4:	0e 94 75 02 	call	0x4ea	; 0x4ea <I2C_sensor>
		serialWrite('x');
 5e8:	88 e7       	ldi	r24, 0x78	; 120
 5ea:	90 e0       	ldi	r25, 0x00	; 0
 5ec:	0e 94 19 03 	call	0x632	; 0x632 <serialWrite>
		if(serialRead()){
 5f0:	0e 94 21 03 	call	0x642	; 0x642 <serialRead>
 5f4:	88 23       	and	r24, r24
 5f6:	61 f0       	breq	.+24     	; 0x610 <__vector_11+0xe2>
			session_init();
 5f8:	0e 94 89 01 	call	0x312	; 0x312 <session_init>
 5fc:	09 c0       	rjmp	.+18     	; 0x610 <__vector_11+0xe2>
		}
	} 
	else
	{
		count_delay++;
 5fe:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <count_delay>
 602:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <count_delay+0x1>
 606:	01 96       	adiw	r24, 0x01	; 1
 608:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <count_delay+0x1>
 60c:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <count_delay>
	}
	
	
}
 610:	ff 91       	pop	r31
 612:	ef 91       	pop	r30
 614:	bf 91       	pop	r27
 616:	af 91       	pop	r26
 618:	9f 91       	pop	r25
 61a:	8f 91       	pop	r24
 61c:	7f 91       	pop	r23
 61e:	6f 91       	pop	r22
 620:	5f 91       	pop	r21
 622:	4f 91       	pop	r20
 624:	3f 91       	pop	r19
 626:	2f 91       	pop	r18
 628:	0f 90       	pop	r0
 62a:	0f be       	out	0x3f, r0	; 63
 62c:	0f 90       	pop	r0
 62e:	1f 90       	pop	r1
 630:	18 95       	reti

00000632 <serialWrite>:


unsigned char serialCheckRxComplete(void)
{
	return( UCSR0A & _BV(RXC0)) ;  // _BV(x) macro set bit x in a byte which is equivalent to 1<<x. nonzero if serial data is available to read.
}
 632:	e0 ec       	ldi	r30, 0xC0	; 192
 634:	f0 e0       	ldi	r31, 0x00	; 0
 636:	90 81       	ld	r25, Z
 638:	95 ff       	sbrs	r25, 5
 63a:	fd cf       	rjmp	.-6      	; 0x636 <serialWrite+0x4>
 63c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 640:	08 95       	ret

00000642 <serialRead>:


unsigned char serialRead(void)
{
	while( !(UCSR0A & (1 << RXC0)) )
 642:	e0 ec       	ldi	r30, 0xC0	; 192
 644:	f0 e0       	ldi	r31, 0x00	; 0
 646:	80 81       	ld	r24, Z
 648:	88 23       	and	r24, r24
 64a:	ec f7       	brge	.-6      	; 0x646 <serialRead+0x4>
	;
	return UDR0;
 64c:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
}
 650:	08 95       	ret

00000652 <serial_init>:
void serial_init(unsigned int bittimer)
{
	/* Set the baud rate */
	UBRR0H = (unsigned char) (bittimer >> 8);
 652:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = (unsigned char) bittimer;
 656:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	/* set the framing to 8N1 (8 data bits + 1 stop bit (default) */
	UCSR0C = (3 << UCSZ00);
 65a:	86 e0       	ldi	r24, 0x06	; 6
 65c:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	/* Enable receiver and transmitter */
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);
 660:	88 e1       	ldi	r24, 0x18	; 24
 662:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 666:	08 95       	ret

00000668 <__fixsfsi>:
 668:	0e 94 3b 03 	call	0x676	; 0x676 <__fixunssfsi>
 66c:	68 94       	set
 66e:	b1 11       	cpse	r27, r1
 670:	0c 94 ca 03 	jmp	0x794	; 0x794 <__fp_szero>
 674:	08 95       	ret

00000676 <__fixunssfsi>:
 676:	0e 94 af 03 	call	0x75e	; 0x75e <__fp_splitA>
 67a:	88 f0       	brcs	.+34     	; 0x69e <__fixunssfsi+0x28>
 67c:	9f 57       	subi	r25, 0x7F	; 127
 67e:	98 f0       	brcs	.+38     	; 0x6a6 <__fixunssfsi+0x30>
 680:	b9 2f       	mov	r27, r25
 682:	99 27       	eor	r25, r25
 684:	b7 51       	subi	r27, 0x17	; 23
 686:	b0 f0       	brcs	.+44     	; 0x6b4 <__fixunssfsi+0x3e>
 688:	e1 f0       	breq	.+56     	; 0x6c2 <__fixunssfsi+0x4c>
 68a:	66 0f       	add	r22, r22
 68c:	77 1f       	adc	r23, r23
 68e:	88 1f       	adc	r24, r24
 690:	99 1f       	adc	r25, r25
 692:	1a f0       	brmi	.+6      	; 0x69a <__fixunssfsi+0x24>
 694:	ba 95       	dec	r27
 696:	c9 f7       	brne	.-14     	; 0x68a <__fixunssfsi+0x14>
 698:	14 c0       	rjmp	.+40     	; 0x6c2 <__fixunssfsi+0x4c>
 69a:	b1 30       	cpi	r27, 0x01	; 1
 69c:	91 f0       	breq	.+36     	; 0x6c2 <__fixunssfsi+0x4c>
 69e:	0e 94 c9 03 	call	0x792	; 0x792 <__fp_zero>
 6a2:	b1 e0       	ldi	r27, 0x01	; 1
 6a4:	08 95       	ret
 6a6:	0c 94 c9 03 	jmp	0x792	; 0x792 <__fp_zero>
 6aa:	67 2f       	mov	r22, r23
 6ac:	78 2f       	mov	r23, r24
 6ae:	88 27       	eor	r24, r24
 6b0:	b8 5f       	subi	r27, 0xF8	; 248
 6b2:	39 f0       	breq	.+14     	; 0x6c2 <__fixunssfsi+0x4c>
 6b4:	b9 3f       	cpi	r27, 0xF9	; 249
 6b6:	cc f3       	brlt	.-14     	; 0x6aa <__fixunssfsi+0x34>
 6b8:	86 95       	lsr	r24
 6ba:	77 95       	ror	r23
 6bc:	67 95       	ror	r22
 6be:	b3 95       	inc	r27
 6c0:	d9 f7       	brne	.-10     	; 0x6b8 <__fixunssfsi+0x42>
 6c2:	3e f4       	brtc	.+14     	; 0x6d2 <__fixunssfsi+0x5c>
 6c4:	90 95       	com	r25
 6c6:	80 95       	com	r24
 6c8:	70 95       	com	r23
 6ca:	61 95       	neg	r22
 6cc:	7f 4f       	sbci	r23, 0xFF	; 255
 6ce:	8f 4f       	sbci	r24, 0xFF	; 255
 6d0:	9f 4f       	sbci	r25, 0xFF	; 255
 6d2:	08 95       	ret

000006d4 <__floatunsisf>:
 6d4:	e8 94       	clt
 6d6:	09 c0       	rjmp	.+18     	; 0x6ea <__floatsisf+0x12>

000006d8 <__floatsisf>:
 6d8:	97 fb       	bst	r25, 7
 6da:	3e f4       	brtc	.+14     	; 0x6ea <__floatsisf+0x12>
 6dc:	90 95       	com	r25
 6de:	80 95       	com	r24
 6e0:	70 95       	com	r23
 6e2:	61 95       	neg	r22
 6e4:	7f 4f       	sbci	r23, 0xFF	; 255
 6e6:	8f 4f       	sbci	r24, 0xFF	; 255
 6e8:	9f 4f       	sbci	r25, 0xFF	; 255
 6ea:	99 23       	and	r25, r25
 6ec:	a9 f0       	breq	.+42     	; 0x718 <__floatsisf+0x40>
 6ee:	f9 2f       	mov	r31, r25
 6f0:	96 e9       	ldi	r25, 0x96	; 150
 6f2:	bb 27       	eor	r27, r27
 6f4:	93 95       	inc	r25
 6f6:	f6 95       	lsr	r31
 6f8:	87 95       	ror	r24
 6fa:	77 95       	ror	r23
 6fc:	67 95       	ror	r22
 6fe:	b7 95       	ror	r27
 700:	f1 11       	cpse	r31, r1
 702:	f8 cf       	rjmp	.-16     	; 0x6f4 <__floatsisf+0x1c>
 704:	fa f4       	brpl	.+62     	; 0x744 <__floatsisf+0x6c>
 706:	bb 0f       	add	r27, r27
 708:	11 f4       	brne	.+4      	; 0x70e <__floatsisf+0x36>
 70a:	60 ff       	sbrs	r22, 0
 70c:	1b c0       	rjmp	.+54     	; 0x744 <__floatsisf+0x6c>
 70e:	6f 5f       	subi	r22, 0xFF	; 255
 710:	7f 4f       	sbci	r23, 0xFF	; 255
 712:	8f 4f       	sbci	r24, 0xFF	; 255
 714:	9f 4f       	sbci	r25, 0xFF	; 255
 716:	16 c0       	rjmp	.+44     	; 0x744 <__floatsisf+0x6c>
 718:	88 23       	and	r24, r24
 71a:	11 f0       	breq	.+4      	; 0x720 <__floatsisf+0x48>
 71c:	96 e9       	ldi	r25, 0x96	; 150
 71e:	11 c0       	rjmp	.+34     	; 0x742 <__floatsisf+0x6a>
 720:	77 23       	and	r23, r23
 722:	21 f0       	breq	.+8      	; 0x72c <__floatsisf+0x54>
 724:	9e e8       	ldi	r25, 0x8E	; 142
 726:	87 2f       	mov	r24, r23
 728:	76 2f       	mov	r23, r22
 72a:	05 c0       	rjmp	.+10     	; 0x736 <__floatsisf+0x5e>
 72c:	66 23       	and	r22, r22
 72e:	71 f0       	breq	.+28     	; 0x74c <__floatsisf+0x74>
 730:	96 e8       	ldi	r25, 0x86	; 134
 732:	86 2f       	mov	r24, r22
 734:	70 e0       	ldi	r23, 0x00	; 0
 736:	60 e0       	ldi	r22, 0x00	; 0
 738:	2a f0       	brmi	.+10     	; 0x744 <__floatsisf+0x6c>
 73a:	9a 95       	dec	r25
 73c:	66 0f       	add	r22, r22
 73e:	77 1f       	adc	r23, r23
 740:	88 1f       	adc	r24, r24
 742:	da f7       	brpl	.-10     	; 0x73a <__floatsisf+0x62>
 744:	88 0f       	add	r24, r24
 746:	96 95       	lsr	r25
 748:	87 95       	ror	r24
 74a:	97 f9       	bld	r25, 7
 74c:	08 95       	ret

0000074e <__fp_split3>:
 74e:	57 fd       	sbrc	r21, 7
 750:	90 58       	subi	r25, 0x80	; 128
 752:	44 0f       	add	r20, r20
 754:	55 1f       	adc	r21, r21
 756:	59 f0       	breq	.+22     	; 0x76e <__fp_splitA+0x10>
 758:	5f 3f       	cpi	r21, 0xFF	; 255
 75a:	71 f0       	breq	.+28     	; 0x778 <__fp_splitA+0x1a>
 75c:	47 95       	ror	r20

0000075e <__fp_splitA>:
 75e:	88 0f       	add	r24, r24
 760:	97 fb       	bst	r25, 7
 762:	99 1f       	adc	r25, r25
 764:	61 f0       	breq	.+24     	; 0x77e <__fp_splitA+0x20>
 766:	9f 3f       	cpi	r25, 0xFF	; 255
 768:	79 f0       	breq	.+30     	; 0x788 <__fp_splitA+0x2a>
 76a:	87 95       	ror	r24
 76c:	08 95       	ret
 76e:	12 16       	cp	r1, r18
 770:	13 06       	cpc	r1, r19
 772:	14 06       	cpc	r1, r20
 774:	55 1f       	adc	r21, r21
 776:	f2 cf       	rjmp	.-28     	; 0x75c <__fp_split3+0xe>
 778:	46 95       	lsr	r20
 77a:	f1 df       	rcall	.-30     	; 0x75e <__fp_splitA>
 77c:	08 c0       	rjmp	.+16     	; 0x78e <__fp_splitA+0x30>
 77e:	16 16       	cp	r1, r22
 780:	17 06       	cpc	r1, r23
 782:	18 06       	cpc	r1, r24
 784:	99 1f       	adc	r25, r25
 786:	f1 cf       	rjmp	.-30     	; 0x76a <__fp_splitA+0xc>
 788:	86 95       	lsr	r24
 78a:	71 05       	cpc	r23, r1
 78c:	61 05       	cpc	r22, r1
 78e:	08 94       	sec
 790:	08 95       	ret

00000792 <__fp_zero>:
 792:	e8 94       	clt

00000794 <__fp_szero>:
 794:	bb 27       	eor	r27, r27
 796:	66 27       	eor	r22, r22
 798:	77 27       	eor	r23, r23
 79a:	cb 01       	movw	r24, r22
 79c:	97 f9       	bld	r25, 7
 79e:	08 95       	ret

000007a0 <__mulsf3>:
 7a0:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <__mulsf3x>
 7a4:	0c 94 54 04 	jmp	0x8a8	; 0x8a8 <__fp_round>
 7a8:	0e 94 46 04 	call	0x88c	; 0x88c <__fp_pscA>
 7ac:	38 f0       	brcs	.+14     	; 0x7bc <__mulsf3+0x1c>
 7ae:	0e 94 4d 04 	call	0x89a	; 0x89a <__fp_pscB>
 7b2:	20 f0       	brcs	.+8      	; 0x7bc <__mulsf3+0x1c>
 7b4:	95 23       	and	r25, r21
 7b6:	11 f0       	breq	.+4      	; 0x7bc <__mulsf3+0x1c>
 7b8:	0c 94 3d 04 	jmp	0x87a	; 0x87a <__fp_inf>
 7bc:	0c 94 43 04 	jmp	0x886	; 0x886 <__fp_nan>
 7c0:	11 24       	eor	r1, r1
 7c2:	0c 94 ca 03 	jmp	0x794	; 0x794 <__fp_szero>

000007c6 <__mulsf3x>:
 7c6:	0e 94 a7 03 	call	0x74e	; 0x74e <__fp_split3>
 7ca:	70 f3       	brcs	.-36     	; 0x7a8 <__mulsf3+0x8>

000007cc <__mulsf3_pse>:
 7cc:	95 9f       	mul	r25, r21
 7ce:	c1 f3       	breq	.-16     	; 0x7c0 <__mulsf3+0x20>
 7d0:	95 0f       	add	r25, r21
 7d2:	50 e0       	ldi	r21, 0x00	; 0
 7d4:	55 1f       	adc	r21, r21
 7d6:	62 9f       	mul	r22, r18
 7d8:	f0 01       	movw	r30, r0
 7da:	72 9f       	mul	r23, r18
 7dc:	bb 27       	eor	r27, r27
 7de:	f0 0d       	add	r31, r0
 7e0:	b1 1d       	adc	r27, r1
 7e2:	63 9f       	mul	r22, r19
 7e4:	aa 27       	eor	r26, r26
 7e6:	f0 0d       	add	r31, r0
 7e8:	b1 1d       	adc	r27, r1
 7ea:	aa 1f       	adc	r26, r26
 7ec:	64 9f       	mul	r22, r20
 7ee:	66 27       	eor	r22, r22
 7f0:	b0 0d       	add	r27, r0
 7f2:	a1 1d       	adc	r26, r1
 7f4:	66 1f       	adc	r22, r22
 7f6:	82 9f       	mul	r24, r18
 7f8:	22 27       	eor	r18, r18
 7fa:	b0 0d       	add	r27, r0
 7fc:	a1 1d       	adc	r26, r1
 7fe:	62 1f       	adc	r22, r18
 800:	73 9f       	mul	r23, r19
 802:	b0 0d       	add	r27, r0
 804:	a1 1d       	adc	r26, r1
 806:	62 1f       	adc	r22, r18
 808:	83 9f       	mul	r24, r19
 80a:	a0 0d       	add	r26, r0
 80c:	61 1d       	adc	r22, r1
 80e:	22 1f       	adc	r18, r18
 810:	74 9f       	mul	r23, r20
 812:	33 27       	eor	r19, r19
 814:	a0 0d       	add	r26, r0
 816:	61 1d       	adc	r22, r1
 818:	23 1f       	adc	r18, r19
 81a:	84 9f       	mul	r24, r20
 81c:	60 0d       	add	r22, r0
 81e:	21 1d       	adc	r18, r1
 820:	82 2f       	mov	r24, r18
 822:	76 2f       	mov	r23, r22
 824:	6a 2f       	mov	r22, r26
 826:	11 24       	eor	r1, r1
 828:	9f 57       	subi	r25, 0x7F	; 127
 82a:	50 40       	sbci	r21, 0x00	; 0
 82c:	9a f0       	brmi	.+38     	; 0x854 <__mulsf3_pse+0x88>
 82e:	f1 f0       	breq	.+60     	; 0x86c <__mulsf3_pse+0xa0>
 830:	88 23       	and	r24, r24
 832:	4a f0       	brmi	.+18     	; 0x846 <__mulsf3_pse+0x7a>
 834:	ee 0f       	add	r30, r30
 836:	ff 1f       	adc	r31, r31
 838:	bb 1f       	adc	r27, r27
 83a:	66 1f       	adc	r22, r22
 83c:	77 1f       	adc	r23, r23
 83e:	88 1f       	adc	r24, r24
 840:	91 50       	subi	r25, 0x01	; 1
 842:	50 40       	sbci	r21, 0x00	; 0
 844:	a9 f7       	brne	.-22     	; 0x830 <__mulsf3_pse+0x64>
 846:	9e 3f       	cpi	r25, 0xFE	; 254
 848:	51 05       	cpc	r21, r1
 84a:	80 f0       	brcs	.+32     	; 0x86c <__mulsf3_pse+0xa0>
 84c:	0c 94 3d 04 	jmp	0x87a	; 0x87a <__fp_inf>
 850:	0c 94 ca 03 	jmp	0x794	; 0x794 <__fp_szero>
 854:	5f 3f       	cpi	r21, 0xFF	; 255
 856:	e4 f3       	brlt	.-8      	; 0x850 <__mulsf3_pse+0x84>
 858:	98 3e       	cpi	r25, 0xE8	; 232
 85a:	d4 f3       	brlt	.-12     	; 0x850 <__mulsf3_pse+0x84>
 85c:	86 95       	lsr	r24
 85e:	77 95       	ror	r23
 860:	67 95       	ror	r22
 862:	b7 95       	ror	r27
 864:	f7 95       	ror	r31
 866:	e7 95       	ror	r30
 868:	9f 5f       	subi	r25, 0xFF	; 255
 86a:	c1 f7       	brne	.-16     	; 0x85c <__mulsf3_pse+0x90>
 86c:	fe 2b       	or	r31, r30
 86e:	88 0f       	add	r24, r24
 870:	91 1d       	adc	r25, r1
 872:	96 95       	lsr	r25
 874:	87 95       	ror	r24
 876:	97 f9       	bld	r25, 7
 878:	08 95       	ret

0000087a <__fp_inf>:
 87a:	97 f9       	bld	r25, 7
 87c:	9f 67       	ori	r25, 0x7F	; 127
 87e:	80 e8       	ldi	r24, 0x80	; 128
 880:	70 e0       	ldi	r23, 0x00	; 0
 882:	60 e0       	ldi	r22, 0x00	; 0
 884:	08 95       	ret

00000886 <__fp_nan>:
 886:	9f ef       	ldi	r25, 0xFF	; 255
 888:	80 ec       	ldi	r24, 0xC0	; 192
 88a:	08 95       	ret

0000088c <__fp_pscA>:
 88c:	00 24       	eor	r0, r0
 88e:	0a 94       	dec	r0
 890:	16 16       	cp	r1, r22
 892:	17 06       	cpc	r1, r23
 894:	18 06       	cpc	r1, r24
 896:	09 06       	cpc	r0, r25
 898:	08 95       	ret

0000089a <__fp_pscB>:
 89a:	00 24       	eor	r0, r0
 89c:	0a 94       	dec	r0
 89e:	12 16       	cp	r1, r18
 8a0:	13 06       	cpc	r1, r19
 8a2:	14 06       	cpc	r1, r20
 8a4:	05 06       	cpc	r0, r21
 8a6:	08 95       	ret

000008a8 <__fp_round>:
 8a8:	09 2e       	mov	r0, r25
 8aa:	03 94       	inc	r0
 8ac:	00 0c       	add	r0, r0
 8ae:	11 f4       	brne	.+4      	; 0x8b4 <__fp_round+0xc>
 8b0:	88 23       	and	r24, r24
 8b2:	52 f0       	brmi	.+20     	; 0x8c8 <__fp_round+0x20>
 8b4:	bb 0f       	add	r27, r27
 8b6:	40 f4       	brcc	.+16     	; 0x8c8 <__fp_round+0x20>
 8b8:	bf 2b       	or	r27, r31
 8ba:	11 f4       	brne	.+4      	; 0x8c0 <__fp_round+0x18>
 8bc:	60 ff       	sbrs	r22, 0
 8be:	04 c0       	rjmp	.+8      	; 0x8c8 <__fp_round+0x20>
 8c0:	6f 5f       	subi	r22, 0xFF	; 255
 8c2:	7f 4f       	sbci	r23, 0xFF	; 255
 8c4:	8f 4f       	sbci	r24, 0xFF	; 255
 8c6:	9f 4f       	sbci	r25, 0xFF	; 255
 8c8:	08 95       	ret

000008ca <__divmodhi4>:
 8ca:	97 fb       	bst	r25, 7
 8cc:	07 2e       	mov	r0, r23
 8ce:	16 f4       	brtc	.+4      	; 0x8d4 <__divmodhi4+0xa>
 8d0:	00 94       	com	r0
 8d2:	07 d0       	rcall	.+14     	; 0x8e2 <__divmodhi4_neg1>
 8d4:	77 fd       	sbrc	r23, 7
 8d6:	09 d0       	rcall	.+18     	; 0x8ea <__divmodhi4_neg2>
 8d8:	0e 94 79 04 	call	0x8f2	; 0x8f2 <__udivmodhi4>
 8dc:	07 fc       	sbrc	r0, 7
 8de:	05 d0       	rcall	.+10     	; 0x8ea <__divmodhi4_neg2>
 8e0:	3e f4       	brtc	.+14     	; 0x8f0 <__divmodhi4_exit>

000008e2 <__divmodhi4_neg1>:
 8e2:	90 95       	com	r25
 8e4:	81 95       	neg	r24
 8e6:	9f 4f       	sbci	r25, 0xFF	; 255
 8e8:	08 95       	ret

000008ea <__divmodhi4_neg2>:
 8ea:	70 95       	com	r23
 8ec:	61 95       	neg	r22
 8ee:	7f 4f       	sbci	r23, 0xFF	; 255

000008f0 <__divmodhi4_exit>:
 8f0:	08 95       	ret

000008f2 <__udivmodhi4>:
 8f2:	aa 1b       	sub	r26, r26
 8f4:	bb 1b       	sub	r27, r27
 8f6:	51 e1       	ldi	r21, 0x11	; 17
 8f8:	07 c0       	rjmp	.+14     	; 0x908 <__udivmodhi4_ep>

000008fa <__udivmodhi4_loop>:
 8fa:	aa 1f       	adc	r26, r26
 8fc:	bb 1f       	adc	r27, r27
 8fe:	a6 17       	cp	r26, r22
 900:	b7 07       	cpc	r27, r23
 902:	10 f0       	brcs	.+4      	; 0x908 <__udivmodhi4_ep>
 904:	a6 1b       	sub	r26, r22
 906:	b7 0b       	sbc	r27, r23

00000908 <__udivmodhi4_ep>:
 908:	88 1f       	adc	r24, r24
 90a:	99 1f       	adc	r25, r25
 90c:	5a 95       	dec	r21
 90e:	a9 f7       	brne	.-22     	; 0x8fa <__udivmodhi4_loop>
 910:	80 95       	com	r24
 912:	90 95       	com	r25
 914:	bc 01       	movw	r22, r24
 916:	cd 01       	movw	r24, r26
 918:	08 95       	ret

0000091a <malloc>:
 91a:	0f 93       	push	r16
 91c:	1f 93       	push	r17
 91e:	cf 93       	push	r28
 920:	df 93       	push	r29
 922:	82 30       	cpi	r24, 0x02	; 2
 924:	91 05       	cpc	r25, r1
 926:	10 f4       	brcc	.+4      	; 0x92c <malloc+0x12>
 928:	82 e0       	ldi	r24, 0x02	; 2
 92a:	90 e0       	ldi	r25, 0x00	; 0
 92c:	e0 91 1c 01 	lds	r30, 0x011C	; 0x80011c <__flp>
 930:	f0 91 1d 01 	lds	r31, 0x011D	; 0x80011d <__flp+0x1>
 934:	20 e0       	ldi	r18, 0x00	; 0
 936:	30 e0       	ldi	r19, 0x00	; 0
 938:	a0 e0       	ldi	r26, 0x00	; 0
 93a:	b0 e0       	ldi	r27, 0x00	; 0
 93c:	30 97       	sbiw	r30, 0x00	; 0
 93e:	19 f1       	breq	.+70     	; 0x986 <malloc+0x6c>
 940:	40 81       	ld	r20, Z
 942:	51 81       	ldd	r21, Z+1	; 0x01
 944:	02 81       	ldd	r16, Z+2	; 0x02
 946:	13 81       	ldd	r17, Z+3	; 0x03
 948:	48 17       	cp	r20, r24
 94a:	59 07       	cpc	r21, r25
 94c:	c8 f0       	brcs	.+50     	; 0x980 <malloc+0x66>
 94e:	84 17       	cp	r24, r20
 950:	95 07       	cpc	r25, r21
 952:	69 f4       	brne	.+26     	; 0x96e <malloc+0x54>
 954:	10 97       	sbiw	r26, 0x00	; 0
 956:	31 f0       	breq	.+12     	; 0x964 <malloc+0x4a>
 958:	12 96       	adiw	r26, 0x02	; 2
 95a:	0c 93       	st	X, r16
 95c:	12 97       	sbiw	r26, 0x02	; 2
 95e:	13 96       	adiw	r26, 0x03	; 3
 960:	1c 93       	st	X, r17
 962:	27 c0       	rjmp	.+78     	; 0x9b2 <malloc+0x98>
 964:	00 93 1c 01 	sts	0x011C, r16	; 0x80011c <__flp>
 968:	10 93 1d 01 	sts	0x011D, r17	; 0x80011d <__flp+0x1>
 96c:	22 c0       	rjmp	.+68     	; 0x9b2 <malloc+0x98>
 96e:	21 15       	cp	r18, r1
 970:	31 05       	cpc	r19, r1
 972:	19 f0       	breq	.+6      	; 0x97a <malloc+0x60>
 974:	42 17       	cp	r20, r18
 976:	53 07       	cpc	r21, r19
 978:	18 f4       	brcc	.+6      	; 0x980 <malloc+0x66>
 97a:	9a 01       	movw	r18, r20
 97c:	bd 01       	movw	r22, r26
 97e:	ef 01       	movw	r28, r30
 980:	df 01       	movw	r26, r30
 982:	f8 01       	movw	r30, r16
 984:	db cf       	rjmp	.-74     	; 0x93c <malloc+0x22>
 986:	21 15       	cp	r18, r1
 988:	31 05       	cpc	r19, r1
 98a:	f9 f0       	breq	.+62     	; 0x9ca <malloc+0xb0>
 98c:	28 1b       	sub	r18, r24
 98e:	39 0b       	sbc	r19, r25
 990:	24 30       	cpi	r18, 0x04	; 4
 992:	31 05       	cpc	r19, r1
 994:	80 f4       	brcc	.+32     	; 0x9b6 <malloc+0x9c>
 996:	8a 81       	ldd	r24, Y+2	; 0x02
 998:	9b 81       	ldd	r25, Y+3	; 0x03
 99a:	61 15       	cp	r22, r1
 99c:	71 05       	cpc	r23, r1
 99e:	21 f0       	breq	.+8      	; 0x9a8 <malloc+0x8e>
 9a0:	fb 01       	movw	r30, r22
 9a2:	93 83       	std	Z+3, r25	; 0x03
 9a4:	82 83       	std	Z+2, r24	; 0x02
 9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <malloc+0x96>
 9a8:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <__flp+0x1>
 9ac:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <__flp>
 9b0:	fe 01       	movw	r30, r28
 9b2:	32 96       	adiw	r30, 0x02	; 2
 9b4:	44 c0       	rjmp	.+136    	; 0xa3e <malloc+0x124>
 9b6:	fe 01       	movw	r30, r28
 9b8:	e2 0f       	add	r30, r18
 9ba:	f3 1f       	adc	r31, r19
 9bc:	81 93       	st	Z+, r24
 9be:	91 93       	st	Z+, r25
 9c0:	22 50       	subi	r18, 0x02	; 2
 9c2:	31 09       	sbc	r19, r1
 9c4:	39 83       	std	Y+1, r19	; 0x01
 9c6:	28 83       	st	Y, r18
 9c8:	3a c0       	rjmp	.+116    	; 0xa3e <malloc+0x124>
 9ca:	20 91 1a 01 	lds	r18, 0x011A	; 0x80011a <__brkval>
 9ce:	30 91 1b 01 	lds	r19, 0x011B	; 0x80011b <__brkval+0x1>
 9d2:	23 2b       	or	r18, r19
 9d4:	41 f4       	brne	.+16     	; 0x9e6 <malloc+0xcc>
 9d6:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
 9da:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
 9de:	30 93 1b 01 	sts	0x011B, r19	; 0x80011b <__brkval+0x1>
 9e2:	20 93 1a 01 	sts	0x011A, r18	; 0x80011a <__brkval>
 9e6:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 9ea:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 9ee:	21 15       	cp	r18, r1
 9f0:	31 05       	cpc	r19, r1
 9f2:	41 f4       	brne	.+16     	; 0xa04 <malloc+0xea>
 9f4:	2d b7       	in	r18, 0x3d	; 61
 9f6:	3e b7       	in	r19, 0x3e	; 62
 9f8:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 9fc:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 a00:	24 1b       	sub	r18, r20
 a02:	35 0b       	sbc	r19, r21
 a04:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <__brkval>
 a08:	f0 91 1b 01 	lds	r31, 0x011B	; 0x80011b <__brkval+0x1>
 a0c:	e2 17       	cp	r30, r18
 a0e:	f3 07       	cpc	r31, r19
 a10:	a0 f4       	brcc	.+40     	; 0xa3a <malloc+0x120>
 a12:	2e 1b       	sub	r18, r30
 a14:	3f 0b       	sbc	r19, r31
 a16:	28 17       	cp	r18, r24
 a18:	39 07       	cpc	r19, r25
 a1a:	78 f0       	brcs	.+30     	; 0xa3a <malloc+0x120>
 a1c:	ac 01       	movw	r20, r24
 a1e:	4e 5f       	subi	r20, 0xFE	; 254
 a20:	5f 4f       	sbci	r21, 0xFF	; 255
 a22:	24 17       	cp	r18, r20
 a24:	35 07       	cpc	r19, r21
 a26:	48 f0       	brcs	.+18     	; 0xa3a <malloc+0x120>
 a28:	4e 0f       	add	r20, r30
 a2a:	5f 1f       	adc	r21, r31
 a2c:	50 93 1b 01 	sts	0x011B, r21	; 0x80011b <__brkval+0x1>
 a30:	40 93 1a 01 	sts	0x011A, r20	; 0x80011a <__brkval>
 a34:	81 93       	st	Z+, r24
 a36:	91 93       	st	Z+, r25
 a38:	02 c0       	rjmp	.+4      	; 0xa3e <malloc+0x124>
 a3a:	e0 e0       	ldi	r30, 0x00	; 0
 a3c:	f0 e0       	ldi	r31, 0x00	; 0
 a3e:	cf 01       	movw	r24, r30
 a40:	df 91       	pop	r29
 a42:	cf 91       	pop	r28
 a44:	1f 91       	pop	r17
 a46:	0f 91       	pop	r16
 a48:	08 95       	ret

00000a4a <free>:
 a4a:	cf 93       	push	r28
 a4c:	df 93       	push	r29
 a4e:	00 97       	sbiw	r24, 0x00	; 0
 a50:	09 f4       	brne	.+2      	; 0xa54 <free+0xa>
 a52:	81 c0       	rjmp	.+258    	; 0xb56 <free+0x10c>
 a54:	fc 01       	movw	r30, r24
 a56:	32 97       	sbiw	r30, 0x02	; 2
 a58:	13 82       	std	Z+3, r1	; 0x03
 a5a:	12 82       	std	Z+2, r1	; 0x02
 a5c:	a0 91 1c 01 	lds	r26, 0x011C	; 0x80011c <__flp>
 a60:	b0 91 1d 01 	lds	r27, 0x011D	; 0x80011d <__flp+0x1>
 a64:	10 97       	sbiw	r26, 0x00	; 0
 a66:	81 f4       	brne	.+32     	; 0xa88 <free+0x3e>
 a68:	20 81       	ld	r18, Z
 a6a:	31 81       	ldd	r19, Z+1	; 0x01
 a6c:	82 0f       	add	r24, r18
 a6e:	93 1f       	adc	r25, r19
 a70:	20 91 1a 01 	lds	r18, 0x011A	; 0x80011a <__brkval>
 a74:	30 91 1b 01 	lds	r19, 0x011B	; 0x80011b <__brkval+0x1>
 a78:	28 17       	cp	r18, r24
 a7a:	39 07       	cpc	r19, r25
 a7c:	51 f5       	brne	.+84     	; 0xad2 <free+0x88>
 a7e:	f0 93 1b 01 	sts	0x011B, r31	; 0x80011b <__brkval+0x1>
 a82:	e0 93 1a 01 	sts	0x011A, r30	; 0x80011a <__brkval>
 a86:	67 c0       	rjmp	.+206    	; 0xb56 <free+0x10c>
 a88:	ed 01       	movw	r28, r26
 a8a:	20 e0       	ldi	r18, 0x00	; 0
 a8c:	30 e0       	ldi	r19, 0x00	; 0
 a8e:	ce 17       	cp	r28, r30
 a90:	df 07       	cpc	r29, r31
 a92:	40 f4       	brcc	.+16     	; 0xaa4 <free+0x5a>
 a94:	4a 81       	ldd	r20, Y+2	; 0x02
 a96:	5b 81       	ldd	r21, Y+3	; 0x03
 a98:	9e 01       	movw	r18, r28
 a9a:	41 15       	cp	r20, r1
 a9c:	51 05       	cpc	r21, r1
 a9e:	f1 f0       	breq	.+60     	; 0xadc <free+0x92>
 aa0:	ea 01       	movw	r28, r20
 aa2:	f5 cf       	rjmp	.-22     	; 0xa8e <free+0x44>
 aa4:	d3 83       	std	Z+3, r29	; 0x03
 aa6:	c2 83       	std	Z+2, r28	; 0x02
 aa8:	40 81       	ld	r20, Z
 aaa:	51 81       	ldd	r21, Z+1	; 0x01
 aac:	84 0f       	add	r24, r20
 aae:	95 1f       	adc	r25, r21
 ab0:	c8 17       	cp	r28, r24
 ab2:	d9 07       	cpc	r29, r25
 ab4:	59 f4       	brne	.+22     	; 0xacc <free+0x82>
 ab6:	88 81       	ld	r24, Y
 ab8:	99 81       	ldd	r25, Y+1	; 0x01
 aba:	84 0f       	add	r24, r20
 abc:	95 1f       	adc	r25, r21
 abe:	02 96       	adiw	r24, 0x02	; 2
 ac0:	91 83       	std	Z+1, r25	; 0x01
 ac2:	80 83       	st	Z, r24
 ac4:	8a 81       	ldd	r24, Y+2	; 0x02
 ac6:	9b 81       	ldd	r25, Y+3	; 0x03
 ac8:	93 83       	std	Z+3, r25	; 0x03
 aca:	82 83       	std	Z+2, r24	; 0x02
 acc:	21 15       	cp	r18, r1
 ace:	31 05       	cpc	r19, r1
 ad0:	29 f4       	brne	.+10     	; 0xadc <free+0x92>
 ad2:	f0 93 1d 01 	sts	0x011D, r31	; 0x80011d <__flp+0x1>
 ad6:	e0 93 1c 01 	sts	0x011C, r30	; 0x80011c <__flp>
 ada:	3d c0       	rjmp	.+122    	; 0xb56 <free+0x10c>
 adc:	e9 01       	movw	r28, r18
 ade:	fb 83       	std	Y+3, r31	; 0x03
 ae0:	ea 83       	std	Y+2, r30	; 0x02
 ae2:	49 91       	ld	r20, Y+
 ae4:	59 91       	ld	r21, Y+
 ae6:	c4 0f       	add	r28, r20
 ae8:	d5 1f       	adc	r29, r21
 aea:	ec 17       	cp	r30, r28
 aec:	fd 07       	cpc	r31, r29
 aee:	61 f4       	brne	.+24     	; 0xb08 <free+0xbe>
 af0:	80 81       	ld	r24, Z
 af2:	91 81       	ldd	r25, Z+1	; 0x01
 af4:	84 0f       	add	r24, r20
 af6:	95 1f       	adc	r25, r21
 af8:	02 96       	adiw	r24, 0x02	; 2
 afa:	e9 01       	movw	r28, r18
 afc:	99 83       	std	Y+1, r25	; 0x01
 afe:	88 83       	st	Y, r24
 b00:	82 81       	ldd	r24, Z+2	; 0x02
 b02:	93 81       	ldd	r25, Z+3	; 0x03
 b04:	9b 83       	std	Y+3, r25	; 0x03
 b06:	8a 83       	std	Y+2, r24	; 0x02
 b08:	e0 e0       	ldi	r30, 0x00	; 0
 b0a:	f0 e0       	ldi	r31, 0x00	; 0
 b0c:	12 96       	adiw	r26, 0x02	; 2
 b0e:	8d 91       	ld	r24, X+
 b10:	9c 91       	ld	r25, X
 b12:	13 97       	sbiw	r26, 0x03	; 3
 b14:	00 97       	sbiw	r24, 0x00	; 0
 b16:	19 f0       	breq	.+6      	; 0xb1e <free+0xd4>
 b18:	fd 01       	movw	r30, r26
 b1a:	dc 01       	movw	r26, r24
 b1c:	f7 cf       	rjmp	.-18     	; 0xb0c <free+0xc2>
 b1e:	8d 91       	ld	r24, X+
 b20:	9c 91       	ld	r25, X
 b22:	11 97       	sbiw	r26, 0x01	; 1
 b24:	9d 01       	movw	r18, r26
 b26:	2e 5f       	subi	r18, 0xFE	; 254
 b28:	3f 4f       	sbci	r19, 0xFF	; 255
 b2a:	82 0f       	add	r24, r18
 b2c:	93 1f       	adc	r25, r19
 b2e:	20 91 1a 01 	lds	r18, 0x011A	; 0x80011a <__brkval>
 b32:	30 91 1b 01 	lds	r19, 0x011B	; 0x80011b <__brkval+0x1>
 b36:	28 17       	cp	r18, r24
 b38:	39 07       	cpc	r19, r25
 b3a:	69 f4       	brne	.+26     	; 0xb56 <free+0x10c>
 b3c:	30 97       	sbiw	r30, 0x00	; 0
 b3e:	29 f4       	brne	.+10     	; 0xb4a <free+0x100>
 b40:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <__flp+0x1>
 b44:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <__flp>
 b48:	02 c0       	rjmp	.+4      	; 0xb4e <free+0x104>
 b4a:	13 82       	std	Z+3, r1	; 0x03
 b4c:	12 82       	std	Z+2, r1	; 0x02
 b4e:	b0 93 1b 01 	sts	0x011B, r27	; 0x80011b <__brkval+0x1>
 b52:	a0 93 1a 01 	sts	0x011A, r26	; 0x80011a <__brkval>
 b56:	df 91       	pop	r29
 b58:	cf 91       	pop	r28
 b5a:	08 95       	ret

00000b5c <_exit>:
 b5c:	f8 94       	cli

00000b5e <__stop_program>:
 b5e:	ff cf       	rjmp	.-2      	; 0xb5e <__stop_program>
