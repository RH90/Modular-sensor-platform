
Main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  00000b6c  00000c00  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b6c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000014  0080010a  0080010a  00000c0a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c0a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000c3c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000118  00000000  00000000  00000c7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000013ee  00000000  00000000  00000d94  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a0e  00000000  00000000  00002182  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009d7  00000000  00000000  00002b90  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000330  00000000  00000000  00003568  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005df  00000000  00000000  00003898  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000de5  00000000  00000000  00003e77  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000130  00000000  00000000  00004c5c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 9d 02 	jmp	0x53a	; 0x53a <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e6       	ldi	r30, 0x6C	; 108
  7c:	fb e0       	ldi	r31, 0x0B	; 11
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 30       	cpi	r26, 0x0A	; 10
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	aa e0       	ldi	r26, 0x0A	; 10
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ae 31       	cpi	r26, 0x1E	; 30
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <main>
  9e:	0c 94 b4 05 	jmp	0xb68	; 0xb68 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <i2c_init>:
	data[(length-1)] = i2c_read_nack();
	
	i2c_stop();
	
	return 0;
}
  a6:	8c e0       	ldi	r24, 0x0C	; 12
  a8:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
  ac:	08 95       	ret

000000ae <i2c_start>:
  ae:	ec eb       	ldi	r30, 0xBC	; 188
  b0:	f0 e0       	ldi	r31, 0x00	; 0
  b2:	10 82       	st	Z, r1
  b4:	94 ea       	ldi	r25, 0xA4	; 164
  b6:	90 83       	st	Z, r25
  b8:	90 81       	ld	r25, Z
  ba:	99 23       	and	r25, r25
  bc:	ec f7       	brge	.-6      	; 0xb8 <i2c_start+0xa>
  be:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
  c2:	98 7f       	andi	r25, 0xF8	; 248
  c4:	98 30       	cpi	r25, 0x08	; 8
  c6:	a1 f4       	brne	.+40     	; 0xf0 <i2c_start+0x42>
  c8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
  cc:	84 e8       	ldi	r24, 0x84	; 132
  ce:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
  d2:	ec eb       	ldi	r30, 0xBC	; 188
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	80 81       	ld	r24, Z
  d8:	88 23       	and	r24, r24
  da:	ec f7       	brge	.-6      	; 0xd6 <i2c_start+0x28>
  dc:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
  e0:	98 7f       	andi	r25, 0xF8	; 248
  e2:	98 31       	cpi	r25, 0x18	; 24
  e4:	39 f0       	breq	.+14     	; 0xf4 <i2c_start+0x46>
  e6:	81 e0       	ldi	r24, 0x01	; 1
  e8:	90 34       	cpi	r25, 0x40	; 64
  ea:	29 f4       	brne	.+10     	; 0xf6 <i2c_start+0x48>
  ec:	80 e0       	ldi	r24, 0x00	; 0
  ee:	08 95       	ret
  f0:	81 e0       	ldi	r24, 0x01	; 1
  f2:	08 95       	ret
  f4:	80 e0       	ldi	r24, 0x00	; 0
  f6:	08 95       	ret

000000f8 <i2c_write>:
  f8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
  fc:	84 e8       	ldi	r24, 0x84	; 132
  fe:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 102:	ec eb       	ldi	r30, 0xBC	; 188
 104:	f0 e0       	ldi	r31, 0x00	; 0
 106:	80 81       	ld	r24, Z
 108:	88 23       	and	r24, r24
 10a:	ec f7       	brge	.-6      	; 0x106 <i2c_write+0xe>
 10c:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 110:	98 7f       	andi	r25, 0xF8	; 248
 112:	81 e0       	ldi	r24, 0x01	; 1
 114:	98 32       	cpi	r25, 0x28	; 40
 116:	09 f4       	brne	.+2      	; 0x11a <i2c_write+0x22>
 118:	80 e0       	ldi	r24, 0x00	; 0
 11a:	08 95       	ret

0000011c <i2c_read_ack>:
 11c:	84 ec       	ldi	r24, 0xC4	; 196
 11e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 122:	ec eb       	ldi	r30, 0xBC	; 188
 124:	f0 e0       	ldi	r31, 0x00	; 0
 126:	80 81       	ld	r24, Z
 128:	88 23       	and	r24, r24
 12a:	ec f7       	brge	.-6      	; 0x126 <i2c_read_ack+0xa>
 12c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 130:	08 95       	ret

00000132 <i2c_read_nack>:
 132:	84 e8       	ldi	r24, 0x84	; 132
 134:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 138:	ec eb       	ldi	r30, 0xBC	; 188
 13a:	f0 e0       	ldi	r31, 0x00	; 0
 13c:	80 81       	ld	r24, Z
 13e:	88 23       	and	r24, r24
 140:	ec f7       	brge	.-6      	; 0x13c <i2c_read_nack+0xa>
 142:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 146:	08 95       	ret

00000148 <i2c_writeReg>:

uint8_t i2c_writeReg(uint8_t devaddr, uint8_t regaddr, uint8_t* data, uint16_t length)
{
 148:	cf 92       	push	r12
 14a:	df 92       	push	r13
 14c:	ff 92       	push	r15
 14e:	0f 93       	push	r16
 150:	1f 93       	push	r17
 152:	cf 93       	push	r28
 154:	df 93       	push	r29
 156:	c6 2f       	mov	r28, r22
 158:	6a 01       	movw	r12, r20
 15a:	89 01       	movw	r16, r18
	if (i2c_start(devaddr | 0x00)) return 1;
 15c:	0e 94 57 00 	call	0xae	; 0xae <i2c_start>
 160:	f8 2e       	mov	r15, r24
 162:	81 11       	cpse	r24, r1
 164:	15 c0       	rjmp	.+42     	; 0x190 <i2c_writeReg+0x48>

	i2c_write(regaddr);
 166:	8c 2f       	mov	r24, r28
 168:	0e 94 7c 00 	call	0xf8	; 0xf8 <i2c_write>

	for (uint16_t i = 0; i < length; i++)
 16c:	01 15       	cp	r16, r1
 16e:	11 05       	cpc	r17, r1
 170:	59 f0       	breq	.+22     	; 0x188 <i2c_writeReg+0x40>
 172:	e6 01       	movw	r28, r12
 174:	0c 0d       	add	r16, r12
 176:	1d 1d       	adc	r17, r13
	{
		if (i2c_write(data[i])) return 1;
 178:	89 91       	ld	r24, Y+
 17a:	0e 94 7c 00 	call	0xf8	; 0xf8 <i2c_write>
 17e:	81 11       	cpse	r24, r1
 180:	0a c0       	rjmp	.+20     	; 0x196 <i2c_writeReg+0x4e>
{
	if (i2c_start(devaddr | 0x00)) return 1;

	i2c_write(regaddr);

	for (uint16_t i = 0; i < length; i++)
 182:	c0 17       	cp	r28, r16
 184:	d1 07       	cpc	r29, r17
 186:	c1 f7       	brne	.-16     	; 0x178 <i2c_writeReg+0x30>
}

void i2c_stop(void)
{
	// transmit STOP condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 188:	84 e9       	ldi	r24, 0x94	; 148
 18a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 18e:	05 c0       	rjmp	.+10     	; 0x19a <i2c_writeReg+0x52>
	return 0;
}

uint8_t i2c_writeReg(uint8_t devaddr, uint8_t regaddr, uint8_t* data, uint16_t length)
{
	if (i2c_start(devaddr | 0x00)) return 1;
 190:	ff 24       	eor	r15, r15
 192:	f3 94       	inc	r15
 194:	02 c0       	rjmp	.+4      	; 0x19a <i2c_writeReg+0x52>

	i2c_write(regaddr);

	for (uint16_t i = 0; i < length; i++)
	{
		if (i2c_write(data[i])) return 1;
 196:	ff 24       	eor	r15, r15
 198:	f3 94       	inc	r15
	}

	i2c_stop();

	return 0;
}
 19a:	8f 2d       	mov	r24, r15
 19c:	df 91       	pop	r29
 19e:	cf 91       	pop	r28
 1a0:	1f 91       	pop	r17
 1a2:	0f 91       	pop	r16
 1a4:	ff 90       	pop	r15
 1a6:	df 90       	pop	r13
 1a8:	cf 90       	pop	r12
 1aa:	08 95       	ret

000001ac <i2c_readReg>:

uint8_t i2c_readReg(uint8_t devaddr, uint8_t regaddr, uint8_t* data, uint16_t length)
{
 1ac:	af 92       	push	r10
 1ae:	bf 92       	push	r11
 1b0:	df 92       	push	r13
 1b2:	ef 92       	push	r14
 1b4:	ff 92       	push	r15
 1b6:	0f 93       	push	r16
 1b8:	1f 93       	push	r17
 1ba:	cf 93       	push	r28
 1bc:	df 93       	push	r29
 1be:	18 2f       	mov	r17, r24
 1c0:	06 2f       	mov	r16, r22
 1c2:	5a 01       	movw	r10, r20
 1c4:	e9 01       	movw	r28, r18
	if (i2c_start(devaddr)) return 1;
 1c6:	0e 94 57 00 	call	0xae	; 0xae <i2c_start>
 1ca:	81 11       	cpse	r24, r1
 1cc:	22 c0       	rjmp	.+68     	; 0x212 <i2c_readReg+0x66>

	i2c_write(regaddr);
 1ce:	80 2f       	mov	r24, r16
 1d0:	0e 94 7c 00 	call	0xf8	; 0xf8 <i2c_write>

	if (i2c_start(devaddr | 0x01)) return 1;
 1d4:	81 2f       	mov	r24, r17
 1d6:	81 60       	ori	r24, 0x01	; 1
 1d8:	0e 94 57 00 	call	0xae	; 0xae <i2c_start>
 1dc:	d8 2e       	mov	r13, r24
 1de:	81 11       	cpse	r24, r1
 1e0:	1b c0       	rjmp	.+54     	; 0x218 <i2c_readReg+0x6c>

	for (uint16_t i = 0; i < (length-1); i++)
 1e2:	8e 01       	movw	r16, r28
 1e4:	01 50       	subi	r16, 0x01	; 1
 1e6:	11 09       	sbc	r17, r1
 1e8:	51 f0       	breq	.+20     	; 0x1fe <i2c_readReg+0x52>
 1ea:	e5 01       	movw	r28, r10
 1ec:	75 01       	movw	r14, r10
 1ee:	e0 0e       	add	r14, r16
 1f0:	f1 1e       	adc	r15, r17
	{
		data[i] = i2c_read_ack();
 1f2:	0e 94 8e 00 	call	0x11c	; 0x11c <i2c_read_ack>
 1f6:	89 93       	st	Y+, r24

	i2c_write(regaddr);

	if (i2c_start(devaddr | 0x01)) return 1;

	for (uint16_t i = 0; i < (length-1); i++)
 1f8:	ec 16       	cp	r14, r28
 1fa:	fd 06       	cpc	r15, r29
 1fc:	d1 f7       	brne	.-12     	; 0x1f2 <i2c_readReg+0x46>
	{
		data[i] = i2c_read_ack();
	}
	data[(length-1)] = i2c_read_nack();
 1fe:	e5 01       	movw	r28, r10
 200:	c0 0f       	add	r28, r16
 202:	d1 1f       	adc	r29, r17
 204:	0e 94 99 00 	call	0x132	; 0x132 <i2c_read_nack>
 208:	88 83       	st	Y, r24
}

void i2c_stop(void)
{
	// transmit STOP condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 20a:	84 e9       	ldi	r24, 0x94	; 148
 20c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 210:	05 c0       	rjmp	.+10     	; 0x21c <i2c_readReg+0x70>
	return 0;
}

uint8_t i2c_readReg(uint8_t devaddr, uint8_t regaddr, uint8_t* data, uint16_t length)
{
	if (i2c_start(devaddr)) return 1;
 212:	dd 24       	eor	r13, r13
 214:	d3 94       	inc	r13
 216:	02 c0       	rjmp	.+4      	; 0x21c <i2c_readReg+0x70>

	i2c_write(regaddr);

	if (i2c_start(devaddr | 0x01)) return 1;
 218:	dd 24       	eor	r13, r13
 21a:	d3 94       	inc	r13
	data[(length-1)] = i2c_read_nack();

	i2c_stop();

	return 0;
}
 21c:	8d 2d       	mov	r24, r13
 21e:	df 91       	pop	r29
 220:	cf 91       	pop	r28
 222:	1f 91       	pop	r17
 224:	0f 91       	pop	r16
 226:	ff 90       	pop	r15
 228:	ef 90       	pop	r14
 22a:	df 90       	pop	r13
 22c:	bf 90       	pop	r11
 22e:	af 90       	pop	r10
 230:	08 95       	ret

00000232 <print>:
	print(*dat,id);
	free(dat);
	
}
void SPI_sensor()
{
 232:	df 92       	push	r13
 234:	ef 92       	push	r14
 236:	ff 92       	push	r15
 238:	0f 93       	push	r16
 23a:	1f 93       	push	r17
 23c:	cf 93       	push	r28
 23e:	df 93       	push	r29
 240:	d6 2e       	mov	r13, r22
 242:	ca e0       	ldi	r28, 0x0A	; 10
 244:	d0 e0       	ldi	r29, 0x00	; 0
 246:	0f 2e       	mov	r0, r31
 248:	fa e0       	ldi	r31, 0x0A	; 10
 24a:	ef 2e       	mov	r14, r31
 24c:	f1 2c       	mov	r15, r1
 24e:	f0 2d       	mov	r31, r0
 250:	b7 01       	movw	r22, r14
 252:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <__divmodhi4>
 256:	06 2f       	mov	r16, r22
 258:	17 2f       	mov	r17, r23
 25a:	c0 96       	adiw	r24, 0x30	; 48
 25c:	0e 94 1f 03 	call	0x63e	; 0x63e <serialWrite>
 260:	80 2f       	mov	r24, r16
 262:	91 2f       	mov	r25, r17
 264:	00 97       	sbiw	r24, 0x00	; 0
 266:	11 f0       	breq	.+4      	; 0x26c <print+0x3a>
 268:	21 97       	sbiw	r28, 0x01	; 1
 26a:	91 f7       	brne	.-28     	; 0x250 <print+0x1e>
 26c:	8d 2d       	mov	r24, r13
 26e:	90 e0       	ldi	r25, 0x00	; 0
 270:	0e 94 1f 03 	call	0x63e	; 0x63e <serialWrite>
 274:	df 91       	pop	r29
 276:	cf 91       	pop	r28
 278:	1f 91       	pop	r17
 27a:	0f 91       	pop	r16
 27c:	ff 90       	pop	r15
 27e:	ef 90       	pop	r14
 280:	df 90       	pop	r13
 282:	08 95       	ret

00000284 <adc_init>:
 284:	80 e4       	ldi	r24, 0x40	; 64
 286:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
 28a:	87 e8       	ldi	r24, 0x87	; 135
 28c:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
 290:	08 95       	ret

00000292 <Timer1init>:
 292:	82 e0       	ldi	r24, 0x02	; 2
 294:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 298:	8c e0       	ldi	r24, 0x0C	; 12
 29a:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 29e:	8a e6       	ldi	r24, 0x6A	; 106
 2a0:	98 e1       	ldi	r25, 0x18	; 24
 2a2:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 2a6:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 2aa:	78 94       	sei
 2ac:	08 95       	ret

000002ae <adc_read>:
 2ae:	ec e7       	ldi	r30, 0x7C	; 124
 2b0:	f0 e0       	ldi	r31, 0x00	; 0
 2b2:	90 81       	ld	r25, Z
 2b4:	98 7f       	andi	r25, 0xF8	; 248
 2b6:	87 70       	andi	r24, 0x07	; 7
 2b8:	89 2b       	or	r24, r25
 2ba:	80 83       	st	Z, r24
 2bc:	ea e7       	ldi	r30, 0x7A	; 122
 2be:	f0 e0       	ldi	r31, 0x00	; 0
 2c0:	80 81       	ld	r24, Z
 2c2:	80 64       	ori	r24, 0x40	; 64
 2c4:	80 83       	st	Z, r24
 2c6:	80 81       	ld	r24, Z
 2c8:	86 fd       	sbrc	r24, 6
 2ca:	fd cf       	rjmp	.-6      	; 0x2c6 <adc_read+0x18>
 2cc:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 2d0:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 2d4:	08 95       	ret

000002d6 <I2CW>:
 2d6:	ff 92       	push	r15
 2d8:	0f 93       	push	r16
 2da:	1f 93       	push	r17
 2dc:	cf 93       	push	r28
 2de:	df 93       	push	r29
 2e0:	18 2f       	mov	r17, r24
 2e2:	06 2f       	mov	r16, r22
 2e4:	f4 2e       	mov	r15, r20
 2e6:	81 e0       	ldi	r24, 0x01	; 1
 2e8:	90 e0       	ldi	r25, 0x00	; 0
 2ea:	0e 94 93 04 	call	0x926	; 0x926 <malloc>
 2ee:	ec 01       	movw	r28, r24
 2f0:	f8 82       	st	Y, r15
 2f2:	21 e0       	ldi	r18, 0x01	; 1
 2f4:	30 e0       	ldi	r19, 0x00	; 0
 2f6:	ac 01       	movw	r20, r24
 2f8:	60 2f       	mov	r22, r16
 2fa:	81 2f       	mov	r24, r17
 2fc:	0e 94 a4 00 	call	0x148	; 0x148 <i2c_writeReg>
 300:	ce 01       	movw	r24, r28
 302:	0e 94 2b 05 	call	0xa56	; 0xa56 <free>
 306:	df 91       	pop	r29
 308:	cf 91       	pop	r28
 30a:	1f 91       	pop	r17
 30c:	0f 91       	pop	r16
 30e:	ff 90       	pop	r15
 310:	08 95       	ret

00000312 <session_init>:
 312:	0e 94 27 03 	call	0x64e	; 0x64e <serialRead>
 316:	90 e0       	ldi	r25, 0x00	; 0
 318:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <delay+0x1>
 31c:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <delay>
 320:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <delay>
 324:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <delay+0x1>
 328:	89 2b       	or	r24, r25
 32a:	31 f4       	brne	.+12     	; 0x338 <session_init+0x26>
 32c:	8a e0       	ldi	r24, 0x0A	; 10
 32e:	90 e0       	ldi	r25, 0x00	; 0
 330:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <delay+0x1>
 334:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <delay>
 338:	0e 94 27 03 	call	0x64e	; 0x64e <serialRead>
 33c:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <A1>
 340:	0e 94 27 03 	call	0x64e	; 0x64e <serialRead>
 344:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <A2>
 348:	0e 94 27 03 	call	0x64e	; 0x64e <serialRead>
 34c:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <A3>
 350:	0e 94 27 03 	call	0x64e	; 0x64e <serialRead>
 354:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <A4>
 358:	0e 94 27 03 	call	0x64e	; 0x64e <serialRead>
 35c:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <A5>
 360:	0e 94 27 03 	call	0x64e	; 0x64e <serialRead>
 364:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <A6>
 368:	0e 94 27 03 	call	0x64e	; 0x64e <serialRead>
 36c:	88 23       	and	r24, r24
 36e:	d1 f0       	breq	.+52     	; 0x3a4 <session_init+0x92>
 370:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <I2C1_addr>
 374:	0e 94 27 03 	call	0x64e	; 0x64e <serialRead>
 378:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <I2C1_write_reg>
 37c:	0e 94 27 03 	call	0x64e	; 0x64e <serialRead>
 380:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <I2C1_write_data>
 384:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <I2C1_write_reg>
 388:	88 23       	and	r24, r24
 38a:	41 f0       	breq	.+16     	; 0x39c <session_init+0x8a>
 38c:	40 91 0f 01 	lds	r20, 0x010F	; 0x80010f <I2C1_write_data>
 390:	60 91 17 01 	lds	r22, 0x0117	; 0x800117 <I2C1_write_reg>
 394:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <I2C1_addr>
 398:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <I2CW>
 39c:	0e 94 27 03 	call	0x64e	; 0x64e <serialRead>
 3a0:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
 3a4:	0e 94 27 03 	call	0x64e	; 0x64e <serialRead>
 3a8:	88 23       	and	r24, r24
 3aa:	d1 f0       	breq	.+52     	; 0x3e0 <session_init+0xce>
 3ac:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <I2C2_addr>
 3b0:	0e 94 27 03 	call	0x64e	; 0x64e <serialRead>
 3b4:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <I2C2_write_reg>
 3b8:	0e 94 27 03 	call	0x64e	; 0x64e <serialRead>
 3bc:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <I2C2_write_data>
 3c0:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <I2C2_write_reg>
 3c4:	88 23       	and	r24, r24
 3c6:	41 f0       	breq	.+16     	; 0x3d8 <session_init+0xc6>
 3c8:	40 91 15 01 	lds	r20, 0x0115	; 0x800115 <I2C2_write_data>
 3cc:	60 91 14 01 	lds	r22, 0x0114	; 0x800114 <I2C2_write_reg>
 3d0:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <I2C2_addr>
 3d4:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <I2CW>
 3d8:	0e 94 27 03 	call	0x64e	; 0x64e <serialRead>
 3dc:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <I2C2_reg>
 3e0:	08 95       	ret

000003e2 <main>:
 3e2:	0e 94 42 01 	call	0x284	; 0x284 <adc_init>
 3e6:	87 e6       	ldi	r24, 0x67	; 103
 3e8:	90 e0       	ldi	r25, 0x00	; 0
 3ea:	0e 94 2f 03 	call	0x65e	; 0x65e <serial_init>
 3ee:	0e 94 53 00 	call	0xa6	; 0xa6 <i2c_init>
 3f2:	0e 94 89 01 	call	0x312	; 0x312 <session_init>
 3f6:	0e 94 49 01 	call	0x292	; 0x292 <Timer1init>
 3fa:	ff cf       	rjmp	.-2      	; 0x3fa <main+0x18>

000003fc <Analog_digital_sensor>:
 3fc:	cf 93       	push	r28
 3fe:	c4 2f       	mov	r28, r20
 400:	61 30       	cpi	r22, 0x01	; 1
 402:	71 05       	cpc	r23, r1
 404:	09 f0       	breq	.+2      	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 406:	5f c0       	rjmp	.+190    	; 0x4c6 <__LOCK_REGION_LENGTH__+0xc6>
 408:	97 b1       	in	r25, 0x07	; 7
 40a:	e1 e0       	ldi	r30, 0x01	; 1
 40c:	f0 e0       	ldi	r31, 0x00	; 0
 40e:	08 2e       	mov	r0, r24
 410:	02 c0       	rjmp	.+4      	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
 412:	ee 0f       	add	r30, r30
 414:	ff 1f       	adc	r31, r31
 416:	0a 94       	dec	r0
 418:	e2 f7       	brpl	.-8      	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
 41a:	9e 2b       	or	r25, r30
 41c:	97 b9       	out	0x07, r25	; 7
 41e:	98 b1       	in	r25, 0x08	; 8
 420:	9e 27       	eor	r25, r30
 422:	98 b9       	out	0x08, r25	; 8
 424:	4a e0       	ldi	r20, 0x0A	; 10
 426:	4a 95       	dec	r20
 428:	f1 f7       	brne	.-4      	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
 42a:	00 c0       	rjmp	.+0      	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
 42c:	98 b1       	in	r25, 0x08	; 8
 42e:	9e 2b       	or	r25, r30
 430:	98 b9       	out	0x08, r25	; 8
 432:	5a e1       	ldi	r21, 0x1A	; 26
 434:	5a 95       	dec	r21
 436:	f1 f7       	brne	.-4      	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
 438:	00 c0       	rjmp	.+0      	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
 43a:	98 b1       	in	r25, 0x08	; 8
 43c:	9e 27       	eor	r25, r30
 43e:	98 b9       	out	0x08, r25	; 8
 440:	97 b1       	in	r25, 0x07	; 7
 442:	9e 27       	eor	r25, r30
 444:	97 b9       	out	0x07, r25	; 7
 446:	26 b1       	in	r18, 0x06	; 6
 448:	30 e0       	ldi	r19, 0x00	; 0
 44a:	08 2e       	mov	r0, r24
 44c:	02 c0       	rjmp	.+4      	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
 44e:	35 95       	asr	r19
 450:	27 95       	ror	r18
 452:	0a 94       	dec	r0
 454:	e2 f7       	brpl	.-8      	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
 456:	20 fd       	sbrc	r18, 0
 458:	3f c0       	rjmp	.+126    	; 0x4d8 <__LOCK_REGION_LENGTH__+0xd8>
 45a:	48 ee       	ldi	r20, 0xE8	; 232
 45c:	53 e0       	ldi	r21, 0x03	; 3
 45e:	95 e0       	ldi	r25, 0x05	; 5
 460:	9a 95       	dec	r25
 462:	f1 f7       	brne	.-4      	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
 464:	00 00       	nop
 466:	26 b1       	in	r18, 0x06	; 6
 468:	30 e0       	ldi	r19, 0x00	; 0
 46a:	2e 23       	and	r18, r30
 46c:	3f 23       	and	r19, r31
 46e:	23 2b       	or	r18, r19
 470:	99 f5       	brne	.+102    	; 0x4d8 <__LOCK_REGION_LENGTH__+0xd8>
 472:	41 50       	subi	r20, 0x01	; 1
 474:	51 09       	sbc	r21, r1
 476:	99 f7       	brne	.-26     	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
 478:	2f c0       	rjmp	.+94     	; 0x4d8 <__LOCK_REGION_LENGTH__+0xd8>
 47a:	60 e0       	ldi	r22, 0x00	; 0
 47c:	70 e0       	ldi	r23, 0x00	; 0
 47e:	45 e3       	ldi	r20, 0x35	; 53
 480:	4a 95       	dec	r20
 482:	f1 f7       	brne	.-4      	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
 484:	00 00       	nop
 486:	6f 5f       	subi	r22, 0xFF	; 255
 488:	7f 4f       	sbci	r23, 0xFF	; 255
 48a:	86 b1       	in	r24, 0x06	; 6
 48c:	90 e0       	ldi	r25, 0x00	; 0
 48e:	8e 23       	and	r24, r30
 490:	9f 23       	and	r25, r31
 492:	89 2b       	or	r24, r25
 494:	21 f0       	breq	.+8      	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
 496:	68 3a       	cpi	r22, 0xA8	; 168
 498:	51 e6       	ldi	r21, 0x61	; 97
 49a:	75 07       	cpc	r23, r21
 49c:	81 f7       	brne	.-32     	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
 49e:	07 2e       	mov	r0, r23
 4a0:	00 0c       	add	r0, r0
 4a2:	88 0b       	sbc	r24, r24
 4a4:	99 0b       	sbc	r25, r25
 4a6:	0e 94 72 03 	call	0x6e4	; 0x6e4 <__floatsisf>
 4aa:	2e e0       	ldi	r18, 0x0E	; 14
 4ac:	3d e2       	ldi	r19, 0x2D	; 45
 4ae:	42 e3       	ldi	r20, 0x32	; 50
 4b0:	5e e3       	ldi	r21, 0x3E	; 62
 4b2:	0e 94 d6 03 	call	0x7ac	; 0x7ac <__mulsf3>
 4b6:	0e 94 3a 03 	call	0x674	; 0x674 <__fixsfsi>
 4ba:	dc 01       	movw	r26, r24
 4bc:	cb 01       	movw	r24, r22
 4be:	6c 2f       	mov	r22, r28
 4c0:	0e 94 19 01 	call	0x232	; 0x232 <print>
 4c4:	16 c0       	rjmp	.+44     	; 0x4f2 <__LOCK_REGION_LENGTH__+0xf2>
 4c6:	62 30       	cpi	r22, 0x02	; 2
 4c8:	71 05       	cpc	r23, r1
 4ca:	99 f4       	brne	.+38     	; 0x4f2 <__LOCK_REGION_LENGTH__+0xf2>
 4cc:	0e 94 57 01 	call	0x2ae	; 0x2ae <adc_read>
 4d0:	6c 2f       	mov	r22, r28
 4d2:	0e 94 19 01 	call	0x232	; 0x232 <print>
 4d6:	0d c0       	rjmp	.+26     	; 0x4f2 <__LOCK_REGION_LENGTH__+0xf2>
 4d8:	26 b1       	in	r18, 0x06	; 6
 4da:	30 e0       	ldi	r19, 0x00	; 0
 4dc:	a9 01       	movw	r20, r18
 4de:	02 c0       	rjmp	.+4      	; 0x4e4 <__LOCK_REGION_LENGTH__+0xe4>
 4e0:	55 95       	asr	r21
 4e2:	47 95       	ror	r20
 4e4:	8a 95       	dec	r24
 4e6:	e2 f7       	brpl	.-8      	; 0x4e0 <__LOCK_REGION_LENGTH__+0xe0>
 4e8:	40 fd       	sbrc	r20, 0
 4ea:	c7 cf       	rjmp	.-114    	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
 4ec:	60 e0       	ldi	r22, 0x00	; 0
 4ee:	70 e0       	ldi	r23, 0x00	; 0
 4f0:	d6 cf       	rjmp	.-84     	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
 4f2:	cf 91       	pop	r28
 4f4:	08 95       	ret

000004f6 <I2C_sensor>:
 4f6:	ff 92       	push	r15
 4f8:	0f 93       	push	r16
 4fa:	1f 93       	push	r17
 4fc:	cf 93       	push	r28
 4fe:	df 93       	push	r29
 500:	08 2f       	mov	r16, r24
 502:	f6 2e       	mov	r15, r22
 504:	14 2f       	mov	r17, r20
 506:	81 e0       	ldi	r24, 0x01	; 1
 508:	90 e0       	ldi	r25, 0x00	; 0
 50a:	0e 94 93 04 	call	0x926	; 0x926 <malloc>
 50e:	ec 01       	movw	r28, r24
 510:	21 e0       	ldi	r18, 0x01	; 1
 512:	30 e0       	ldi	r19, 0x00	; 0
 514:	ac 01       	movw	r20, r24
 516:	6f 2d       	mov	r22, r15
 518:	80 2f       	mov	r24, r16
 51a:	0e 94 d6 00 	call	0x1ac	; 0x1ac <i2c_readReg>
 51e:	88 81       	ld	r24, Y
 520:	61 2f       	mov	r22, r17
 522:	90 e0       	ldi	r25, 0x00	; 0
 524:	0e 94 19 01 	call	0x232	; 0x232 <print>
 528:	ce 01       	movw	r24, r28
 52a:	0e 94 2b 05 	call	0xa56	; 0xa56 <free>
 52e:	df 91       	pop	r29
 530:	cf 91       	pop	r28
 532:	1f 91       	pop	r17
 534:	0f 91       	pop	r16
 536:	ff 90       	pop	r15
 538:	08 95       	ret

0000053a <__vector_11>:
}



ISR(TIMER1_COMPA_vect)
{
 53a:	1f 92       	push	r1
 53c:	0f 92       	push	r0
 53e:	0f b6       	in	r0, 0x3f	; 63
 540:	0f 92       	push	r0
 542:	11 24       	eor	r1, r1
 544:	2f 93       	push	r18
 546:	3f 93       	push	r19
 548:	4f 93       	push	r20
 54a:	5f 93       	push	r21
 54c:	6f 93       	push	r22
 54e:	7f 93       	push	r23
 550:	8f 93       	push	r24
 552:	9f 93       	push	r25
 554:	af 93       	push	r26
 556:	bf 93       	push	r27
 558:	ef 93       	push	r30
 55a:	ff 93       	push	r31
	if (count_delay>=delay)
 55c:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <count_delay>
 560:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <count_delay+0x1>
 564:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <delay>
 568:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <delay+0x1>
 56c:	28 17       	cp	r18, r24
 56e:	39 07       	cpc	r19, r25
 570:	08 f4       	brcc	.+2      	; 0x574 <__vector_11+0x3a>
 572:	4b c0       	rjmp	.+150    	; 0x60a <__vector_11+0xd0>
	{
		count_delay=1;
 574:	81 e0       	ldi	r24, 0x01	; 1
 576:	90 e0       	ldi	r25, 0x00	; 0
 578:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <count_delay+0x1>
 57c:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <count_delay>
		Analog_digital_sensor(0,A1,'a');
 580:	60 91 18 01 	lds	r22, 0x0118	; 0x800118 <A1>
 584:	70 e0       	ldi	r23, 0x00	; 0
 586:	41 e6       	ldi	r20, 0x61	; 97
 588:	80 e0       	ldi	r24, 0x00	; 0
 58a:	90 e0       	ldi	r25, 0x00	; 0
 58c:	0e 94 fe 01 	call	0x3fc	; 0x3fc <Analog_digital_sensor>
		Analog_digital_sensor(1,A2,'b');
 590:	60 91 13 01 	lds	r22, 0x0113	; 0x800113 <A2>
 594:	70 e0       	ldi	r23, 0x00	; 0
 596:	42 e6       	ldi	r20, 0x62	; 98
 598:	81 e0       	ldi	r24, 0x01	; 1
 59a:	90 e0       	ldi	r25, 0x00	; 0
 59c:	0e 94 fe 01 	call	0x3fc	; 0x3fc <Analog_digital_sensor>
		Analog_digital_sensor(2,A3,'c');
 5a0:	60 91 0b 01 	lds	r22, 0x010B	; 0x80010b <A3>
 5a4:	70 e0       	ldi	r23, 0x00	; 0
 5a6:	43 e6       	ldi	r20, 0x63	; 99
 5a8:	82 e0       	ldi	r24, 0x02	; 2
 5aa:	90 e0       	ldi	r25, 0x00	; 0
 5ac:	0e 94 fe 01 	call	0x3fc	; 0x3fc <Analog_digital_sensor>
		Analog_digital_sensor(3,A4,'d');
 5b0:	60 91 11 01 	lds	r22, 0x0111	; 0x800111 <A4>
 5b4:	70 e0       	ldi	r23, 0x00	; 0
 5b6:	44 e6       	ldi	r20, 0x64	; 100
 5b8:	83 e0       	ldi	r24, 0x03	; 3
 5ba:	90 e0       	ldi	r25, 0x00	; 0
 5bc:	0e 94 fe 01 	call	0x3fc	; 0x3fc <Analog_digital_sensor>
		//Analog_digital_sensor(4,A5,'e');
		//Analog_digital_sensor(1,A6,'f');
		if(I2C1_addr)
 5c0:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <I2C1_addr>
 5c4:	88 23       	and	r24, r24
 5c6:	49 f0       	breq	.+18     	; 0x5da <__vector_11+0xa0>
		I2C_sensor(I2C1_addr,I2C1_reg,'g');
 5c8:	60 91 0a 01 	lds	r22, 0x010A	; 0x80010a <__data_end>
 5cc:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <I2C1_addr>
 5d0:	70 e0       	ldi	r23, 0x00	; 0
 5d2:	47 e6       	ldi	r20, 0x67	; 103
 5d4:	90 e0       	ldi	r25, 0x00	; 0
 5d6:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <I2C_sensor>
		if(I2C2_addr)
 5da:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <I2C2_addr>
 5de:	88 23       	and	r24, r24
 5e0:	49 f0       	breq	.+18     	; 0x5f4 <__vector_11+0xba>
		I2C_sensor(I2C2_addr,I2C2_reg,'h');
 5e2:	60 91 16 01 	lds	r22, 0x0116	; 0x800116 <I2C2_reg>
 5e6:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <I2C2_addr>
 5ea:	70 e0       	ldi	r23, 0x00	; 0
 5ec:	48 e6       	ldi	r20, 0x68	; 104
 5ee:	90 e0       	ldi	r25, 0x00	; 0
 5f0:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <I2C_sensor>
		serialWrite('x');
 5f4:	88 e7       	ldi	r24, 0x78	; 120
 5f6:	90 e0       	ldi	r25, 0x00	; 0
 5f8:	0e 94 1f 03 	call	0x63e	; 0x63e <serialWrite>
		if(serialRead()){
 5fc:	0e 94 27 03 	call	0x64e	; 0x64e <serialRead>
 600:	88 23       	and	r24, r24
 602:	61 f0       	breq	.+24     	; 0x61c <__vector_11+0xe2>
			session_init();
 604:	0e 94 89 01 	call	0x312	; 0x312 <session_init>
 608:	09 c0       	rjmp	.+18     	; 0x61c <__vector_11+0xe2>
		}
	} 
	else
	{
		count_delay++;
 60a:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <count_delay>
 60e:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <count_delay+0x1>
 612:	01 96       	adiw	r24, 0x01	; 1
 614:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <count_delay+0x1>
 618:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <count_delay>
	}
	
	
}
 61c:	ff 91       	pop	r31
 61e:	ef 91       	pop	r30
 620:	bf 91       	pop	r27
 622:	af 91       	pop	r26
 624:	9f 91       	pop	r25
 626:	8f 91       	pop	r24
 628:	7f 91       	pop	r23
 62a:	6f 91       	pop	r22
 62c:	5f 91       	pop	r21
 62e:	4f 91       	pop	r20
 630:	3f 91       	pop	r19
 632:	2f 91       	pop	r18
 634:	0f 90       	pop	r0
 636:	0f be       	out	0x3f, r0	; 63
 638:	0f 90       	pop	r0
 63a:	1f 90       	pop	r1
 63c:	18 95       	reti

0000063e <serialWrite>:


unsigned char serialCheckRxComplete(void)
{
	return( UCSR0A & _BV(RXC0)) ;  // _BV(x) macro set bit x in a byte which is equivalent to 1<<x. nonzero if serial data is available to read.
}
 63e:	e0 ec       	ldi	r30, 0xC0	; 192
 640:	f0 e0       	ldi	r31, 0x00	; 0
 642:	90 81       	ld	r25, Z
 644:	95 ff       	sbrs	r25, 5
 646:	fd cf       	rjmp	.-6      	; 0x642 <serialWrite+0x4>
 648:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 64c:	08 95       	ret

0000064e <serialRead>:


unsigned char serialRead(void)
{
	while( !(UCSR0A & (1 << RXC0)) )
 64e:	e0 ec       	ldi	r30, 0xC0	; 192
 650:	f0 e0       	ldi	r31, 0x00	; 0
 652:	80 81       	ld	r24, Z
 654:	88 23       	and	r24, r24
 656:	ec f7       	brge	.-6      	; 0x652 <serialRead+0x4>
	;
	return UDR0;
 658:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
}
 65c:	08 95       	ret

0000065e <serial_init>:
void serial_init(unsigned int bittimer)
{
	/* Set the baud rate */
	UBRR0H = (unsigned char) (bittimer >> 8);
 65e:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = (unsigned char) bittimer;
 662:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	/* set the framing to 8N1 (8 data bits + 1 stop bit (default) */
	UCSR0C = (3 << UCSZ00);
 666:	86 e0       	ldi	r24, 0x06	; 6
 668:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	/* Enable receiver and transmitter */
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);
 66c:	88 e1       	ldi	r24, 0x18	; 24
 66e:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 672:	08 95       	ret

00000674 <__fixsfsi>:
 674:	0e 94 41 03 	call	0x682	; 0x682 <__fixunssfsi>
 678:	68 94       	set
 67a:	b1 11       	cpse	r27, r1
 67c:	0c 94 d0 03 	jmp	0x7a0	; 0x7a0 <__fp_szero>
 680:	08 95       	ret

00000682 <__fixunssfsi>:
 682:	0e 94 b5 03 	call	0x76a	; 0x76a <__fp_splitA>
 686:	88 f0       	brcs	.+34     	; 0x6aa <__fixunssfsi+0x28>
 688:	9f 57       	subi	r25, 0x7F	; 127
 68a:	98 f0       	brcs	.+38     	; 0x6b2 <__fixunssfsi+0x30>
 68c:	b9 2f       	mov	r27, r25
 68e:	99 27       	eor	r25, r25
 690:	b7 51       	subi	r27, 0x17	; 23
 692:	b0 f0       	brcs	.+44     	; 0x6c0 <__fixunssfsi+0x3e>
 694:	e1 f0       	breq	.+56     	; 0x6ce <__fixunssfsi+0x4c>
 696:	66 0f       	add	r22, r22
 698:	77 1f       	adc	r23, r23
 69a:	88 1f       	adc	r24, r24
 69c:	99 1f       	adc	r25, r25
 69e:	1a f0       	brmi	.+6      	; 0x6a6 <__fixunssfsi+0x24>
 6a0:	ba 95       	dec	r27
 6a2:	c9 f7       	brne	.-14     	; 0x696 <__fixunssfsi+0x14>
 6a4:	14 c0       	rjmp	.+40     	; 0x6ce <__fixunssfsi+0x4c>
 6a6:	b1 30       	cpi	r27, 0x01	; 1
 6a8:	91 f0       	breq	.+36     	; 0x6ce <__fixunssfsi+0x4c>
 6aa:	0e 94 cf 03 	call	0x79e	; 0x79e <__fp_zero>
 6ae:	b1 e0       	ldi	r27, 0x01	; 1
 6b0:	08 95       	ret
 6b2:	0c 94 cf 03 	jmp	0x79e	; 0x79e <__fp_zero>
 6b6:	67 2f       	mov	r22, r23
 6b8:	78 2f       	mov	r23, r24
 6ba:	88 27       	eor	r24, r24
 6bc:	b8 5f       	subi	r27, 0xF8	; 248
 6be:	39 f0       	breq	.+14     	; 0x6ce <__fixunssfsi+0x4c>
 6c0:	b9 3f       	cpi	r27, 0xF9	; 249
 6c2:	cc f3       	brlt	.-14     	; 0x6b6 <__fixunssfsi+0x34>
 6c4:	86 95       	lsr	r24
 6c6:	77 95       	ror	r23
 6c8:	67 95       	ror	r22
 6ca:	b3 95       	inc	r27
 6cc:	d9 f7       	brne	.-10     	; 0x6c4 <__fixunssfsi+0x42>
 6ce:	3e f4       	brtc	.+14     	; 0x6de <__fixunssfsi+0x5c>
 6d0:	90 95       	com	r25
 6d2:	80 95       	com	r24
 6d4:	70 95       	com	r23
 6d6:	61 95       	neg	r22
 6d8:	7f 4f       	sbci	r23, 0xFF	; 255
 6da:	8f 4f       	sbci	r24, 0xFF	; 255
 6dc:	9f 4f       	sbci	r25, 0xFF	; 255
 6de:	08 95       	ret

000006e0 <__floatunsisf>:
 6e0:	e8 94       	clt
 6e2:	09 c0       	rjmp	.+18     	; 0x6f6 <__floatsisf+0x12>

000006e4 <__floatsisf>:
 6e4:	97 fb       	bst	r25, 7
 6e6:	3e f4       	brtc	.+14     	; 0x6f6 <__floatsisf+0x12>
 6e8:	90 95       	com	r25
 6ea:	80 95       	com	r24
 6ec:	70 95       	com	r23
 6ee:	61 95       	neg	r22
 6f0:	7f 4f       	sbci	r23, 0xFF	; 255
 6f2:	8f 4f       	sbci	r24, 0xFF	; 255
 6f4:	9f 4f       	sbci	r25, 0xFF	; 255
 6f6:	99 23       	and	r25, r25
 6f8:	a9 f0       	breq	.+42     	; 0x724 <__floatsisf+0x40>
 6fa:	f9 2f       	mov	r31, r25
 6fc:	96 e9       	ldi	r25, 0x96	; 150
 6fe:	bb 27       	eor	r27, r27
 700:	93 95       	inc	r25
 702:	f6 95       	lsr	r31
 704:	87 95       	ror	r24
 706:	77 95       	ror	r23
 708:	67 95       	ror	r22
 70a:	b7 95       	ror	r27
 70c:	f1 11       	cpse	r31, r1
 70e:	f8 cf       	rjmp	.-16     	; 0x700 <__floatsisf+0x1c>
 710:	fa f4       	brpl	.+62     	; 0x750 <__floatsisf+0x6c>
 712:	bb 0f       	add	r27, r27
 714:	11 f4       	brne	.+4      	; 0x71a <__floatsisf+0x36>
 716:	60 ff       	sbrs	r22, 0
 718:	1b c0       	rjmp	.+54     	; 0x750 <__floatsisf+0x6c>
 71a:	6f 5f       	subi	r22, 0xFF	; 255
 71c:	7f 4f       	sbci	r23, 0xFF	; 255
 71e:	8f 4f       	sbci	r24, 0xFF	; 255
 720:	9f 4f       	sbci	r25, 0xFF	; 255
 722:	16 c0       	rjmp	.+44     	; 0x750 <__floatsisf+0x6c>
 724:	88 23       	and	r24, r24
 726:	11 f0       	breq	.+4      	; 0x72c <__floatsisf+0x48>
 728:	96 e9       	ldi	r25, 0x96	; 150
 72a:	11 c0       	rjmp	.+34     	; 0x74e <__floatsisf+0x6a>
 72c:	77 23       	and	r23, r23
 72e:	21 f0       	breq	.+8      	; 0x738 <__floatsisf+0x54>
 730:	9e e8       	ldi	r25, 0x8E	; 142
 732:	87 2f       	mov	r24, r23
 734:	76 2f       	mov	r23, r22
 736:	05 c0       	rjmp	.+10     	; 0x742 <__floatsisf+0x5e>
 738:	66 23       	and	r22, r22
 73a:	71 f0       	breq	.+28     	; 0x758 <__floatsisf+0x74>
 73c:	96 e8       	ldi	r25, 0x86	; 134
 73e:	86 2f       	mov	r24, r22
 740:	70 e0       	ldi	r23, 0x00	; 0
 742:	60 e0       	ldi	r22, 0x00	; 0
 744:	2a f0       	brmi	.+10     	; 0x750 <__floatsisf+0x6c>
 746:	9a 95       	dec	r25
 748:	66 0f       	add	r22, r22
 74a:	77 1f       	adc	r23, r23
 74c:	88 1f       	adc	r24, r24
 74e:	da f7       	brpl	.-10     	; 0x746 <__floatsisf+0x62>
 750:	88 0f       	add	r24, r24
 752:	96 95       	lsr	r25
 754:	87 95       	ror	r24
 756:	97 f9       	bld	r25, 7
 758:	08 95       	ret

0000075a <__fp_split3>:
 75a:	57 fd       	sbrc	r21, 7
 75c:	90 58       	subi	r25, 0x80	; 128
 75e:	44 0f       	add	r20, r20
 760:	55 1f       	adc	r21, r21
 762:	59 f0       	breq	.+22     	; 0x77a <__fp_splitA+0x10>
 764:	5f 3f       	cpi	r21, 0xFF	; 255
 766:	71 f0       	breq	.+28     	; 0x784 <__fp_splitA+0x1a>
 768:	47 95       	ror	r20

0000076a <__fp_splitA>:
 76a:	88 0f       	add	r24, r24
 76c:	97 fb       	bst	r25, 7
 76e:	99 1f       	adc	r25, r25
 770:	61 f0       	breq	.+24     	; 0x78a <__fp_splitA+0x20>
 772:	9f 3f       	cpi	r25, 0xFF	; 255
 774:	79 f0       	breq	.+30     	; 0x794 <__fp_splitA+0x2a>
 776:	87 95       	ror	r24
 778:	08 95       	ret
 77a:	12 16       	cp	r1, r18
 77c:	13 06       	cpc	r1, r19
 77e:	14 06       	cpc	r1, r20
 780:	55 1f       	adc	r21, r21
 782:	f2 cf       	rjmp	.-28     	; 0x768 <__fp_split3+0xe>
 784:	46 95       	lsr	r20
 786:	f1 df       	rcall	.-30     	; 0x76a <__fp_splitA>
 788:	08 c0       	rjmp	.+16     	; 0x79a <__fp_splitA+0x30>
 78a:	16 16       	cp	r1, r22
 78c:	17 06       	cpc	r1, r23
 78e:	18 06       	cpc	r1, r24
 790:	99 1f       	adc	r25, r25
 792:	f1 cf       	rjmp	.-30     	; 0x776 <__fp_splitA+0xc>
 794:	86 95       	lsr	r24
 796:	71 05       	cpc	r23, r1
 798:	61 05       	cpc	r22, r1
 79a:	08 94       	sec
 79c:	08 95       	ret

0000079e <__fp_zero>:
 79e:	e8 94       	clt

000007a0 <__fp_szero>:
 7a0:	bb 27       	eor	r27, r27
 7a2:	66 27       	eor	r22, r22
 7a4:	77 27       	eor	r23, r23
 7a6:	cb 01       	movw	r24, r22
 7a8:	97 f9       	bld	r25, 7
 7aa:	08 95       	ret

000007ac <__mulsf3>:
 7ac:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <__mulsf3x>
 7b0:	0c 94 5a 04 	jmp	0x8b4	; 0x8b4 <__fp_round>
 7b4:	0e 94 4c 04 	call	0x898	; 0x898 <__fp_pscA>
 7b8:	38 f0       	brcs	.+14     	; 0x7c8 <__mulsf3+0x1c>
 7ba:	0e 94 53 04 	call	0x8a6	; 0x8a6 <__fp_pscB>
 7be:	20 f0       	brcs	.+8      	; 0x7c8 <__mulsf3+0x1c>
 7c0:	95 23       	and	r25, r21
 7c2:	11 f0       	breq	.+4      	; 0x7c8 <__mulsf3+0x1c>
 7c4:	0c 94 43 04 	jmp	0x886	; 0x886 <__fp_inf>
 7c8:	0c 94 49 04 	jmp	0x892	; 0x892 <__fp_nan>
 7cc:	11 24       	eor	r1, r1
 7ce:	0c 94 d0 03 	jmp	0x7a0	; 0x7a0 <__fp_szero>

000007d2 <__mulsf3x>:
 7d2:	0e 94 ad 03 	call	0x75a	; 0x75a <__fp_split3>
 7d6:	70 f3       	brcs	.-36     	; 0x7b4 <__mulsf3+0x8>

000007d8 <__mulsf3_pse>:
 7d8:	95 9f       	mul	r25, r21
 7da:	c1 f3       	breq	.-16     	; 0x7cc <__mulsf3+0x20>
 7dc:	95 0f       	add	r25, r21
 7de:	50 e0       	ldi	r21, 0x00	; 0
 7e0:	55 1f       	adc	r21, r21
 7e2:	62 9f       	mul	r22, r18
 7e4:	f0 01       	movw	r30, r0
 7e6:	72 9f       	mul	r23, r18
 7e8:	bb 27       	eor	r27, r27
 7ea:	f0 0d       	add	r31, r0
 7ec:	b1 1d       	adc	r27, r1
 7ee:	63 9f       	mul	r22, r19
 7f0:	aa 27       	eor	r26, r26
 7f2:	f0 0d       	add	r31, r0
 7f4:	b1 1d       	adc	r27, r1
 7f6:	aa 1f       	adc	r26, r26
 7f8:	64 9f       	mul	r22, r20
 7fa:	66 27       	eor	r22, r22
 7fc:	b0 0d       	add	r27, r0
 7fe:	a1 1d       	adc	r26, r1
 800:	66 1f       	adc	r22, r22
 802:	82 9f       	mul	r24, r18
 804:	22 27       	eor	r18, r18
 806:	b0 0d       	add	r27, r0
 808:	a1 1d       	adc	r26, r1
 80a:	62 1f       	adc	r22, r18
 80c:	73 9f       	mul	r23, r19
 80e:	b0 0d       	add	r27, r0
 810:	a1 1d       	adc	r26, r1
 812:	62 1f       	adc	r22, r18
 814:	83 9f       	mul	r24, r19
 816:	a0 0d       	add	r26, r0
 818:	61 1d       	adc	r22, r1
 81a:	22 1f       	adc	r18, r18
 81c:	74 9f       	mul	r23, r20
 81e:	33 27       	eor	r19, r19
 820:	a0 0d       	add	r26, r0
 822:	61 1d       	adc	r22, r1
 824:	23 1f       	adc	r18, r19
 826:	84 9f       	mul	r24, r20
 828:	60 0d       	add	r22, r0
 82a:	21 1d       	adc	r18, r1
 82c:	82 2f       	mov	r24, r18
 82e:	76 2f       	mov	r23, r22
 830:	6a 2f       	mov	r22, r26
 832:	11 24       	eor	r1, r1
 834:	9f 57       	subi	r25, 0x7F	; 127
 836:	50 40       	sbci	r21, 0x00	; 0
 838:	9a f0       	brmi	.+38     	; 0x860 <__mulsf3_pse+0x88>
 83a:	f1 f0       	breq	.+60     	; 0x878 <__mulsf3_pse+0xa0>
 83c:	88 23       	and	r24, r24
 83e:	4a f0       	brmi	.+18     	; 0x852 <__mulsf3_pse+0x7a>
 840:	ee 0f       	add	r30, r30
 842:	ff 1f       	adc	r31, r31
 844:	bb 1f       	adc	r27, r27
 846:	66 1f       	adc	r22, r22
 848:	77 1f       	adc	r23, r23
 84a:	88 1f       	adc	r24, r24
 84c:	91 50       	subi	r25, 0x01	; 1
 84e:	50 40       	sbci	r21, 0x00	; 0
 850:	a9 f7       	brne	.-22     	; 0x83c <__mulsf3_pse+0x64>
 852:	9e 3f       	cpi	r25, 0xFE	; 254
 854:	51 05       	cpc	r21, r1
 856:	80 f0       	brcs	.+32     	; 0x878 <__mulsf3_pse+0xa0>
 858:	0c 94 43 04 	jmp	0x886	; 0x886 <__fp_inf>
 85c:	0c 94 d0 03 	jmp	0x7a0	; 0x7a0 <__fp_szero>
 860:	5f 3f       	cpi	r21, 0xFF	; 255
 862:	e4 f3       	brlt	.-8      	; 0x85c <__mulsf3_pse+0x84>
 864:	98 3e       	cpi	r25, 0xE8	; 232
 866:	d4 f3       	brlt	.-12     	; 0x85c <__mulsf3_pse+0x84>
 868:	86 95       	lsr	r24
 86a:	77 95       	ror	r23
 86c:	67 95       	ror	r22
 86e:	b7 95       	ror	r27
 870:	f7 95       	ror	r31
 872:	e7 95       	ror	r30
 874:	9f 5f       	subi	r25, 0xFF	; 255
 876:	c1 f7       	brne	.-16     	; 0x868 <__mulsf3_pse+0x90>
 878:	fe 2b       	or	r31, r30
 87a:	88 0f       	add	r24, r24
 87c:	91 1d       	adc	r25, r1
 87e:	96 95       	lsr	r25
 880:	87 95       	ror	r24
 882:	97 f9       	bld	r25, 7
 884:	08 95       	ret

00000886 <__fp_inf>:
 886:	97 f9       	bld	r25, 7
 888:	9f 67       	ori	r25, 0x7F	; 127
 88a:	80 e8       	ldi	r24, 0x80	; 128
 88c:	70 e0       	ldi	r23, 0x00	; 0
 88e:	60 e0       	ldi	r22, 0x00	; 0
 890:	08 95       	ret

00000892 <__fp_nan>:
 892:	9f ef       	ldi	r25, 0xFF	; 255
 894:	80 ec       	ldi	r24, 0xC0	; 192
 896:	08 95       	ret

00000898 <__fp_pscA>:
 898:	00 24       	eor	r0, r0
 89a:	0a 94       	dec	r0
 89c:	16 16       	cp	r1, r22
 89e:	17 06       	cpc	r1, r23
 8a0:	18 06       	cpc	r1, r24
 8a2:	09 06       	cpc	r0, r25
 8a4:	08 95       	ret

000008a6 <__fp_pscB>:
 8a6:	00 24       	eor	r0, r0
 8a8:	0a 94       	dec	r0
 8aa:	12 16       	cp	r1, r18
 8ac:	13 06       	cpc	r1, r19
 8ae:	14 06       	cpc	r1, r20
 8b0:	05 06       	cpc	r0, r21
 8b2:	08 95       	ret

000008b4 <__fp_round>:
 8b4:	09 2e       	mov	r0, r25
 8b6:	03 94       	inc	r0
 8b8:	00 0c       	add	r0, r0
 8ba:	11 f4       	brne	.+4      	; 0x8c0 <__fp_round+0xc>
 8bc:	88 23       	and	r24, r24
 8be:	52 f0       	brmi	.+20     	; 0x8d4 <__fp_round+0x20>
 8c0:	bb 0f       	add	r27, r27
 8c2:	40 f4       	brcc	.+16     	; 0x8d4 <__fp_round+0x20>
 8c4:	bf 2b       	or	r27, r31
 8c6:	11 f4       	brne	.+4      	; 0x8cc <__fp_round+0x18>
 8c8:	60 ff       	sbrs	r22, 0
 8ca:	04 c0       	rjmp	.+8      	; 0x8d4 <__fp_round+0x20>
 8cc:	6f 5f       	subi	r22, 0xFF	; 255
 8ce:	7f 4f       	sbci	r23, 0xFF	; 255
 8d0:	8f 4f       	sbci	r24, 0xFF	; 255
 8d2:	9f 4f       	sbci	r25, 0xFF	; 255
 8d4:	08 95       	ret

000008d6 <__divmodhi4>:
 8d6:	97 fb       	bst	r25, 7
 8d8:	07 2e       	mov	r0, r23
 8da:	16 f4       	brtc	.+4      	; 0x8e0 <__divmodhi4+0xa>
 8dc:	00 94       	com	r0
 8de:	07 d0       	rcall	.+14     	; 0x8ee <__divmodhi4_neg1>
 8e0:	77 fd       	sbrc	r23, 7
 8e2:	09 d0       	rcall	.+18     	; 0x8f6 <__divmodhi4_neg2>
 8e4:	0e 94 7f 04 	call	0x8fe	; 0x8fe <__udivmodhi4>
 8e8:	07 fc       	sbrc	r0, 7
 8ea:	05 d0       	rcall	.+10     	; 0x8f6 <__divmodhi4_neg2>
 8ec:	3e f4       	brtc	.+14     	; 0x8fc <__divmodhi4_exit>

000008ee <__divmodhi4_neg1>:
 8ee:	90 95       	com	r25
 8f0:	81 95       	neg	r24
 8f2:	9f 4f       	sbci	r25, 0xFF	; 255
 8f4:	08 95       	ret

000008f6 <__divmodhi4_neg2>:
 8f6:	70 95       	com	r23
 8f8:	61 95       	neg	r22
 8fa:	7f 4f       	sbci	r23, 0xFF	; 255

000008fc <__divmodhi4_exit>:
 8fc:	08 95       	ret

000008fe <__udivmodhi4>:
 8fe:	aa 1b       	sub	r26, r26
 900:	bb 1b       	sub	r27, r27
 902:	51 e1       	ldi	r21, 0x11	; 17
 904:	07 c0       	rjmp	.+14     	; 0x914 <__udivmodhi4_ep>

00000906 <__udivmodhi4_loop>:
 906:	aa 1f       	adc	r26, r26
 908:	bb 1f       	adc	r27, r27
 90a:	a6 17       	cp	r26, r22
 90c:	b7 07       	cpc	r27, r23
 90e:	10 f0       	brcs	.+4      	; 0x914 <__udivmodhi4_ep>
 910:	a6 1b       	sub	r26, r22
 912:	b7 0b       	sbc	r27, r23

00000914 <__udivmodhi4_ep>:
 914:	88 1f       	adc	r24, r24
 916:	99 1f       	adc	r25, r25
 918:	5a 95       	dec	r21
 91a:	a9 f7       	brne	.-22     	; 0x906 <__udivmodhi4_loop>
 91c:	80 95       	com	r24
 91e:	90 95       	com	r25
 920:	bc 01       	movw	r22, r24
 922:	cd 01       	movw	r24, r26
 924:	08 95       	ret

00000926 <malloc>:
 926:	0f 93       	push	r16
 928:	1f 93       	push	r17
 92a:	cf 93       	push	r28
 92c:	df 93       	push	r29
 92e:	82 30       	cpi	r24, 0x02	; 2
 930:	91 05       	cpc	r25, r1
 932:	10 f4       	brcc	.+4      	; 0x938 <malloc+0x12>
 934:	82 e0       	ldi	r24, 0x02	; 2
 936:	90 e0       	ldi	r25, 0x00	; 0
 938:	e0 91 1c 01 	lds	r30, 0x011C	; 0x80011c <__flp>
 93c:	f0 91 1d 01 	lds	r31, 0x011D	; 0x80011d <__flp+0x1>
 940:	20 e0       	ldi	r18, 0x00	; 0
 942:	30 e0       	ldi	r19, 0x00	; 0
 944:	a0 e0       	ldi	r26, 0x00	; 0
 946:	b0 e0       	ldi	r27, 0x00	; 0
 948:	30 97       	sbiw	r30, 0x00	; 0
 94a:	19 f1       	breq	.+70     	; 0x992 <malloc+0x6c>
 94c:	40 81       	ld	r20, Z
 94e:	51 81       	ldd	r21, Z+1	; 0x01
 950:	02 81       	ldd	r16, Z+2	; 0x02
 952:	13 81       	ldd	r17, Z+3	; 0x03
 954:	48 17       	cp	r20, r24
 956:	59 07       	cpc	r21, r25
 958:	c8 f0       	brcs	.+50     	; 0x98c <malloc+0x66>
 95a:	84 17       	cp	r24, r20
 95c:	95 07       	cpc	r25, r21
 95e:	69 f4       	brne	.+26     	; 0x97a <malloc+0x54>
 960:	10 97       	sbiw	r26, 0x00	; 0
 962:	31 f0       	breq	.+12     	; 0x970 <malloc+0x4a>
 964:	12 96       	adiw	r26, 0x02	; 2
 966:	0c 93       	st	X, r16
 968:	12 97       	sbiw	r26, 0x02	; 2
 96a:	13 96       	adiw	r26, 0x03	; 3
 96c:	1c 93       	st	X, r17
 96e:	27 c0       	rjmp	.+78     	; 0x9be <malloc+0x98>
 970:	00 93 1c 01 	sts	0x011C, r16	; 0x80011c <__flp>
 974:	10 93 1d 01 	sts	0x011D, r17	; 0x80011d <__flp+0x1>
 978:	22 c0       	rjmp	.+68     	; 0x9be <malloc+0x98>
 97a:	21 15       	cp	r18, r1
 97c:	31 05       	cpc	r19, r1
 97e:	19 f0       	breq	.+6      	; 0x986 <malloc+0x60>
 980:	42 17       	cp	r20, r18
 982:	53 07       	cpc	r21, r19
 984:	18 f4       	brcc	.+6      	; 0x98c <malloc+0x66>
 986:	9a 01       	movw	r18, r20
 988:	bd 01       	movw	r22, r26
 98a:	ef 01       	movw	r28, r30
 98c:	df 01       	movw	r26, r30
 98e:	f8 01       	movw	r30, r16
 990:	db cf       	rjmp	.-74     	; 0x948 <malloc+0x22>
 992:	21 15       	cp	r18, r1
 994:	31 05       	cpc	r19, r1
 996:	f9 f0       	breq	.+62     	; 0x9d6 <malloc+0xb0>
 998:	28 1b       	sub	r18, r24
 99a:	39 0b       	sbc	r19, r25
 99c:	24 30       	cpi	r18, 0x04	; 4
 99e:	31 05       	cpc	r19, r1
 9a0:	80 f4       	brcc	.+32     	; 0x9c2 <malloc+0x9c>
 9a2:	8a 81       	ldd	r24, Y+2	; 0x02
 9a4:	9b 81       	ldd	r25, Y+3	; 0x03
 9a6:	61 15       	cp	r22, r1
 9a8:	71 05       	cpc	r23, r1
 9aa:	21 f0       	breq	.+8      	; 0x9b4 <malloc+0x8e>
 9ac:	fb 01       	movw	r30, r22
 9ae:	93 83       	std	Z+3, r25	; 0x03
 9b0:	82 83       	std	Z+2, r24	; 0x02
 9b2:	04 c0       	rjmp	.+8      	; 0x9bc <malloc+0x96>
 9b4:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <__flp+0x1>
 9b8:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <__flp>
 9bc:	fe 01       	movw	r30, r28
 9be:	32 96       	adiw	r30, 0x02	; 2
 9c0:	44 c0       	rjmp	.+136    	; 0xa4a <malloc+0x124>
 9c2:	fe 01       	movw	r30, r28
 9c4:	e2 0f       	add	r30, r18
 9c6:	f3 1f       	adc	r31, r19
 9c8:	81 93       	st	Z+, r24
 9ca:	91 93       	st	Z+, r25
 9cc:	22 50       	subi	r18, 0x02	; 2
 9ce:	31 09       	sbc	r19, r1
 9d0:	39 83       	std	Y+1, r19	; 0x01
 9d2:	28 83       	st	Y, r18
 9d4:	3a c0       	rjmp	.+116    	; 0xa4a <malloc+0x124>
 9d6:	20 91 1a 01 	lds	r18, 0x011A	; 0x80011a <__brkval>
 9da:	30 91 1b 01 	lds	r19, 0x011B	; 0x80011b <__brkval+0x1>
 9de:	23 2b       	or	r18, r19
 9e0:	41 f4       	brne	.+16     	; 0x9f2 <malloc+0xcc>
 9e2:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
 9e6:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
 9ea:	30 93 1b 01 	sts	0x011B, r19	; 0x80011b <__brkval+0x1>
 9ee:	20 93 1a 01 	sts	0x011A, r18	; 0x80011a <__brkval>
 9f2:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 9f6:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 9fa:	21 15       	cp	r18, r1
 9fc:	31 05       	cpc	r19, r1
 9fe:	41 f4       	brne	.+16     	; 0xa10 <malloc+0xea>
 a00:	2d b7       	in	r18, 0x3d	; 61
 a02:	3e b7       	in	r19, 0x3e	; 62
 a04:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 a08:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 a0c:	24 1b       	sub	r18, r20
 a0e:	35 0b       	sbc	r19, r21
 a10:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <__brkval>
 a14:	f0 91 1b 01 	lds	r31, 0x011B	; 0x80011b <__brkval+0x1>
 a18:	e2 17       	cp	r30, r18
 a1a:	f3 07       	cpc	r31, r19
 a1c:	a0 f4       	brcc	.+40     	; 0xa46 <malloc+0x120>
 a1e:	2e 1b       	sub	r18, r30
 a20:	3f 0b       	sbc	r19, r31
 a22:	28 17       	cp	r18, r24
 a24:	39 07       	cpc	r19, r25
 a26:	78 f0       	brcs	.+30     	; 0xa46 <malloc+0x120>
 a28:	ac 01       	movw	r20, r24
 a2a:	4e 5f       	subi	r20, 0xFE	; 254
 a2c:	5f 4f       	sbci	r21, 0xFF	; 255
 a2e:	24 17       	cp	r18, r20
 a30:	35 07       	cpc	r19, r21
 a32:	48 f0       	brcs	.+18     	; 0xa46 <malloc+0x120>
 a34:	4e 0f       	add	r20, r30
 a36:	5f 1f       	adc	r21, r31
 a38:	50 93 1b 01 	sts	0x011B, r21	; 0x80011b <__brkval+0x1>
 a3c:	40 93 1a 01 	sts	0x011A, r20	; 0x80011a <__brkval>
 a40:	81 93       	st	Z+, r24
 a42:	91 93       	st	Z+, r25
 a44:	02 c0       	rjmp	.+4      	; 0xa4a <malloc+0x124>
 a46:	e0 e0       	ldi	r30, 0x00	; 0
 a48:	f0 e0       	ldi	r31, 0x00	; 0
 a4a:	cf 01       	movw	r24, r30
 a4c:	df 91       	pop	r29
 a4e:	cf 91       	pop	r28
 a50:	1f 91       	pop	r17
 a52:	0f 91       	pop	r16
 a54:	08 95       	ret

00000a56 <free>:
 a56:	cf 93       	push	r28
 a58:	df 93       	push	r29
 a5a:	00 97       	sbiw	r24, 0x00	; 0
 a5c:	09 f4       	brne	.+2      	; 0xa60 <free+0xa>
 a5e:	81 c0       	rjmp	.+258    	; 0xb62 <free+0x10c>
 a60:	fc 01       	movw	r30, r24
 a62:	32 97       	sbiw	r30, 0x02	; 2
 a64:	13 82       	std	Z+3, r1	; 0x03
 a66:	12 82       	std	Z+2, r1	; 0x02
 a68:	a0 91 1c 01 	lds	r26, 0x011C	; 0x80011c <__flp>
 a6c:	b0 91 1d 01 	lds	r27, 0x011D	; 0x80011d <__flp+0x1>
 a70:	10 97       	sbiw	r26, 0x00	; 0
 a72:	81 f4       	brne	.+32     	; 0xa94 <free+0x3e>
 a74:	20 81       	ld	r18, Z
 a76:	31 81       	ldd	r19, Z+1	; 0x01
 a78:	82 0f       	add	r24, r18
 a7a:	93 1f       	adc	r25, r19
 a7c:	20 91 1a 01 	lds	r18, 0x011A	; 0x80011a <__brkval>
 a80:	30 91 1b 01 	lds	r19, 0x011B	; 0x80011b <__brkval+0x1>
 a84:	28 17       	cp	r18, r24
 a86:	39 07       	cpc	r19, r25
 a88:	51 f5       	brne	.+84     	; 0xade <free+0x88>
 a8a:	f0 93 1b 01 	sts	0x011B, r31	; 0x80011b <__brkval+0x1>
 a8e:	e0 93 1a 01 	sts	0x011A, r30	; 0x80011a <__brkval>
 a92:	67 c0       	rjmp	.+206    	; 0xb62 <free+0x10c>
 a94:	ed 01       	movw	r28, r26
 a96:	20 e0       	ldi	r18, 0x00	; 0
 a98:	30 e0       	ldi	r19, 0x00	; 0
 a9a:	ce 17       	cp	r28, r30
 a9c:	df 07       	cpc	r29, r31
 a9e:	40 f4       	brcc	.+16     	; 0xab0 <free+0x5a>
 aa0:	4a 81       	ldd	r20, Y+2	; 0x02
 aa2:	5b 81       	ldd	r21, Y+3	; 0x03
 aa4:	9e 01       	movw	r18, r28
 aa6:	41 15       	cp	r20, r1
 aa8:	51 05       	cpc	r21, r1
 aaa:	f1 f0       	breq	.+60     	; 0xae8 <free+0x92>
 aac:	ea 01       	movw	r28, r20
 aae:	f5 cf       	rjmp	.-22     	; 0xa9a <free+0x44>
 ab0:	d3 83       	std	Z+3, r29	; 0x03
 ab2:	c2 83       	std	Z+2, r28	; 0x02
 ab4:	40 81       	ld	r20, Z
 ab6:	51 81       	ldd	r21, Z+1	; 0x01
 ab8:	84 0f       	add	r24, r20
 aba:	95 1f       	adc	r25, r21
 abc:	c8 17       	cp	r28, r24
 abe:	d9 07       	cpc	r29, r25
 ac0:	59 f4       	brne	.+22     	; 0xad8 <free+0x82>
 ac2:	88 81       	ld	r24, Y
 ac4:	99 81       	ldd	r25, Y+1	; 0x01
 ac6:	84 0f       	add	r24, r20
 ac8:	95 1f       	adc	r25, r21
 aca:	02 96       	adiw	r24, 0x02	; 2
 acc:	91 83       	std	Z+1, r25	; 0x01
 ace:	80 83       	st	Z, r24
 ad0:	8a 81       	ldd	r24, Y+2	; 0x02
 ad2:	9b 81       	ldd	r25, Y+3	; 0x03
 ad4:	93 83       	std	Z+3, r25	; 0x03
 ad6:	82 83       	std	Z+2, r24	; 0x02
 ad8:	21 15       	cp	r18, r1
 ada:	31 05       	cpc	r19, r1
 adc:	29 f4       	brne	.+10     	; 0xae8 <free+0x92>
 ade:	f0 93 1d 01 	sts	0x011D, r31	; 0x80011d <__flp+0x1>
 ae2:	e0 93 1c 01 	sts	0x011C, r30	; 0x80011c <__flp>
 ae6:	3d c0       	rjmp	.+122    	; 0xb62 <free+0x10c>
 ae8:	e9 01       	movw	r28, r18
 aea:	fb 83       	std	Y+3, r31	; 0x03
 aec:	ea 83       	std	Y+2, r30	; 0x02
 aee:	49 91       	ld	r20, Y+
 af0:	59 91       	ld	r21, Y+
 af2:	c4 0f       	add	r28, r20
 af4:	d5 1f       	adc	r29, r21
 af6:	ec 17       	cp	r30, r28
 af8:	fd 07       	cpc	r31, r29
 afa:	61 f4       	brne	.+24     	; 0xb14 <free+0xbe>
 afc:	80 81       	ld	r24, Z
 afe:	91 81       	ldd	r25, Z+1	; 0x01
 b00:	84 0f       	add	r24, r20
 b02:	95 1f       	adc	r25, r21
 b04:	02 96       	adiw	r24, 0x02	; 2
 b06:	e9 01       	movw	r28, r18
 b08:	99 83       	std	Y+1, r25	; 0x01
 b0a:	88 83       	st	Y, r24
 b0c:	82 81       	ldd	r24, Z+2	; 0x02
 b0e:	93 81       	ldd	r25, Z+3	; 0x03
 b10:	9b 83       	std	Y+3, r25	; 0x03
 b12:	8a 83       	std	Y+2, r24	; 0x02
 b14:	e0 e0       	ldi	r30, 0x00	; 0
 b16:	f0 e0       	ldi	r31, 0x00	; 0
 b18:	12 96       	adiw	r26, 0x02	; 2
 b1a:	8d 91       	ld	r24, X+
 b1c:	9c 91       	ld	r25, X
 b1e:	13 97       	sbiw	r26, 0x03	; 3
 b20:	00 97       	sbiw	r24, 0x00	; 0
 b22:	19 f0       	breq	.+6      	; 0xb2a <free+0xd4>
 b24:	fd 01       	movw	r30, r26
 b26:	dc 01       	movw	r26, r24
 b28:	f7 cf       	rjmp	.-18     	; 0xb18 <free+0xc2>
 b2a:	8d 91       	ld	r24, X+
 b2c:	9c 91       	ld	r25, X
 b2e:	11 97       	sbiw	r26, 0x01	; 1
 b30:	9d 01       	movw	r18, r26
 b32:	2e 5f       	subi	r18, 0xFE	; 254
 b34:	3f 4f       	sbci	r19, 0xFF	; 255
 b36:	82 0f       	add	r24, r18
 b38:	93 1f       	adc	r25, r19
 b3a:	20 91 1a 01 	lds	r18, 0x011A	; 0x80011a <__brkval>
 b3e:	30 91 1b 01 	lds	r19, 0x011B	; 0x80011b <__brkval+0x1>
 b42:	28 17       	cp	r18, r24
 b44:	39 07       	cpc	r19, r25
 b46:	69 f4       	brne	.+26     	; 0xb62 <free+0x10c>
 b48:	30 97       	sbiw	r30, 0x00	; 0
 b4a:	29 f4       	brne	.+10     	; 0xb56 <free+0x100>
 b4c:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <__flp+0x1>
 b50:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <__flp>
 b54:	02 c0       	rjmp	.+4      	; 0xb5a <free+0x104>
 b56:	13 82       	std	Z+3, r1	; 0x03
 b58:	12 82       	std	Z+2, r1	; 0x02
 b5a:	b0 93 1b 01 	sts	0x011B, r27	; 0x80011b <__brkval+0x1>
 b5e:	a0 93 1a 01 	sts	0x011A, r26	; 0x80011a <__brkval>
 b62:	df 91       	pop	r29
 b64:	cf 91       	pop	r28
 b66:	08 95       	ret

00000b68 <_exit>:
 b68:	f8 94       	cli

00000b6a <__stop_program>:
 b6a:	ff cf       	rjmp	.-2      	; 0xb6a <__stop_program>
