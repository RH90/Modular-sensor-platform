
Main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  00000af2  00000b86  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000af2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000012  00800106  00800106  00000b8c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b8c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000bbc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000118  00000000  00000000  00000bfc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000013e0  00000000  00000000  00000d14  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a1f  00000000  00000000  000020f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009a1  00000000  00000000  00002b13  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000330  00000000  00000000  000034b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005d0  00000000  00000000  000037e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000e1d  00000000  00000000  00003db4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000130  00000000  00000000  00004bd1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 93 02 	jmp	0x526	; 0x526 <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a6 e0       	ldi	r26, 0x06	; 6
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a8 31       	cpi	r26, 0x18	; 24
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>

00000084 <__do_copy_data>:
  84:	11 e0       	ldi	r17, 0x01	; 1
  86:	a0 e0       	ldi	r26, 0x00	; 0
  88:	b1 e0       	ldi	r27, 0x01	; 1
  8a:	e2 ef       	ldi	r30, 0xF2	; 242
  8c:	fa e0       	ldi	r31, 0x0A	; 10
  8e:	02 c0       	rjmp	.+4      	; 0x94 <__do_copy_data+0x10>
  90:	05 90       	lpm	r0, Z+
  92:	0d 92       	st	X+, r0
  94:	a6 30       	cpi	r26, 0x06	; 6
  96:	b1 07       	cpc	r27, r17
  98:	d9 f7       	brne	.-10     	; 0x90 <__do_copy_data+0xc>
  9a:	0e 94 e7 01 	call	0x3ce	; 0x3ce <main>
  9e:	0c 94 77 05 	jmp	0xaee	; 0xaee <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <i2c_init>:
	data[(length-1)] = i2c_read_nack();
	
	i2c_stop();
	
	return 0;
}
  a6:	8c e0       	ldi	r24, 0x0C	; 12
  a8:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
  ac:	08 95       	ret

000000ae <i2c_start>:
  ae:	ec eb       	ldi	r30, 0xBC	; 188
  b0:	f0 e0       	ldi	r31, 0x00	; 0
  b2:	10 82       	st	Z, r1
  b4:	94 ea       	ldi	r25, 0xA4	; 164
  b6:	90 83       	st	Z, r25
  b8:	90 81       	ld	r25, Z
  ba:	99 23       	and	r25, r25
  bc:	ec f7       	brge	.-6      	; 0xb8 <i2c_start+0xa>
  be:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
  c2:	98 7f       	andi	r25, 0xF8	; 248
  c4:	98 30       	cpi	r25, 0x08	; 8
  c6:	a1 f4       	brne	.+40     	; 0xf0 <i2c_start+0x42>
  c8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
  cc:	84 e8       	ldi	r24, 0x84	; 132
  ce:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
  d2:	ec eb       	ldi	r30, 0xBC	; 188
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	80 81       	ld	r24, Z
  d8:	88 23       	and	r24, r24
  da:	ec f7       	brge	.-6      	; 0xd6 <i2c_start+0x28>
  dc:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
  e0:	98 7f       	andi	r25, 0xF8	; 248
  e2:	98 31       	cpi	r25, 0x18	; 24
  e4:	39 f0       	breq	.+14     	; 0xf4 <i2c_start+0x46>
  e6:	81 e0       	ldi	r24, 0x01	; 1
  e8:	90 34       	cpi	r25, 0x40	; 64
  ea:	29 f4       	brne	.+10     	; 0xf6 <i2c_start+0x48>
  ec:	80 e0       	ldi	r24, 0x00	; 0
  ee:	08 95       	ret
  f0:	81 e0       	ldi	r24, 0x01	; 1
  f2:	08 95       	ret
  f4:	80 e0       	ldi	r24, 0x00	; 0
  f6:	08 95       	ret

000000f8 <i2c_write>:
  f8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
  fc:	84 e8       	ldi	r24, 0x84	; 132
  fe:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 102:	ec eb       	ldi	r30, 0xBC	; 188
 104:	f0 e0       	ldi	r31, 0x00	; 0
 106:	80 81       	ld	r24, Z
 108:	88 23       	and	r24, r24
 10a:	ec f7       	brge	.-6      	; 0x106 <i2c_write+0xe>
 10c:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 110:	98 7f       	andi	r25, 0xF8	; 248
 112:	81 e0       	ldi	r24, 0x01	; 1
 114:	98 32       	cpi	r25, 0x28	; 40
 116:	09 f4       	brne	.+2      	; 0x11a <i2c_write+0x22>
 118:	80 e0       	ldi	r24, 0x00	; 0
 11a:	08 95       	ret

0000011c <i2c_read_ack>:
 11c:	84 ec       	ldi	r24, 0xC4	; 196
 11e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 122:	ec eb       	ldi	r30, 0xBC	; 188
 124:	f0 e0       	ldi	r31, 0x00	; 0
 126:	80 81       	ld	r24, Z
 128:	88 23       	and	r24, r24
 12a:	ec f7       	brge	.-6      	; 0x126 <i2c_read_ack+0xa>
 12c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 130:	08 95       	ret

00000132 <i2c_read_nack>:
 132:	84 e8       	ldi	r24, 0x84	; 132
 134:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 138:	ec eb       	ldi	r30, 0xBC	; 188
 13a:	f0 e0       	ldi	r31, 0x00	; 0
 13c:	80 81       	ld	r24, Z
 13e:	88 23       	and	r24, r24
 140:	ec f7       	brge	.-6      	; 0x13c <i2c_read_nack+0xa>
 142:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 146:	08 95       	ret

00000148 <i2c_writeReg>:

uint8_t i2c_writeReg(uint8_t devaddr, uint8_t regaddr, uint8_t* data, uint16_t length)
{
 148:	cf 92       	push	r12
 14a:	df 92       	push	r13
 14c:	ff 92       	push	r15
 14e:	0f 93       	push	r16
 150:	1f 93       	push	r17
 152:	cf 93       	push	r28
 154:	df 93       	push	r29
 156:	c6 2f       	mov	r28, r22
 158:	6a 01       	movw	r12, r20
 15a:	89 01       	movw	r16, r18
	if (i2c_start(devaddr | 0x00)) return 1;
 15c:	0e 94 57 00 	call	0xae	; 0xae <i2c_start>
 160:	f8 2e       	mov	r15, r24
 162:	81 11       	cpse	r24, r1
 164:	15 c0       	rjmp	.+42     	; 0x190 <i2c_writeReg+0x48>

	i2c_write(regaddr);
 166:	8c 2f       	mov	r24, r28
 168:	0e 94 7c 00 	call	0xf8	; 0xf8 <i2c_write>

	for (uint16_t i = 0; i < length; i++)
 16c:	01 15       	cp	r16, r1
 16e:	11 05       	cpc	r17, r1
 170:	59 f0       	breq	.+22     	; 0x188 <i2c_writeReg+0x40>
 172:	e6 01       	movw	r28, r12
 174:	0c 0d       	add	r16, r12
 176:	1d 1d       	adc	r17, r13
	{
		if (i2c_write(data[i])) return 1;
 178:	89 91       	ld	r24, Y+
 17a:	0e 94 7c 00 	call	0xf8	; 0xf8 <i2c_write>
 17e:	81 11       	cpse	r24, r1
 180:	0a c0       	rjmp	.+20     	; 0x196 <i2c_writeReg+0x4e>
{
	if (i2c_start(devaddr | 0x00)) return 1;

	i2c_write(regaddr);

	for (uint16_t i = 0; i < length; i++)
 182:	c0 17       	cp	r28, r16
 184:	d1 07       	cpc	r29, r17
 186:	c1 f7       	brne	.-16     	; 0x178 <i2c_writeReg+0x30>
}

void i2c_stop(void)
{
	// transmit STOP condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 188:	84 e9       	ldi	r24, 0x94	; 148
 18a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 18e:	05 c0       	rjmp	.+10     	; 0x19a <i2c_writeReg+0x52>
	return 0;
}

uint8_t i2c_writeReg(uint8_t devaddr, uint8_t regaddr, uint8_t* data, uint16_t length)
{
	if (i2c_start(devaddr | 0x00)) return 1;
 190:	ff 24       	eor	r15, r15
 192:	f3 94       	inc	r15
 194:	02 c0       	rjmp	.+4      	; 0x19a <i2c_writeReg+0x52>

	i2c_write(regaddr);

	for (uint16_t i = 0; i < length; i++)
	{
		if (i2c_write(data[i])) return 1;
 196:	ff 24       	eor	r15, r15
 198:	f3 94       	inc	r15
	}

	i2c_stop();

	return 0;
}
 19a:	8f 2d       	mov	r24, r15
 19c:	df 91       	pop	r29
 19e:	cf 91       	pop	r28
 1a0:	1f 91       	pop	r17
 1a2:	0f 91       	pop	r16
 1a4:	ff 90       	pop	r15
 1a6:	df 90       	pop	r13
 1a8:	cf 90       	pop	r12
 1aa:	08 95       	ret

000001ac <i2c_readReg>:

uint8_t i2c_readReg(uint8_t devaddr, uint8_t regaddr, uint8_t* data, uint16_t length)
{
 1ac:	af 92       	push	r10
 1ae:	bf 92       	push	r11
 1b0:	df 92       	push	r13
 1b2:	ef 92       	push	r14
 1b4:	ff 92       	push	r15
 1b6:	0f 93       	push	r16
 1b8:	1f 93       	push	r17
 1ba:	cf 93       	push	r28
 1bc:	df 93       	push	r29
 1be:	18 2f       	mov	r17, r24
 1c0:	06 2f       	mov	r16, r22
 1c2:	5a 01       	movw	r10, r20
 1c4:	e9 01       	movw	r28, r18
	if (i2c_start(devaddr)) return 1;
 1c6:	0e 94 57 00 	call	0xae	; 0xae <i2c_start>
 1ca:	81 11       	cpse	r24, r1
 1cc:	22 c0       	rjmp	.+68     	; 0x212 <i2c_readReg+0x66>

	i2c_write(regaddr);
 1ce:	80 2f       	mov	r24, r16
 1d0:	0e 94 7c 00 	call	0xf8	; 0xf8 <i2c_write>

	if (i2c_start(devaddr | 0x01)) return 1;
 1d4:	81 2f       	mov	r24, r17
 1d6:	81 60       	ori	r24, 0x01	; 1
 1d8:	0e 94 57 00 	call	0xae	; 0xae <i2c_start>
 1dc:	d8 2e       	mov	r13, r24
 1de:	81 11       	cpse	r24, r1
 1e0:	1b c0       	rjmp	.+54     	; 0x218 <i2c_readReg+0x6c>

	for (uint16_t i = 0; i < (length-1); i++)
 1e2:	8e 01       	movw	r16, r28
 1e4:	01 50       	subi	r16, 0x01	; 1
 1e6:	11 09       	sbc	r17, r1
 1e8:	51 f0       	breq	.+20     	; 0x1fe <i2c_readReg+0x52>
 1ea:	e5 01       	movw	r28, r10
 1ec:	75 01       	movw	r14, r10
 1ee:	e0 0e       	add	r14, r16
 1f0:	f1 1e       	adc	r15, r17
	{
		data[i] = i2c_read_ack();
 1f2:	0e 94 8e 00 	call	0x11c	; 0x11c <i2c_read_ack>
 1f6:	89 93       	st	Y+, r24

	i2c_write(regaddr);

	if (i2c_start(devaddr | 0x01)) return 1;

	for (uint16_t i = 0; i < (length-1); i++)
 1f8:	ec 16       	cp	r14, r28
 1fa:	fd 06       	cpc	r15, r29
 1fc:	d1 f7       	brne	.-12     	; 0x1f2 <i2c_readReg+0x46>
	{
		data[i] = i2c_read_ack();
	}
	data[(length-1)] = i2c_read_nack();
 1fe:	e5 01       	movw	r28, r10
 200:	c0 0f       	add	r28, r16
 202:	d1 1f       	adc	r29, r17
 204:	0e 94 99 00 	call	0x132	; 0x132 <i2c_read_nack>
 208:	88 83       	st	Y, r24
}

void i2c_stop(void)
{
	// transmit STOP condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 20a:	84 e9       	ldi	r24, 0x94	; 148
 20c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 210:	05 c0       	rjmp	.+10     	; 0x21c <i2c_readReg+0x70>
	return 0;
}

uint8_t i2c_readReg(uint8_t devaddr, uint8_t regaddr, uint8_t* data, uint16_t length)
{
	if (i2c_start(devaddr)) return 1;
 212:	dd 24       	eor	r13, r13
 214:	d3 94       	inc	r13
 216:	02 c0       	rjmp	.+4      	; 0x21c <i2c_readReg+0x70>

	i2c_write(regaddr);

	if (i2c_start(devaddr | 0x01)) return 1;
 218:	dd 24       	eor	r13, r13
 21a:	d3 94       	inc	r13
	data[(length-1)] = i2c_read_nack();

	i2c_stop();

	return 0;
}
 21c:	8d 2d       	mov	r24, r13
 21e:	df 91       	pop	r29
 220:	cf 91       	pop	r28
 222:	1f 91       	pop	r17
 224:	0f 91       	pop	r16
 226:	ff 90       	pop	r15
 228:	ef 90       	pop	r14
 22a:	df 90       	pop	r13
 22c:	bf 90       	pop	r11
 22e:	af 90       	pop	r10
 230:	08 95       	ret

00000232 <print>:
	print(*dat,id);
	free(dat);
	
}
void SPI_sensor()
{
 232:	df 92       	push	r13
 234:	ef 92       	push	r14
 236:	ff 92       	push	r15
 238:	0f 93       	push	r16
 23a:	1f 93       	push	r17
 23c:	cf 93       	push	r28
 23e:	df 93       	push	r29
 240:	d6 2e       	mov	r13, r22
 242:	ca e0       	ldi	r28, 0x0A	; 10
 244:	d0 e0       	ldi	r29, 0x00	; 0
 246:	0f 2e       	mov	r0, r31
 248:	fa e0       	ldi	r31, 0x0A	; 10
 24a:	ef 2e       	mov	r14, r31
 24c:	f1 2c       	mov	r15, r1
 24e:	f0 2d       	mov	r31, r0
 250:	b7 01       	movw	r22, r14
 252:	0e 94 2e 04 	call	0x85c	; 0x85c <__divmodhi4>
 256:	06 2f       	mov	r16, r22
 258:	17 2f       	mov	r17, r23
 25a:	c0 96       	adiw	r24, 0x30	; 48
 25c:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <serialWrite>
 260:	80 2f       	mov	r24, r16
 262:	91 2f       	mov	r25, r17
 264:	00 97       	sbiw	r24, 0x00	; 0
 266:	11 f0       	breq	.+4      	; 0x26c <print+0x3a>
 268:	21 97       	sbiw	r28, 0x01	; 1
 26a:	91 f7       	brne	.-28     	; 0x250 <print+0x1e>
 26c:	8d 2d       	mov	r24, r13
 26e:	90 e0       	ldi	r25, 0x00	; 0
 270:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <serialWrite>
 274:	df 91       	pop	r29
 276:	cf 91       	pop	r28
 278:	1f 91       	pop	r17
 27a:	0f 91       	pop	r16
 27c:	ff 90       	pop	r15
 27e:	ef 90       	pop	r14
 280:	df 90       	pop	r13
 282:	08 95       	ret

00000284 <adc_init>:
 284:	80 e4       	ldi	r24, 0x40	; 64
 286:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
 28a:	87 e8       	ldi	r24, 0x87	; 135
 28c:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
 290:	08 95       	ret

00000292 <Timer1init>:
 292:	82 e0       	ldi	r24, 0x02	; 2
 294:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 298:	8d e0       	ldi	r24, 0x0D	; 13
 29a:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 29e:	89 e0       	ldi	r24, 0x09	; 9
 2a0:	9d e3       	ldi	r25, 0x3D	; 61
 2a2:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 2a6:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 2aa:	78 94       	sei
 2ac:	08 95       	ret

000002ae <adc_read>:
 2ae:	ec e7       	ldi	r30, 0x7C	; 124
 2b0:	f0 e0       	ldi	r31, 0x00	; 0
 2b2:	90 81       	ld	r25, Z
 2b4:	98 7f       	andi	r25, 0xF8	; 248
 2b6:	87 70       	andi	r24, 0x07	; 7
 2b8:	89 2b       	or	r24, r25
 2ba:	80 83       	st	Z, r24
 2bc:	ea e7       	ldi	r30, 0x7A	; 122
 2be:	f0 e0       	ldi	r31, 0x00	; 0
 2c0:	80 81       	ld	r24, Z
 2c2:	80 64       	ori	r24, 0x40	; 64
 2c4:	80 83       	st	Z, r24
 2c6:	80 81       	ld	r24, Z
 2c8:	86 fd       	sbrc	r24, 6
 2ca:	fd cf       	rjmp	.-6      	; 0x2c6 <adc_read+0x18>
 2cc:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 2d0:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 2d4:	08 95       	ret

000002d6 <I2CW>:
 2d6:	ff 92       	push	r15
 2d8:	0f 93       	push	r16
 2da:	1f 93       	push	r17
 2dc:	cf 93       	push	r28
 2de:	df 93       	push	r29
 2e0:	18 2f       	mov	r17, r24
 2e2:	06 2f       	mov	r16, r22
 2e4:	f4 2e       	mov	r15, r20
 2e6:	81 e0       	ldi	r24, 0x01	; 1
 2e8:	90 e0       	ldi	r25, 0x00	; 0
 2ea:	0e 94 56 04 	call	0x8ac	; 0x8ac <malloc>
 2ee:	ec 01       	movw	r28, r24
 2f0:	2f ef       	ldi	r18, 0xFF	; 255
 2f2:	81 ee       	ldi	r24, 0xE1	; 225
 2f4:	94 e0       	ldi	r25, 0x04	; 4
 2f6:	21 50       	subi	r18, 0x01	; 1
 2f8:	80 40       	sbci	r24, 0x00	; 0
 2fa:	90 40       	sbci	r25, 0x00	; 0
 2fc:	e1 f7       	brne	.-8      	; 0x2f6 <I2CW+0x20>
 2fe:	00 c0       	rjmp	.+0      	; 0x300 <I2CW+0x2a>
 300:	00 00       	nop
 302:	f8 82       	st	Y, r15
 304:	21 e0       	ldi	r18, 0x01	; 1
 306:	30 e0       	ldi	r19, 0x00	; 0
 308:	ae 01       	movw	r20, r28
 30a:	60 2f       	mov	r22, r16
 30c:	81 2f       	mov	r24, r17
 30e:	0e 94 a4 00 	call	0x148	; 0x148 <i2c_writeReg>
 312:	ce 01       	movw	r24, r28
 314:	0e 94 ee 04 	call	0x9dc	; 0x9dc <free>
 318:	df 91       	pop	r29
 31a:	cf 91       	pop	r28
 31c:	1f 91       	pop	r17
 31e:	0f 91       	pop	r16
 320:	ff 90       	pop	r15
 322:	08 95       	ret

00000324 <session_init>:
 324:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <serialRead>
 328:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <A1>
 32c:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <serialRead>
 330:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <A2>
 334:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <serialRead>
 338:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <A3>
 33c:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <serialRead>
 340:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <A4>
 344:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <serialRead>
 348:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <A5>
 34c:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <serialRead>
 350:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <A6>
 354:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <serialRead>
 358:	88 23       	and	r24, r24
 35a:	d1 f0       	breq	.+52     	; 0x390 <session_init+0x6c>
 35c:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <I2C1_addr>
 360:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <serialRead>
 364:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <I2C1_write_reg>
 368:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <serialRead>
 36c:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <I2C1_write_data>
 370:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <I2C1_write_reg>
 374:	88 23       	and	r24, r24
 376:	41 f0       	breq	.+16     	; 0x388 <session_init+0x64>
 378:	40 91 0a 01 	lds	r20, 0x010A	; 0x80010a <I2C1_write_data>
 37c:	60 91 11 01 	lds	r22, 0x0111	; 0x800111 <I2C1_write_reg>
 380:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <I2C1_addr>
 384:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <I2CW>
 388:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <serialRead>
 38c:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end>
 390:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <serialRead>
 394:	88 23       	and	r24, r24
 396:	d1 f0       	breq	.+52     	; 0x3cc <session_init+0xa8>
 398:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <I2C2_addr>
 39c:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <serialRead>
 3a0:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <I2C2_write_reg>
 3a4:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <serialRead>
 3a8:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <I2C2_write_data>
 3ac:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <I2C2_write_reg>
 3b0:	88 23       	and	r24, r24
 3b2:	41 f0       	breq	.+16     	; 0x3c4 <session_init+0xa0>
 3b4:	40 91 0f 01 	lds	r20, 0x010F	; 0x80010f <I2C2_write_data>
 3b8:	60 91 0e 01 	lds	r22, 0x010E	; 0x80010e <I2C2_write_reg>
 3bc:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <I2C2_addr>
 3c0:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <I2CW>
 3c4:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <serialRead>
 3c8:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <I2C2_reg>
 3cc:	08 95       	ret

000003ce <main>:
 3ce:	0e 94 42 01 	call	0x284	; 0x284 <adc_init>
 3d2:	87 e6       	ldi	r24, 0x67	; 103
 3d4:	90 e0       	ldi	r25, 0x00	; 0
 3d6:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <serial_init>
 3da:	0e 94 53 00 	call	0xa6	; 0xa6 <i2c_init>
 3de:	0e 94 92 01 	call	0x324	; 0x324 <session_init>
 3e2:	0e 94 49 01 	call	0x292	; 0x292 <Timer1init>
 3e6:	ff cf       	rjmp	.-2      	; 0x3e6 <main+0x18>

000003e8 <Analog_digital_sensor>:
 3e8:	cf 93       	push	r28
 3ea:	c4 2f       	mov	r28, r20
 3ec:	61 30       	cpi	r22, 0x01	; 1
 3ee:	71 05       	cpc	r23, r1
 3f0:	09 f0       	breq	.+2      	; 0x3f4 <Analog_digital_sensor+0xc>
 3f2:	5f c0       	rjmp	.+190    	; 0x4b2 <__LOCK_REGION_LENGTH__+0xb2>
 3f4:	97 b1       	in	r25, 0x07	; 7
 3f6:	e1 e0       	ldi	r30, 0x01	; 1
 3f8:	f0 e0       	ldi	r31, 0x00	; 0
 3fa:	08 2e       	mov	r0, r24
 3fc:	02 c0       	rjmp	.+4      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 3fe:	ee 0f       	add	r30, r30
 400:	ff 1f       	adc	r31, r31
 402:	0a 94       	dec	r0
 404:	e2 f7       	brpl	.-8      	; 0x3fe <Analog_digital_sensor+0x16>
 406:	9e 2b       	or	r25, r30
 408:	97 b9       	out	0x07, r25	; 7
 40a:	98 b1       	in	r25, 0x08	; 8
 40c:	9e 27       	eor	r25, r30
 40e:	98 b9       	out	0x08, r25	; 8
 410:	4a e0       	ldi	r20, 0x0A	; 10
 412:	4a 95       	dec	r20
 414:	f1 f7       	brne	.-4      	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
 416:	00 c0       	rjmp	.+0      	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
 418:	98 b1       	in	r25, 0x08	; 8
 41a:	9e 2b       	or	r25, r30
 41c:	98 b9       	out	0x08, r25	; 8
 41e:	5a e1       	ldi	r21, 0x1A	; 26
 420:	5a 95       	dec	r21
 422:	f1 f7       	brne	.-4      	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
 424:	00 c0       	rjmp	.+0      	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
 426:	98 b1       	in	r25, 0x08	; 8
 428:	9e 27       	eor	r25, r30
 42a:	98 b9       	out	0x08, r25	; 8
 42c:	97 b1       	in	r25, 0x07	; 7
 42e:	9e 27       	eor	r25, r30
 430:	97 b9       	out	0x07, r25	; 7
 432:	26 b1       	in	r18, 0x06	; 6
 434:	30 e0       	ldi	r19, 0x00	; 0
 436:	08 2e       	mov	r0, r24
 438:	02 c0       	rjmp	.+4      	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
 43a:	35 95       	asr	r19
 43c:	27 95       	ror	r18
 43e:	0a 94       	dec	r0
 440:	e2 f7       	brpl	.-8      	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
 442:	20 fd       	sbrc	r18, 0
 444:	3f c0       	rjmp	.+126    	; 0x4c4 <__LOCK_REGION_LENGTH__+0xc4>
 446:	48 ee       	ldi	r20, 0xE8	; 232
 448:	53 e0       	ldi	r21, 0x03	; 3
 44a:	95 e0       	ldi	r25, 0x05	; 5
 44c:	9a 95       	dec	r25
 44e:	f1 f7       	brne	.-4      	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
 450:	00 00       	nop
 452:	26 b1       	in	r18, 0x06	; 6
 454:	30 e0       	ldi	r19, 0x00	; 0
 456:	2e 23       	and	r18, r30
 458:	3f 23       	and	r19, r31
 45a:	23 2b       	or	r18, r19
 45c:	99 f5       	brne	.+102    	; 0x4c4 <__LOCK_REGION_LENGTH__+0xc4>
 45e:	41 50       	subi	r20, 0x01	; 1
 460:	51 09       	sbc	r21, r1
 462:	99 f7       	brne	.-26     	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
 464:	2f c0       	rjmp	.+94     	; 0x4c4 <__LOCK_REGION_LENGTH__+0xc4>
 466:	60 e0       	ldi	r22, 0x00	; 0
 468:	70 e0       	ldi	r23, 0x00	; 0
 46a:	45 e3       	ldi	r20, 0x35	; 53
 46c:	4a 95       	dec	r20
 46e:	f1 f7       	brne	.-4      	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
 470:	00 00       	nop
 472:	6f 5f       	subi	r22, 0xFF	; 255
 474:	7f 4f       	sbci	r23, 0xFF	; 255
 476:	86 b1       	in	r24, 0x06	; 6
 478:	90 e0       	ldi	r25, 0x00	; 0
 47a:	8e 23       	and	r24, r30
 47c:	9f 23       	and	r25, r31
 47e:	89 2b       	or	r24, r25
 480:	21 f0       	breq	.+8      	; 0x48a <__LOCK_REGION_LENGTH__+0x8a>
 482:	68 3a       	cpi	r22, 0xA8	; 168
 484:	51 e6       	ldi	r21, 0x61	; 97
 486:	75 07       	cpc	r23, r21
 488:	81 f7       	brne	.-32     	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
 48a:	07 2e       	mov	r0, r23
 48c:	00 0c       	add	r0, r0
 48e:	88 0b       	sbc	r24, r24
 490:	99 0b       	sbc	r25, r25
 492:	0e 94 35 03 	call	0x66a	; 0x66a <__floatsisf>
 496:	2e e0       	ldi	r18, 0x0E	; 14
 498:	3d e2       	ldi	r19, 0x2D	; 45
 49a:	42 e3       	ldi	r20, 0x32	; 50
 49c:	5e e3       	ldi	r21, 0x3E	; 62
 49e:	0e 94 99 03 	call	0x732	; 0x732 <__mulsf3>
 4a2:	0e 94 fd 02 	call	0x5fa	; 0x5fa <__fixsfsi>
 4a6:	dc 01       	movw	r26, r24
 4a8:	cb 01       	movw	r24, r22
 4aa:	6c 2f       	mov	r22, r28
 4ac:	0e 94 19 01 	call	0x232	; 0x232 <print>
 4b0:	16 c0       	rjmp	.+44     	; 0x4de <__LOCK_REGION_LENGTH__+0xde>
 4b2:	62 30       	cpi	r22, 0x02	; 2
 4b4:	71 05       	cpc	r23, r1
 4b6:	99 f4       	brne	.+38     	; 0x4de <__LOCK_REGION_LENGTH__+0xde>
 4b8:	0e 94 57 01 	call	0x2ae	; 0x2ae <adc_read>
 4bc:	6c 2f       	mov	r22, r28
 4be:	0e 94 19 01 	call	0x232	; 0x232 <print>
 4c2:	0d c0       	rjmp	.+26     	; 0x4de <__LOCK_REGION_LENGTH__+0xde>
 4c4:	26 b1       	in	r18, 0x06	; 6
 4c6:	30 e0       	ldi	r19, 0x00	; 0
 4c8:	a9 01       	movw	r20, r18
 4ca:	02 c0       	rjmp	.+4      	; 0x4d0 <__LOCK_REGION_LENGTH__+0xd0>
 4cc:	55 95       	asr	r21
 4ce:	47 95       	ror	r20
 4d0:	8a 95       	dec	r24
 4d2:	e2 f7       	brpl	.-8      	; 0x4cc <__LOCK_REGION_LENGTH__+0xcc>
 4d4:	40 fd       	sbrc	r20, 0
 4d6:	c7 cf       	rjmp	.-114    	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
 4d8:	60 e0       	ldi	r22, 0x00	; 0
 4da:	70 e0       	ldi	r23, 0x00	; 0
 4dc:	d6 cf       	rjmp	.-84     	; 0x48a <__LOCK_REGION_LENGTH__+0x8a>
 4de:	cf 91       	pop	r28
 4e0:	08 95       	ret

000004e2 <I2C_sensor>:
 4e2:	ff 92       	push	r15
 4e4:	0f 93       	push	r16
 4e6:	1f 93       	push	r17
 4e8:	cf 93       	push	r28
 4ea:	df 93       	push	r29
 4ec:	08 2f       	mov	r16, r24
 4ee:	f6 2e       	mov	r15, r22
 4f0:	14 2f       	mov	r17, r20
 4f2:	81 e0       	ldi	r24, 0x01	; 1
 4f4:	90 e0       	ldi	r25, 0x00	; 0
 4f6:	0e 94 56 04 	call	0x8ac	; 0x8ac <malloc>
 4fa:	ec 01       	movw	r28, r24
 4fc:	21 e0       	ldi	r18, 0x01	; 1
 4fe:	30 e0       	ldi	r19, 0x00	; 0
 500:	ac 01       	movw	r20, r24
 502:	6f 2d       	mov	r22, r15
 504:	80 2f       	mov	r24, r16
 506:	0e 94 d6 00 	call	0x1ac	; 0x1ac <i2c_readReg>
 50a:	88 81       	ld	r24, Y
 50c:	61 2f       	mov	r22, r17
 50e:	90 e0       	ldi	r25, 0x00	; 0
 510:	0e 94 19 01 	call	0x232	; 0x232 <print>
 514:	ce 01       	movw	r24, r28
 516:	0e 94 ee 04 	call	0x9dc	; 0x9dc <free>
 51a:	df 91       	pop	r29
 51c:	cf 91       	pop	r28
 51e:	1f 91       	pop	r17
 520:	0f 91       	pop	r16
 522:	ff 90       	pop	r15
 524:	08 95       	ret

00000526 <__vector_11>:
}



ISR(TIMER1_COMPA_vect)
{
 526:	1f 92       	push	r1
 528:	0f 92       	push	r0
 52a:	0f b6       	in	r0, 0x3f	; 63
 52c:	0f 92       	push	r0
 52e:	11 24       	eor	r1, r1
 530:	2f 93       	push	r18
 532:	3f 93       	push	r19
 534:	4f 93       	push	r20
 536:	5f 93       	push	r21
 538:	6f 93       	push	r22
 53a:	7f 93       	push	r23
 53c:	8f 93       	push	r24
 53e:	9f 93       	push	r25
 540:	af 93       	push	r26
 542:	bf 93       	push	r27
 544:	ef 93       	push	r30
 546:	ff 93       	push	r31
	
	Analog_digital_sensor(0,A1,'a');
 548:	60 91 12 01 	lds	r22, 0x0112	; 0x800112 <A1>
 54c:	70 e0       	ldi	r23, 0x00	; 0
 54e:	41 e6       	ldi	r20, 0x61	; 97
 550:	80 e0       	ldi	r24, 0x00	; 0
 552:	90 e0       	ldi	r25, 0x00	; 0
 554:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <Analog_digital_sensor>
	Analog_digital_sensor(1,A2,'b');
 558:	60 91 0d 01 	lds	r22, 0x010D	; 0x80010d <A2>
 55c:	70 e0       	ldi	r23, 0x00	; 0
 55e:	42 e6       	ldi	r20, 0x62	; 98
 560:	81 e0       	ldi	r24, 0x01	; 1
 562:	90 e0       	ldi	r25, 0x00	; 0
 564:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <Analog_digital_sensor>
	Analog_digital_sensor(2,A3,'c');
 568:	60 91 07 01 	lds	r22, 0x0107	; 0x800107 <A3>
 56c:	70 e0       	ldi	r23, 0x00	; 0
 56e:	43 e6       	ldi	r20, 0x63	; 99
 570:	82 e0       	ldi	r24, 0x02	; 2
 572:	90 e0       	ldi	r25, 0x00	; 0
 574:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <Analog_digital_sensor>
	Analog_digital_sensor(3,A4,'d');
 578:	60 91 0b 01 	lds	r22, 0x010B	; 0x80010b <A4>
 57c:	70 e0       	ldi	r23, 0x00	; 0
 57e:	44 e6       	ldi	r20, 0x64	; 100
 580:	83 e0       	ldi	r24, 0x03	; 3
 582:	90 e0       	ldi	r25, 0x00	; 0
 584:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <Analog_digital_sensor>
	//Analog_digital_sensor(4,A5,'e');
	//Analog_digital_sensor(1,A6,'f');
	I2C_sensor(I2C1_addr,I2C1_reg,'g');
 588:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <__data_end>
 58c:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <I2C1_addr>
 590:	70 e0       	ldi	r23, 0x00	; 0
 592:	47 e6       	ldi	r20, 0x67	; 103
 594:	90 e0       	ldi	r25, 0x00	; 0
 596:	0e 94 71 02 	call	0x4e2	; 0x4e2 <I2C_sensor>
	//I2C_sensor(I2C2_addr,I2C2_reg,'h');
	serialWrite('x');
 59a:	88 e7       	ldi	r24, 0x78	; 120
 59c:	90 e0       	ldi	r25, 0x00	; 0
 59e:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <serialWrite>
	
	
	
}
 5a2:	ff 91       	pop	r31
 5a4:	ef 91       	pop	r30
 5a6:	bf 91       	pop	r27
 5a8:	af 91       	pop	r26
 5aa:	9f 91       	pop	r25
 5ac:	8f 91       	pop	r24
 5ae:	7f 91       	pop	r23
 5b0:	6f 91       	pop	r22
 5b2:	5f 91       	pop	r21
 5b4:	4f 91       	pop	r20
 5b6:	3f 91       	pop	r19
 5b8:	2f 91       	pop	r18
 5ba:	0f 90       	pop	r0
 5bc:	0f be       	out	0x3f, r0	; 63
 5be:	0f 90       	pop	r0
 5c0:	1f 90       	pop	r1
 5c2:	18 95       	reti

000005c4 <serialWrite>:


unsigned char serialCheckRxComplete(void)
{
	return( UCSR0A & _BV(RXC0)) ;  // _BV(x) macro set bit x in a byte which is equivalent to 1<<x. nonzero if serial data is available to read.
}
 5c4:	e0 ec       	ldi	r30, 0xC0	; 192
 5c6:	f0 e0       	ldi	r31, 0x00	; 0
 5c8:	90 81       	ld	r25, Z
 5ca:	95 ff       	sbrs	r25, 5
 5cc:	fd cf       	rjmp	.-6      	; 0x5c8 <serialWrite+0x4>
 5ce:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 5d2:	08 95       	ret

000005d4 <serialRead>:


unsigned char serialRead(void)
{
	while( !(UCSR0A & (1 << RXC0)) )
 5d4:	e0 ec       	ldi	r30, 0xC0	; 192
 5d6:	f0 e0       	ldi	r31, 0x00	; 0
 5d8:	80 81       	ld	r24, Z
 5da:	88 23       	and	r24, r24
 5dc:	ec f7       	brge	.-6      	; 0x5d8 <serialRead+0x4>
	;
	return UDR0;
 5de:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
}
 5e2:	08 95       	ret

000005e4 <serial_init>:
void serial_init(unsigned int bittimer)
{
	/* Set the baud rate */
	UBRR0H = (unsigned char) (bittimer >> 8);
 5e4:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = (unsigned char) bittimer;
 5e8:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	/* set the framing to 8N1 (8 data bits + 1 stop bit (default) */
	UCSR0C = (3 << UCSZ00);
 5ec:	86 e0       	ldi	r24, 0x06	; 6
 5ee:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	/* Enable receiver and transmitter */
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);
 5f2:	88 e1       	ldi	r24, 0x18	; 24
 5f4:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 5f8:	08 95       	ret

000005fa <__fixsfsi>:
 5fa:	0e 94 04 03 	call	0x608	; 0x608 <__fixunssfsi>
 5fe:	68 94       	set
 600:	b1 11       	cpse	r27, r1
 602:	0c 94 93 03 	jmp	0x726	; 0x726 <__fp_szero>
 606:	08 95       	ret

00000608 <__fixunssfsi>:
 608:	0e 94 78 03 	call	0x6f0	; 0x6f0 <__fp_splitA>
 60c:	88 f0       	brcs	.+34     	; 0x630 <__fixunssfsi+0x28>
 60e:	9f 57       	subi	r25, 0x7F	; 127
 610:	98 f0       	brcs	.+38     	; 0x638 <__fixunssfsi+0x30>
 612:	b9 2f       	mov	r27, r25
 614:	99 27       	eor	r25, r25
 616:	b7 51       	subi	r27, 0x17	; 23
 618:	b0 f0       	brcs	.+44     	; 0x646 <__fixunssfsi+0x3e>
 61a:	e1 f0       	breq	.+56     	; 0x654 <__fixunssfsi+0x4c>
 61c:	66 0f       	add	r22, r22
 61e:	77 1f       	adc	r23, r23
 620:	88 1f       	adc	r24, r24
 622:	99 1f       	adc	r25, r25
 624:	1a f0       	brmi	.+6      	; 0x62c <__fixunssfsi+0x24>
 626:	ba 95       	dec	r27
 628:	c9 f7       	brne	.-14     	; 0x61c <__fixunssfsi+0x14>
 62a:	14 c0       	rjmp	.+40     	; 0x654 <__fixunssfsi+0x4c>
 62c:	b1 30       	cpi	r27, 0x01	; 1
 62e:	91 f0       	breq	.+36     	; 0x654 <__fixunssfsi+0x4c>
 630:	0e 94 92 03 	call	0x724	; 0x724 <__fp_zero>
 634:	b1 e0       	ldi	r27, 0x01	; 1
 636:	08 95       	ret
 638:	0c 94 92 03 	jmp	0x724	; 0x724 <__fp_zero>
 63c:	67 2f       	mov	r22, r23
 63e:	78 2f       	mov	r23, r24
 640:	88 27       	eor	r24, r24
 642:	b8 5f       	subi	r27, 0xF8	; 248
 644:	39 f0       	breq	.+14     	; 0x654 <__fixunssfsi+0x4c>
 646:	b9 3f       	cpi	r27, 0xF9	; 249
 648:	cc f3       	brlt	.-14     	; 0x63c <__fixunssfsi+0x34>
 64a:	86 95       	lsr	r24
 64c:	77 95       	ror	r23
 64e:	67 95       	ror	r22
 650:	b3 95       	inc	r27
 652:	d9 f7       	brne	.-10     	; 0x64a <__fixunssfsi+0x42>
 654:	3e f4       	brtc	.+14     	; 0x664 <__fixunssfsi+0x5c>
 656:	90 95       	com	r25
 658:	80 95       	com	r24
 65a:	70 95       	com	r23
 65c:	61 95       	neg	r22
 65e:	7f 4f       	sbci	r23, 0xFF	; 255
 660:	8f 4f       	sbci	r24, 0xFF	; 255
 662:	9f 4f       	sbci	r25, 0xFF	; 255
 664:	08 95       	ret

00000666 <__floatunsisf>:
 666:	e8 94       	clt
 668:	09 c0       	rjmp	.+18     	; 0x67c <__floatsisf+0x12>

0000066a <__floatsisf>:
 66a:	97 fb       	bst	r25, 7
 66c:	3e f4       	brtc	.+14     	; 0x67c <__floatsisf+0x12>
 66e:	90 95       	com	r25
 670:	80 95       	com	r24
 672:	70 95       	com	r23
 674:	61 95       	neg	r22
 676:	7f 4f       	sbci	r23, 0xFF	; 255
 678:	8f 4f       	sbci	r24, 0xFF	; 255
 67a:	9f 4f       	sbci	r25, 0xFF	; 255
 67c:	99 23       	and	r25, r25
 67e:	a9 f0       	breq	.+42     	; 0x6aa <__floatsisf+0x40>
 680:	f9 2f       	mov	r31, r25
 682:	96 e9       	ldi	r25, 0x96	; 150
 684:	bb 27       	eor	r27, r27
 686:	93 95       	inc	r25
 688:	f6 95       	lsr	r31
 68a:	87 95       	ror	r24
 68c:	77 95       	ror	r23
 68e:	67 95       	ror	r22
 690:	b7 95       	ror	r27
 692:	f1 11       	cpse	r31, r1
 694:	f8 cf       	rjmp	.-16     	; 0x686 <__floatsisf+0x1c>
 696:	fa f4       	brpl	.+62     	; 0x6d6 <__floatsisf+0x6c>
 698:	bb 0f       	add	r27, r27
 69a:	11 f4       	brne	.+4      	; 0x6a0 <__floatsisf+0x36>
 69c:	60 ff       	sbrs	r22, 0
 69e:	1b c0       	rjmp	.+54     	; 0x6d6 <__floatsisf+0x6c>
 6a0:	6f 5f       	subi	r22, 0xFF	; 255
 6a2:	7f 4f       	sbci	r23, 0xFF	; 255
 6a4:	8f 4f       	sbci	r24, 0xFF	; 255
 6a6:	9f 4f       	sbci	r25, 0xFF	; 255
 6a8:	16 c0       	rjmp	.+44     	; 0x6d6 <__floatsisf+0x6c>
 6aa:	88 23       	and	r24, r24
 6ac:	11 f0       	breq	.+4      	; 0x6b2 <__floatsisf+0x48>
 6ae:	96 e9       	ldi	r25, 0x96	; 150
 6b0:	11 c0       	rjmp	.+34     	; 0x6d4 <__floatsisf+0x6a>
 6b2:	77 23       	and	r23, r23
 6b4:	21 f0       	breq	.+8      	; 0x6be <__floatsisf+0x54>
 6b6:	9e e8       	ldi	r25, 0x8E	; 142
 6b8:	87 2f       	mov	r24, r23
 6ba:	76 2f       	mov	r23, r22
 6bc:	05 c0       	rjmp	.+10     	; 0x6c8 <__floatsisf+0x5e>
 6be:	66 23       	and	r22, r22
 6c0:	71 f0       	breq	.+28     	; 0x6de <__floatsisf+0x74>
 6c2:	96 e8       	ldi	r25, 0x86	; 134
 6c4:	86 2f       	mov	r24, r22
 6c6:	70 e0       	ldi	r23, 0x00	; 0
 6c8:	60 e0       	ldi	r22, 0x00	; 0
 6ca:	2a f0       	brmi	.+10     	; 0x6d6 <__floatsisf+0x6c>
 6cc:	9a 95       	dec	r25
 6ce:	66 0f       	add	r22, r22
 6d0:	77 1f       	adc	r23, r23
 6d2:	88 1f       	adc	r24, r24
 6d4:	da f7       	brpl	.-10     	; 0x6cc <__floatsisf+0x62>
 6d6:	88 0f       	add	r24, r24
 6d8:	96 95       	lsr	r25
 6da:	87 95       	ror	r24
 6dc:	97 f9       	bld	r25, 7
 6de:	08 95       	ret

000006e0 <__fp_split3>:
 6e0:	57 fd       	sbrc	r21, 7
 6e2:	90 58       	subi	r25, 0x80	; 128
 6e4:	44 0f       	add	r20, r20
 6e6:	55 1f       	adc	r21, r21
 6e8:	59 f0       	breq	.+22     	; 0x700 <__fp_splitA+0x10>
 6ea:	5f 3f       	cpi	r21, 0xFF	; 255
 6ec:	71 f0       	breq	.+28     	; 0x70a <__fp_splitA+0x1a>
 6ee:	47 95       	ror	r20

000006f0 <__fp_splitA>:
 6f0:	88 0f       	add	r24, r24
 6f2:	97 fb       	bst	r25, 7
 6f4:	99 1f       	adc	r25, r25
 6f6:	61 f0       	breq	.+24     	; 0x710 <__fp_splitA+0x20>
 6f8:	9f 3f       	cpi	r25, 0xFF	; 255
 6fa:	79 f0       	breq	.+30     	; 0x71a <__fp_splitA+0x2a>
 6fc:	87 95       	ror	r24
 6fe:	08 95       	ret
 700:	12 16       	cp	r1, r18
 702:	13 06       	cpc	r1, r19
 704:	14 06       	cpc	r1, r20
 706:	55 1f       	adc	r21, r21
 708:	f2 cf       	rjmp	.-28     	; 0x6ee <__fp_split3+0xe>
 70a:	46 95       	lsr	r20
 70c:	f1 df       	rcall	.-30     	; 0x6f0 <__fp_splitA>
 70e:	08 c0       	rjmp	.+16     	; 0x720 <__fp_splitA+0x30>
 710:	16 16       	cp	r1, r22
 712:	17 06       	cpc	r1, r23
 714:	18 06       	cpc	r1, r24
 716:	99 1f       	adc	r25, r25
 718:	f1 cf       	rjmp	.-30     	; 0x6fc <__fp_splitA+0xc>
 71a:	86 95       	lsr	r24
 71c:	71 05       	cpc	r23, r1
 71e:	61 05       	cpc	r22, r1
 720:	08 94       	sec
 722:	08 95       	ret

00000724 <__fp_zero>:
 724:	e8 94       	clt

00000726 <__fp_szero>:
 726:	bb 27       	eor	r27, r27
 728:	66 27       	eor	r22, r22
 72a:	77 27       	eor	r23, r23
 72c:	cb 01       	movw	r24, r22
 72e:	97 f9       	bld	r25, 7
 730:	08 95       	ret

00000732 <__mulsf3>:
 732:	0e 94 ac 03 	call	0x758	; 0x758 <__mulsf3x>
 736:	0c 94 1d 04 	jmp	0x83a	; 0x83a <__fp_round>
 73a:	0e 94 0f 04 	call	0x81e	; 0x81e <__fp_pscA>
 73e:	38 f0       	brcs	.+14     	; 0x74e <__mulsf3+0x1c>
 740:	0e 94 16 04 	call	0x82c	; 0x82c <__fp_pscB>
 744:	20 f0       	brcs	.+8      	; 0x74e <__mulsf3+0x1c>
 746:	95 23       	and	r25, r21
 748:	11 f0       	breq	.+4      	; 0x74e <__mulsf3+0x1c>
 74a:	0c 94 06 04 	jmp	0x80c	; 0x80c <__fp_inf>
 74e:	0c 94 0c 04 	jmp	0x818	; 0x818 <__fp_nan>
 752:	11 24       	eor	r1, r1
 754:	0c 94 93 03 	jmp	0x726	; 0x726 <__fp_szero>

00000758 <__mulsf3x>:
 758:	0e 94 70 03 	call	0x6e0	; 0x6e0 <__fp_split3>
 75c:	70 f3       	brcs	.-36     	; 0x73a <__mulsf3+0x8>

0000075e <__mulsf3_pse>:
 75e:	95 9f       	mul	r25, r21
 760:	c1 f3       	breq	.-16     	; 0x752 <__mulsf3+0x20>
 762:	95 0f       	add	r25, r21
 764:	50 e0       	ldi	r21, 0x00	; 0
 766:	55 1f       	adc	r21, r21
 768:	62 9f       	mul	r22, r18
 76a:	f0 01       	movw	r30, r0
 76c:	72 9f       	mul	r23, r18
 76e:	bb 27       	eor	r27, r27
 770:	f0 0d       	add	r31, r0
 772:	b1 1d       	adc	r27, r1
 774:	63 9f       	mul	r22, r19
 776:	aa 27       	eor	r26, r26
 778:	f0 0d       	add	r31, r0
 77a:	b1 1d       	adc	r27, r1
 77c:	aa 1f       	adc	r26, r26
 77e:	64 9f       	mul	r22, r20
 780:	66 27       	eor	r22, r22
 782:	b0 0d       	add	r27, r0
 784:	a1 1d       	adc	r26, r1
 786:	66 1f       	adc	r22, r22
 788:	82 9f       	mul	r24, r18
 78a:	22 27       	eor	r18, r18
 78c:	b0 0d       	add	r27, r0
 78e:	a1 1d       	adc	r26, r1
 790:	62 1f       	adc	r22, r18
 792:	73 9f       	mul	r23, r19
 794:	b0 0d       	add	r27, r0
 796:	a1 1d       	adc	r26, r1
 798:	62 1f       	adc	r22, r18
 79a:	83 9f       	mul	r24, r19
 79c:	a0 0d       	add	r26, r0
 79e:	61 1d       	adc	r22, r1
 7a0:	22 1f       	adc	r18, r18
 7a2:	74 9f       	mul	r23, r20
 7a4:	33 27       	eor	r19, r19
 7a6:	a0 0d       	add	r26, r0
 7a8:	61 1d       	adc	r22, r1
 7aa:	23 1f       	adc	r18, r19
 7ac:	84 9f       	mul	r24, r20
 7ae:	60 0d       	add	r22, r0
 7b0:	21 1d       	adc	r18, r1
 7b2:	82 2f       	mov	r24, r18
 7b4:	76 2f       	mov	r23, r22
 7b6:	6a 2f       	mov	r22, r26
 7b8:	11 24       	eor	r1, r1
 7ba:	9f 57       	subi	r25, 0x7F	; 127
 7bc:	50 40       	sbci	r21, 0x00	; 0
 7be:	9a f0       	brmi	.+38     	; 0x7e6 <__mulsf3_pse+0x88>
 7c0:	f1 f0       	breq	.+60     	; 0x7fe <__mulsf3_pse+0xa0>
 7c2:	88 23       	and	r24, r24
 7c4:	4a f0       	brmi	.+18     	; 0x7d8 <__mulsf3_pse+0x7a>
 7c6:	ee 0f       	add	r30, r30
 7c8:	ff 1f       	adc	r31, r31
 7ca:	bb 1f       	adc	r27, r27
 7cc:	66 1f       	adc	r22, r22
 7ce:	77 1f       	adc	r23, r23
 7d0:	88 1f       	adc	r24, r24
 7d2:	91 50       	subi	r25, 0x01	; 1
 7d4:	50 40       	sbci	r21, 0x00	; 0
 7d6:	a9 f7       	brne	.-22     	; 0x7c2 <__mulsf3_pse+0x64>
 7d8:	9e 3f       	cpi	r25, 0xFE	; 254
 7da:	51 05       	cpc	r21, r1
 7dc:	80 f0       	brcs	.+32     	; 0x7fe <__mulsf3_pse+0xa0>
 7de:	0c 94 06 04 	jmp	0x80c	; 0x80c <__fp_inf>
 7e2:	0c 94 93 03 	jmp	0x726	; 0x726 <__fp_szero>
 7e6:	5f 3f       	cpi	r21, 0xFF	; 255
 7e8:	e4 f3       	brlt	.-8      	; 0x7e2 <__mulsf3_pse+0x84>
 7ea:	98 3e       	cpi	r25, 0xE8	; 232
 7ec:	d4 f3       	brlt	.-12     	; 0x7e2 <__mulsf3_pse+0x84>
 7ee:	86 95       	lsr	r24
 7f0:	77 95       	ror	r23
 7f2:	67 95       	ror	r22
 7f4:	b7 95       	ror	r27
 7f6:	f7 95       	ror	r31
 7f8:	e7 95       	ror	r30
 7fa:	9f 5f       	subi	r25, 0xFF	; 255
 7fc:	c1 f7       	brne	.-16     	; 0x7ee <__mulsf3_pse+0x90>
 7fe:	fe 2b       	or	r31, r30
 800:	88 0f       	add	r24, r24
 802:	91 1d       	adc	r25, r1
 804:	96 95       	lsr	r25
 806:	87 95       	ror	r24
 808:	97 f9       	bld	r25, 7
 80a:	08 95       	ret

0000080c <__fp_inf>:
 80c:	97 f9       	bld	r25, 7
 80e:	9f 67       	ori	r25, 0x7F	; 127
 810:	80 e8       	ldi	r24, 0x80	; 128
 812:	70 e0       	ldi	r23, 0x00	; 0
 814:	60 e0       	ldi	r22, 0x00	; 0
 816:	08 95       	ret

00000818 <__fp_nan>:
 818:	9f ef       	ldi	r25, 0xFF	; 255
 81a:	80 ec       	ldi	r24, 0xC0	; 192
 81c:	08 95       	ret

0000081e <__fp_pscA>:
 81e:	00 24       	eor	r0, r0
 820:	0a 94       	dec	r0
 822:	16 16       	cp	r1, r22
 824:	17 06       	cpc	r1, r23
 826:	18 06       	cpc	r1, r24
 828:	09 06       	cpc	r0, r25
 82a:	08 95       	ret

0000082c <__fp_pscB>:
 82c:	00 24       	eor	r0, r0
 82e:	0a 94       	dec	r0
 830:	12 16       	cp	r1, r18
 832:	13 06       	cpc	r1, r19
 834:	14 06       	cpc	r1, r20
 836:	05 06       	cpc	r0, r21
 838:	08 95       	ret

0000083a <__fp_round>:
 83a:	09 2e       	mov	r0, r25
 83c:	03 94       	inc	r0
 83e:	00 0c       	add	r0, r0
 840:	11 f4       	brne	.+4      	; 0x846 <__fp_round+0xc>
 842:	88 23       	and	r24, r24
 844:	52 f0       	brmi	.+20     	; 0x85a <__fp_round+0x20>
 846:	bb 0f       	add	r27, r27
 848:	40 f4       	brcc	.+16     	; 0x85a <__fp_round+0x20>
 84a:	bf 2b       	or	r27, r31
 84c:	11 f4       	brne	.+4      	; 0x852 <__fp_round+0x18>
 84e:	60 ff       	sbrs	r22, 0
 850:	04 c0       	rjmp	.+8      	; 0x85a <__fp_round+0x20>
 852:	6f 5f       	subi	r22, 0xFF	; 255
 854:	7f 4f       	sbci	r23, 0xFF	; 255
 856:	8f 4f       	sbci	r24, 0xFF	; 255
 858:	9f 4f       	sbci	r25, 0xFF	; 255
 85a:	08 95       	ret

0000085c <__divmodhi4>:
 85c:	97 fb       	bst	r25, 7
 85e:	07 2e       	mov	r0, r23
 860:	16 f4       	brtc	.+4      	; 0x866 <__divmodhi4+0xa>
 862:	00 94       	com	r0
 864:	07 d0       	rcall	.+14     	; 0x874 <__divmodhi4_neg1>
 866:	77 fd       	sbrc	r23, 7
 868:	09 d0       	rcall	.+18     	; 0x87c <__divmodhi4_neg2>
 86a:	0e 94 42 04 	call	0x884	; 0x884 <__udivmodhi4>
 86e:	07 fc       	sbrc	r0, 7
 870:	05 d0       	rcall	.+10     	; 0x87c <__divmodhi4_neg2>
 872:	3e f4       	brtc	.+14     	; 0x882 <__divmodhi4_exit>

00000874 <__divmodhi4_neg1>:
 874:	90 95       	com	r25
 876:	81 95       	neg	r24
 878:	9f 4f       	sbci	r25, 0xFF	; 255
 87a:	08 95       	ret

0000087c <__divmodhi4_neg2>:
 87c:	70 95       	com	r23
 87e:	61 95       	neg	r22
 880:	7f 4f       	sbci	r23, 0xFF	; 255

00000882 <__divmodhi4_exit>:
 882:	08 95       	ret

00000884 <__udivmodhi4>:
 884:	aa 1b       	sub	r26, r26
 886:	bb 1b       	sub	r27, r27
 888:	51 e1       	ldi	r21, 0x11	; 17
 88a:	07 c0       	rjmp	.+14     	; 0x89a <__udivmodhi4_ep>

0000088c <__udivmodhi4_loop>:
 88c:	aa 1f       	adc	r26, r26
 88e:	bb 1f       	adc	r27, r27
 890:	a6 17       	cp	r26, r22
 892:	b7 07       	cpc	r27, r23
 894:	10 f0       	brcs	.+4      	; 0x89a <__udivmodhi4_ep>
 896:	a6 1b       	sub	r26, r22
 898:	b7 0b       	sbc	r27, r23

0000089a <__udivmodhi4_ep>:
 89a:	88 1f       	adc	r24, r24
 89c:	99 1f       	adc	r25, r25
 89e:	5a 95       	dec	r21
 8a0:	a9 f7       	brne	.-22     	; 0x88c <__udivmodhi4_loop>
 8a2:	80 95       	com	r24
 8a4:	90 95       	com	r25
 8a6:	bc 01       	movw	r22, r24
 8a8:	cd 01       	movw	r24, r26
 8aa:	08 95       	ret

000008ac <malloc>:
 8ac:	0f 93       	push	r16
 8ae:	1f 93       	push	r17
 8b0:	cf 93       	push	r28
 8b2:	df 93       	push	r29
 8b4:	82 30       	cpi	r24, 0x02	; 2
 8b6:	91 05       	cpc	r25, r1
 8b8:	10 f4       	brcc	.+4      	; 0x8be <malloc+0x12>
 8ba:	82 e0       	ldi	r24, 0x02	; 2
 8bc:	90 e0       	ldi	r25, 0x00	; 0
 8be:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <__flp>
 8c2:	f0 91 17 01 	lds	r31, 0x0117	; 0x800117 <__flp+0x1>
 8c6:	20 e0       	ldi	r18, 0x00	; 0
 8c8:	30 e0       	ldi	r19, 0x00	; 0
 8ca:	a0 e0       	ldi	r26, 0x00	; 0
 8cc:	b0 e0       	ldi	r27, 0x00	; 0
 8ce:	30 97       	sbiw	r30, 0x00	; 0
 8d0:	19 f1       	breq	.+70     	; 0x918 <__stack+0x19>
 8d2:	40 81       	ld	r20, Z
 8d4:	51 81       	ldd	r21, Z+1	; 0x01
 8d6:	02 81       	ldd	r16, Z+2	; 0x02
 8d8:	13 81       	ldd	r17, Z+3	; 0x03
 8da:	48 17       	cp	r20, r24
 8dc:	59 07       	cpc	r21, r25
 8de:	c8 f0       	brcs	.+50     	; 0x912 <__stack+0x13>
 8e0:	84 17       	cp	r24, r20
 8e2:	95 07       	cpc	r25, r21
 8e4:	69 f4       	brne	.+26     	; 0x900 <__stack+0x1>
 8e6:	10 97       	sbiw	r26, 0x00	; 0
 8e8:	31 f0       	breq	.+12     	; 0x8f6 <malloc+0x4a>
 8ea:	12 96       	adiw	r26, 0x02	; 2
 8ec:	0c 93       	st	X, r16
 8ee:	12 97       	sbiw	r26, 0x02	; 2
 8f0:	13 96       	adiw	r26, 0x03	; 3
 8f2:	1c 93       	st	X, r17
 8f4:	27 c0       	rjmp	.+78     	; 0x944 <__stack+0x45>
 8f6:	00 93 16 01 	sts	0x0116, r16	; 0x800116 <__flp>
 8fa:	10 93 17 01 	sts	0x0117, r17	; 0x800117 <__flp+0x1>
 8fe:	22 c0       	rjmp	.+68     	; 0x944 <__stack+0x45>
 900:	21 15       	cp	r18, r1
 902:	31 05       	cpc	r19, r1
 904:	19 f0       	breq	.+6      	; 0x90c <__stack+0xd>
 906:	42 17       	cp	r20, r18
 908:	53 07       	cpc	r21, r19
 90a:	18 f4       	brcc	.+6      	; 0x912 <__stack+0x13>
 90c:	9a 01       	movw	r18, r20
 90e:	bd 01       	movw	r22, r26
 910:	ef 01       	movw	r28, r30
 912:	df 01       	movw	r26, r30
 914:	f8 01       	movw	r30, r16
 916:	db cf       	rjmp	.-74     	; 0x8ce <malloc+0x22>
 918:	21 15       	cp	r18, r1
 91a:	31 05       	cpc	r19, r1
 91c:	f9 f0       	breq	.+62     	; 0x95c <__stack+0x5d>
 91e:	28 1b       	sub	r18, r24
 920:	39 0b       	sbc	r19, r25
 922:	24 30       	cpi	r18, 0x04	; 4
 924:	31 05       	cpc	r19, r1
 926:	80 f4       	brcc	.+32     	; 0x948 <__stack+0x49>
 928:	8a 81       	ldd	r24, Y+2	; 0x02
 92a:	9b 81       	ldd	r25, Y+3	; 0x03
 92c:	61 15       	cp	r22, r1
 92e:	71 05       	cpc	r23, r1
 930:	21 f0       	breq	.+8      	; 0x93a <__stack+0x3b>
 932:	fb 01       	movw	r30, r22
 934:	93 83       	std	Z+3, r25	; 0x03
 936:	82 83       	std	Z+2, r24	; 0x02
 938:	04 c0       	rjmp	.+8      	; 0x942 <__stack+0x43>
 93a:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <__flp+0x1>
 93e:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <__flp>
 942:	fe 01       	movw	r30, r28
 944:	32 96       	adiw	r30, 0x02	; 2
 946:	44 c0       	rjmp	.+136    	; 0x9d0 <__stack+0xd1>
 948:	fe 01       	movw	r30, r28
 94a:	e2 0f       	add	r30, r18
 94c:	f3 1f       	adc	r31, r19
 94e:	81 93       	st	Z+, r24
 950:	91 93       	st	Z+, r25
 952:	22 50       	subi	r18, 0x02	; 2
 954:	31 09       	sbc	r19, r1
 956:	39 83       	std	Y+1, r19	; 0x01
 958:	28 83       	st	Y, r18
 95a:	3a c0       	rjmp	.+116    	; 0x9d0 <__stack+0xd1>
 95c:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <__brkval>
 960:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <__brkval+0x1>
 964:	23 2b       	or	r18, r19
 966:	41 f4       	brne	.+16     	; 0x978 <__stack+0x79>
 968:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
 96c:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
 970:	30 93 15 01 	sts	0x0115, r19	; 0x800115 <__brkval+0x1>
 974:	20 93 14 01 	sts	0x0114, r18	; 0x800114 <__brkval>
 978:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 97c:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 980:	21 15       	cp	r18, r1
 982:	31 05       	cpc	r19, r1
 984:	41 f4       	brne	.+16     	; 0x996 <__stack+0x97>
 986:	2d b7       	in	r18, 0x3d	; 61
 988:	3e b7       	in	r19, 0x3e	; 62
 98a:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 98e:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 992:	24 1b       	sub	r18, r20
 994:	35 0b       	sbc	r19, r21
 996:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <__brkval>
 99a:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <__brkval+0x1>
 99e:	e2 17       	cp	r30, r18
 9a0:	f3 07       	cpc	r31, r19
 9a2:	a0 f4       	brcc	.+40     	; 0x9cc <__stack+0xcd>
 9a4:	2e 1b       	sub	r18, r30
 9a6:	3f 0b       	sbc	r19, r31
 9a8:	28 17       	cp	r18, r24
 9aa:	39 07       	cpc	r19, r25
 9ac:	78 f0       	brcs	.+30     	; 0x9cc <__stack+0xcd>
 9ae:	ac 01       	movw	r20, r24
 9b0:	4e 5f       	subi	r20, 0xFE	; 254
 9b2:	5f 4f       	sbci	r21, 0xFF	; 255
 9b4:	24 17       	cp	r18, r20
 9b6:	35 07       	cpc	r19, r21
 9b8:	48 f0       	brcs	.+18     	; 0x9cc <__stack+0xcd>
 9ba:	4e 0f       	add	r20, r30
 9bc:	5f 1f       	adc	r21, r31
 9be:	50 93 15 01 	sts	0x0115, r21	; 0x800115 <__brkval+0x1>
 9c2:	40 93 14 01 	sts	0x0114, r20	; 0x800114 <__brkval>
 9c6:	81 93       	st	Z+, r24
 9c8:	91 93       	st	Z+, r25
 9ca:	02 c0       	rjmp	.+4      	; 0x9d0 <__stack+0xd1>
 9cc:	e0 e0       	ldi	r30, 0x00	; 0
 9ce:	f0 e0       	ldi	r31, 0x00	; 0
 9d0:	cf 01       	movw	r24, r30
 9d2:	df 91       	pop	r29
 9d4:	cf 91       	pop	r28
 9d6:	1f 91       	pop	r17
 9d8:	0f 91       	pop	r16
 9da:	08 95       	ret

000009dc <free>:
 9dc:	cf 93       	push	r28
 9de:	df 93       	push	r29
 9e0:	00 97       	sbiw	r24, 0x00	; 0
 9e2:	09 f4       	brne	.+2      	; 0x9e6 <free+0xa>
 9e4:	81 c0       	rjmp	.+258    	; 0xae8 <free+0x10c>
 9e6:	fc 01       	movw	r30, r24
 9e8:	32 97       	sbiw	r30, 0x02	; 2
 9ea:	13 82       	std	Z+3, r1	; 0x03
 9ec:	12 82       	std	Z+2, r1	; 0x02
 9ee:	a0 91 16 01 	lds	r26, 0x0116	; 0x800116 <__flp>
 9f2:	b0 91 17 01 	lds	r27, 0x0117	; 0x800117 <__flp+0x1>
 9f6:	10 97       	sbiw	r26, 0x00	; 0
 9f8:	81 f4       	brne	.+32     	; 0xa1a <free+0x3e>
 9fa:	20 81       	ld	r18, Z
 9fc:	31 81       	ldd	r19, Z+1	; 0x01
 9fe:	82 0f       	add	r24, r18
 a00:	93 1f       	adc	r25, r19
 a02:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <__brkval>
 a06:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <__brkval+0x1>
 a0a:	28 17       	cp	r18, r24
 a0c:	39 07       	cpc	r19, r25
 a0e:	51 f5       	brne	.+84     	; 0xa64 <free+0x88>
 a10:	f0 93 15 01 	sts	0x0115, r31	; 0x800115 <__brkval+0x1>
 a14:	e0 93 14 01 	sts	0x0114, r30	; 0x800114 <__brkval>
 a18:	67 c0       	rjmp	.+206    	; 0xae8 <free+0x10c>
 a1a:	ed 01       	movw	r28, r26
 a1c:	20 e0       	ldi	r18, 0x00	; 0
 a1e:	30 e0       	ldi	r19, 0x00	; 0
 a20:	ce 17       	cp	r28, r30
 a22:	df 07       	cpc	r29, r31
 a24:	40 f4       	brcc	.+16     	; 0xa36 <free+0x5a>
 a26:	4a 81       	ldd	r20, Y+2	; 0x02
 a28:	5b 81       	ldd	r21, Y+3	; 0x03
 a2a:	9e 01       	movw	r18, r28
 a2c:	41 15       	cp	r20, r1
 a2e:	51 05       	cpc	r21, r1
 a30:	f1 f0       	breq	.+60     	; 0xa6e <free+0x92>
 a32:	ea 01       	movw	r28, r20
 a34:	f5 cf       	rjmp	.-22     	; 0xa20 <free+0x44>
 a36:	d3 83       	std	Z+3, r29	; 0x03
 a38:	c2 83       	std	Z+2, r28	; 0x02
 a3a:	40 81       	ld	r20, Z
 a3c:	51 81       	ldd	r21, Z+1	; 0x01
 a3e:	84 0f       	add	r24, r20
 a40:	95 1f       	adc	r25, r21
 a42:	c8 17       	cp	r28, r24
 a44:	d9 07       	cpc	r29, r25
 a46:	59 f4       	brne	.+22     	; 0xa5e <free+0x82>
 a48:	88 81       	ld	r24, Y
 a4a:	99 81       	ldd	r25, Y+1	; 0x01
 a4c:	84 0f       	add	r24, r20
 a4e:	95 1f       	adc	r25, r21
 a50:	02 96       	adiw	r24, 0x02	; 2
 a52:	91 83       	std	Z+1, r25	; 0x01
 a54:	80 83       	st	Z, r24
 a56:	8a 81       	ldd	r24, Y+2	; 0x02
 a58:	9b 81       	ldd	r25, Y+3	; 0x03
 a5a:	93 83       	std	Z+3, r25	; 0x03
 a5c:	82 83       	std	Z+2, r24	; 0x02
 a5e:	21 15       	cp	r18, r1
 a60:	31 05       	cpc	r19, r1
 a62:	29 f4       	brne	.+10     	; 0xa6e <free+0x92>
 a64:	f0 93 17 01 	sts	0x0117, r31	; 0x800117 <__flp+0x1>
 a68:	e0 93 16 01 	sts	0x0116, r30	; 0x800116 <__flp>
 a6c:	3d c0       	rjmp	.+122    	; 0xae8 <free+0x10c>
 a6e:	e9 01       	movw	r28, r18
 a70:	fb 83       	std	Y+3, r31	; 0x03
 a72:	ea 83       	std	Y+2, r30	; 0x02
 a74:	49 91       	ld	r20, Y+
 a76:	59 91       	ld	r21, Y+
 a78:	c4 0f       	add	r28, r20
 a7a:	d5 1f       	adc	r29, r21
 a7c:	ec 17       	cp	r30, r28
 a7e:	fd 07       	cpc	r31, r29
 a80:	61 f4       	brne	.+24     	; 0xa9a <free+0xbe>
 a82:	80 81       	ld	r24, Z
 a84:	91 81       	ldd	r25, Z+1	; 0x01
 a86:	84 0f       	add	r24, r20
 a88:	95 1f       	adc	r25, r21
 a8a:	02 96       	adiw	r24, 0x02	; 2
 a8c:	e9 01       	movw	r28, r18
 a8e:	99 83       	std	Y+1, r25	; 0x01
 a90:	88 83       	st	Y, r24
 a92:	82 81       	ldd	r24, Z+2	; 0x02
 a94:	93 81       	ldd	r25, Z+3	; 0x03
 a96:	9b 83       	std	Y+3, r25	; 0x03
 a98:	8a 83       	std	Y+2, r24	; 0x02
 a9a:	e0 e0       	ldi	r30, 0x00	; 0
 a9c:	f0 e0       	ldi	r31, 0x00	; 0
 a9e:	12 96       	adiw	r26, 0x02	; 2
 aa0:	8d 91       	ld	r24, X+
 aa2:	9c 91       	ld	r25, X
 aa4:	13 97       	sbiw	r26, 0x03	; 3
 aa6:	00 97       	sbiw	r24, 0x00	; 0
 aa8:	19 f0       	breq	.+6      	; 0xab0 <free+0xd4>
 aaa:	fd 01       	movw	r30, r26
 aac:	dc 01       	movw	r26, r24
 aae:	f7 cf       	rjmp	.-18     	; 0xa9e <free+0xc2>
 ab0:	8d 91       	ld	r24, X+
 ab2:	9c 91       	ld	r25, X
 ab4:	11 97       	sbiw	r26, 0x01	; 1
 ab6:	9d 01       	movw	r18, r26
 ab8:	2e 5f       	subi	r18, 0xFE	; 254
 aba:	3f 4f       	sbci	r19, 0xFF	; 255
 abc:	82 0f       	add	r24, r18
 abe:	93 1f       	adc	r25, r19
 ac0:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <__brkval>
 ac4:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <__brkval+0x1>
 ac8:	28 17       	cp	r18, r24
 aca:	39 07       	cpc	r19, r25
 acc:	69 f4       	brne	.+26     	; 0xae8 <free+0x10c>
 ace:	30 97       	sbiw	r30, 0x00	; 0
 ad0:	29 f4       	brne	.+10     	; 0xadc <free+0x100>
 ad2:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <__flp+0x1>
 ad6:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <__flp>
 ada:	02 c0       	rjmp	.+4      	; 0xae0 <free+0x104>
 adc:	13 82       	std	Z+3, r1	; 0x03
 ade:	12 82       	std	Z+2, r1	; 0x02
 ae0:	b0 93 15 01 	sts	0x0115, r27	; 0x800115 <__brkval+0x1>
 ae4:	a0 93 14 01 	sts	0x0114, r26	; 0x800114 <__brkval>
 ae8:	df 91       	pop	r29
 aea:	cf 91       	pop	r28
 aec:	08 95       	ret

00000aee <_exit>:
 aee:	f8 94       	cli

00000af0 <__stop_program>:
 af0:	ff cf       	rjmp	.-2      	; 0xaf0 <__stop_program>
