C51 COMPILER V9.53.0.0   INITDEVICE                                                        04/24/2018 12:57:53 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE INITDEVICE
OBJECT MODULE PLACED IN .\src\InitDevice.OBJ
COMPILER INVOKED BY: c:\SiliconLabs\SimplicityStudio\v4\developer\toolchains\keil_8051\9.53\BIN\C51.exe C:\Users\Rilind\
                    -Desktop\System_project\Exam_Project\Exam_Project_2\F99x-98x_SleepMode_PortMatchWake\src\InitDevice.c OMF2 SMALL DEBUG OB
                    -JECTEXTEND ROM(LARGE) WARNINGLEVEL(2) FLOATFUZZY(3) OPTIMIZE(8,SPEED) DEFINE(DEBUG=1) INTVECTOR(0X0000) INTPROMOTE INCDI
                    -R(C:/Users/Rilind/Desktop/System_project/Exam_Project/Exam_Project_2/F99x-98x_SleepMode_PortMatchWake/inc;C:/SiliconLabs
                    -/SimplicityStudio/v4/developer/sdks/8051/v4.1.1//Device/shared/si8051base;C:/SiliconLabs/SimplicityStudio/v4/developer/s
                    -dks/8051/v4.1.1//Device/C8051F990/inc) PRINT(.\src\InitDevice.lst) COND PAGEWIDTH(120) PAGELENGTH(65) OBJECT(.\src\InitD
                    -evice.OBJ)

line level    source

   1          //=========================================================
   2          // src/InitDevice.c: generated by Hardware Configurator
   3          //
   4          // This file will be regenerated when saving a document.
   5          // leave the sections inside the "$[...]" comment tags alone
   6          // or they will be overwritten!
   7          //=========================================================
   8          
   9          // USER INCLUDES
  10          #include <SI_C8051F990_Register_Enums.h>
  11          #include "InitDevice.h"
  12          
  13          // USER PROTOTYPES
  14          // USER FUNCTIONS
  15          
  16          
  17          //==============================================================================
  18          // enter_DefaultMode_from_RESET
  19          //==============================================================================
  20          extern void enter_DefaultMode_from_RESET(void) {
  21   1              // $[Config Calls]
  22   1              PCA_0_enter_DefaultMode_from_RESET();
  23   1              PORTS_0_enter_DefaultMode_from_RESET();
  24   1              PORTS_1_enter_DefaultMode_from_RESET();
  25   1              PBCFG_0_enter_DefaultMode_from_RESET();
  26   1              CLOCK_0_enter_DefaultMode_from_RESET();
  27   1              FLASH_0_enter_DefaultMode_from_RESET();
  28   1              TIMER16_2_enter_DefaultMode_from_RESET();
  29   1              TIMER_SETUP_0_enter_DefaultMode_from_RESET();
  30   1              RSTSRC_0_enter_DefaultMode_from_RESET();
  31   1              INTERRUPT_0_enter_DefaultMode_from_RESET();
  32   1              PMU_0_enter_DefaultMode_from_RESET();
  33   1              // [Config Calls]$
  34   1      
  35   1      
  36   1      }
  37          
  38          
  39          //================================================================================
  40          // PCA_0_enter_DefaultMode_from_RESET
  41          //================================================================================
  42          extern void PCA_0_enter_DefaultMode_from_RESET(void) {
  43   1              // $[Watchdog Disable]
  44   1              // Stop Watchdog
  45   1              // If MCU is reset by WDT before it runs to main(), please disable it in SILABS_STARTUP.A51
  46   1              SFRPAGE = 0x00;
  47   1              PCA0MD &= ~PCA0MD_WDTE__BMASK;
  48   1      
  49   1              // [Watchdog Disable]$
  50   1      
C51 COMPILER V9.53.0.0   INITDEVICE                                                        04/24/2018 12:57:53 PAGE 2   

  51   1              // $[PCA0CPM0 - PCA Channel 0 Capture/Compare Mode 0]
  52   1              // [PCA0CPM0 - PCA Channel 0 Capture/Compare Mode 0]$
  53   1      
  54   1              // $[PCA0CPL0 - PCA Channel 0 Capture Module Low Byte]
  55   1              // [PCA0CPL0 - PCA Channel 0 Capture Module Low Byte]$
  56   1      
  57   1              // $[PCA0CPH0 - PCA Channel 0 Capture Module High Byte]
  58   1              // [PCA0CPH0 - PCA Channel 0 Capture Module High Byte]$
  59   1      
  60   1              // $[PCA0CPM1 - PCA Channel 1 Capture/Compare Mode]
  61   1              // [PCA0CPM1 - PCA Channel 1 Capture/Compare Mode]$
  62   1      
  63   1              // $[PCA0CPL1 - PCA Channel 1 Capture Module Low Byte]
  64   1              // [PCA0CPL1 - PCA Channel 1 Capture Module Low Byte]$
  65   1      
  66   1              // $[PCA0CPH1 - PCA Channel 1 Capture Module High Byte]
  67   1              // [PCA0CPH1 - PCA Channel 1 Capture Module High Byte]$
  68   1      
  69   1              // $[PCA0CPM2 - PCA Channel 2 Capture/Compare Mode]
  70   1              // [PCA0CPM2 - PCA Channel 2 Capture/Compare Mode]$
  71   1      
  72   1              // $[PCA0CPL2 - PCA Channel 2 Capture Module Low Byte]
  73   1              // [PCA0CPL2 - PCA Channel 2 Capture Module Low Byte]$
  74   1      
  75   1              // $[PCA0CPH2 - PCA Channel 2 Capture Module High Byte]
  76   1              // [PCA0CPH2 - PCA Channel 2 Capture Module High Byte]$
  77   1      
  78   1              // $[PCA0CN - PCA Control]
  79   1              // [PCA0CN - PCA Control]$
  80   1      
  81   1              // $[PCA0L - PCA Counter/Timer Low Byte]
  82   1              // [PCA0L - PCA Counter/Timer Low Byte]$
  83   1      
  84   1              // $[PCA0H - PCA Counter/Timer High Byte]
  85   1              // [PCA0H - PCA Counter/Timer High Byte]$
  86   1      
  87   1              // $[PCA0PWM - PCA PWM Configuration]
  88   1              // [PCA0PWM - PCA PWM Configuration]$
  89   1      
  90   1              // $[PCA0MD - PCA Mode]
  91   1              // [PCA0MD - PCA Mode]$
  92   1      
  93   1              // $[WDT - Watchdog run Control]
  94   1              // [WDT - Watchdog run Control]$
  95   1      
  96   1      
  97   1      }
  98          
  99          //================================================================================
 100          // PORTS_0_enter_DefaultMode_from_RESET
 101          //================================================================================
 102          extern void PORTS_0_enter_DefaultMode_from_RESET(void) {
 103   1              // $[P0 - Port 0 Pin Latch]
 104   1              // [P0 - Port 0 Pin Latch]$
 105   1      
 106   1              // $[P0MDOUT - Port 0 Output Mode]
 107   1              // [P0MDOUT - Port 0 Output Mode]$
 108   1      
 109   1              // $[P0MDIN - Port 0 Input Mode]
 110   1              // [P0MDIN - Port 0 Input Mode]$
 111   1      
 112   1              // $[P0SKIP - Port 0 Skip]
 113   1              // [P0SKIP - Port 0 Skip]$
C51 COMPILER V9.53.0.0   INITDEVICE                                                        04/24/2018 12:57:53 PAGE 3   

 114   1      
 115   1              // $[P0MASK - Port 0 Mask]
 116   1              /*
 117   1              // B0 (Port 0 Bit 0 Mask Value) = IGNORED (P0.0 pin logic value is
 118   1              //     ignored and will not cause a port mismatch event.)
 119   1              // B1 (Port 0 Bit 1 Mask Value) = IGNORED (P0.1 pin logic value is
 120   1              //     ignored and will not cause a port mismatch event.)
 121   1              // B2 (Port 0 Bit 2 Mask Value) = COMPARED (P0.2 pin logic value is
 122   1              //     compared to P0MAT.2.)
 123   1              // B3 (Port 0 Bit 3 Mask Value) = IGNORED (P0.3 pin logic value is
 124   1              //     ignored and will not cause a port mismatch event.)
 125   1              // B4 (Port 0 Bit 4 Mask Value) = IGNORED (P0.4 pin logic value is
 126   1              //     ignored and will not cause a port mismatch event.)
 127   1              // B5 (Port 0 Bit 5 Mask Value) = IGNORED (P0.5 pin logic value is
 128   1              //     ignored and will not cause a port mismatch event.)
 129   1              // B6 (Port 0 Bit 6 Mask Value) = IGNORED (P0.6 pin logic value is
 130   1              //     ignored and will not cause a port mismatch event.)
 131   1              // B7 (Port 0 Bit 7 Mask Value) = IGNORED (P0.7 pin logic value is
 132   1              //     ignored and will not cause a port mismatch event.)
 133   1              */
 134   1              P0MASK = P0MASK_B0__IGNORED | P0MASK_B1__IGNORED | P0MASK_B2__COMPARED
 135   1                       | P0MASK_B3__IGNORED | P0MASK_B4__IGNORED | P0MASK_B5__IGNORED
 136   1                       | P0MASK_B6__IGNORED | P0MASK_B7__IGNORED;
 137   1              // [P0MASK - Port 0 Mask]$
 138   1      
 139   1              // $[P0MAT - Port 0 Match]
 140   1              // [P0MAT - Port 0 Match]$
 141   1      
 142   1              // $[P0DRV - Port 0 Drive Strength]
 143   1              // [P0DRV - Port 0 Drive Strength]$
 144   1      
 145   1      
 146   1      }
 147          
 148          //================================================================================
 149          // PORTS_1_enter_DefaultMode_from_RESET
 150          //================================================================================
 151          extern void PORTS_1_enter_DefaultMode_from_RESET(void) {
 152   1              // $[P1 - Port 1 Pin Latch]
 153   1              // [P1 - Port 1 Pin Latch]$
 154   1      
 155   1              // $[P1MDOUT - Port 1 Output Mode]
 156   1              /*
 157   1              // B0 (Port 1 Bit 0 Output Mode) = OPEN_DRAIN (P1.0 output is open-
 158   1              //     drain.)
 159   1              // B1 (Port 1 Bit 1 Output Mode) = OPEN_DRAIN (P1.1 output is open-
 160   1              //     drain.)
 161   1              // B2 (Port 1 Bit 2 Output Mode) = OPEN_DRAIN (P1.2 output is open-
 162   1              //     drain.)
 163   1              // B3 (Port 1 Bit 3 Output Mode) = PUSH_PULL (P1.3 output is push-pull.)
 164   1              // B4 (Port 1 Bit 4 Output Mode) = OPEN_DRAIN (P1.4 output is open-
 165   1              //     drain.)
 166   1              // B5 (Port 1 Bit 5 Output Mode) = PUSH_PULL (P1.5 output is push-pull.)
 167   1              // B6 (Port 1 Bit 6 Output Mode) = OPEN_DRAIN (P1.6 output is open-
 168   1              //     drain.)
 169   1              // B7 (Port 1 Bit 7 Output Mode) = OPEN_DRAIN (P1.7 output is open-
 170   1              //     drain.)
 171   1              */
 172   1              P1MDOUT = P1MDOUT_B0__OPEN_DRAIN | P1MDOUT_B1__OPEN_DRAIN | P1MDOUT_B2__OPEN_DRAIN
 173   1                       | P1MDOUT_B3__PUSH_PULL | P1MDOUT_B4__OPEN_DRAIN | P1MDOUT_B5__PUSH_PULL
 174   1                       | P1MDOUT_B6__OPEN_DRAIN | P1MDOUT_B7__OPEN_DRAIN;
 175   1              // [P1MDOUT - Port 1 Output Mode]$
 176   1      
C51 COMPILER V9.53.0.0   INITDEVICE                                                        04/24/2018 12:57:53 PAGE 4   

 177   1              // $[P1MDIN - Port 1 Input Mode]
 178   1              /*
 179   1              // B0 (Port 1 Bit 0 Input Mode) = DIGITAL (P1.0 pin is configured for
 180   1              //     digital mode.)
 181   1              // B1 (Port 1 Bit 1 Input Mode) = DIGITAL (P1.1 pin is configured for
 182   1              //     digital mode.)
 183   1              // B2 (Port 1 Bit 2 Input Mode) = DIGITAL (P1.2 pin is configured for
 184   1              //     digital mode.)
 185   1              // B3 (Port 1 Bit 3 Input Mode) = DIGITAL (P1.3 pin is configured for
 186   1              //     digital mode.)
 187   1              // B4 (Port 1 Bit 4 Input Mode) = DIGITAL (P1.4 pin is configured for
 188   1              //     digital mode.)
 189   1              // B5 (Port 1 Bit 5 Input Mode) = DIGITAL (P1.5 pin is configured for
 190   1              //     digital mode.)
 191   1              // B6 (Port 1 Bit 6 Input Mode) = ANALOG (P1.6 pin is configured for
 192   1              //     analog mode.)
 193   1              // B7 (Port 1 Bit 7 Input Mode) = ANALOG (P1.7 pin is configured for
 194   1              //     analog mode.)
 195   1              */
 196   1              P1MDIN = P1MDIN_B0__DIGITAL | P1MDIN_B1__DIGITAL | P1MDIN_B2__DIGITAL
 197   1                       | P1MDIN_B3__DIGITAL | P1MDIN_B4__DIGITAL | P1MDIN_B5__DIGITAL
 198   1                       | P1MDIN_B6__ANALOG | P1MDIN_B7__ANALOG;
 199   1              // [P1MDIN - Port 1 Input Mode]$
 200   1      
 201   1              // $[P1SKIP - Port 1 Skip]
 202   1              // [P1SKIP - Port 1 Skip]$
 203   1      
 204   1              // $[P1MASK - Port 1 Mask]
 205   1              // [P1MASK - Port 1 Mask]$
 206   1      
 207   1              // $[P1MAT - Port 1 Match]
 208   1              // [P1MAT - Port 1 Match]$
 209   1      
 210   1              // $[P1DRV - Port 1 Drive Strength]
 211   1              // [P1DRV - Port 1 Drive Strength]$
 212   1      
 213   1      
 214   1      }
 215          
 216          //================================================================================
 217          // PBCFG_0_enter_DefaultMode_from_RESET
 218          //================================================================================
 219          extern void PBCFG_0_enter_DefaultMode_from_RESET(void) {
 220   1              // $[XBR2 - Port I/O Crossbar 2]
 221   1              /*
 222   1              // WEAKPUD (Port I/O Weak Pullup Disable) = PULL_UPS_ENABLED (Weak
 223   1              //     Pullups enabled (except for Ports whose I/O are configured for analog
 224   1              //     mode).)
 225   1              // XBARE (Crossbar Enable) = ENABLED (Crossbar enabled.)
 226   1              */
 227   1              XBR2 = XBR2_WEAKPUD__PULL_UPS_ENABLED | XBR2_XBARE__ENABLED;
 228   1              // [XBR2 - Port I/O Crossbar 2]$
 229   1      
 230   1              // $[XBR0 - Port I/O Crossbar 0]
 231   1              // [XBR0 - Port I/O Crossbar 0]$
 232   1      
 233   1              // $[XBR1 - Port I/O Crossbar 1]
 234   1              // [XBR1 - Port I/O Crossbar 1]$
 235   1      
 236   1      
 237   1      }
 238          
 239          //================================================================================
C51 COMPILER V9.53.0.0   INITDEVICE                                                        04/24/2018 12:57:53 PAGE 5   

 240          // CLOCK_0_enter_DefaultMode_from_RESET
 241          //================================================================================
 242          extern void CLOCK_0_enter_DefaultMode_from_RESET(void) {
 243   1              // $[CLKSEL - Clock Select]
 244   1              /*
 245   1              // CLKDIV (Clock Source Divider) = SYSCLK_DIV_1 (SYSCLK is equal to
 246   1              //     selected clock source divided by 1.)
 247   1              // CLKSL (Clock Source Select) = LPOSC (Clock derived from the Internal
 248   1              //     Low Power Oscillator.)
 249   1              */
 250   1              CLKSEL = CLKSEL_CLKDIV__SYSCLK_DIV_1 | CLKSEL_CLKSL__LPOSC;
 251   1              // [CLKSEL - Clock Select]$
 252   1      
 253   1      
 254   1      }
 255          
 256          //================================================================================
 257          // FLASH_0_enter_DefaultMode_from_RESET
 258          //================================================================================
 259          extern void FLASH_0_enter_DefaultMode_from_RESET(void) {
 260   1              // $[FLSCL - Flash Scale]
 261   1              /*
 262   1              // BYPASS (Flash Read Timing One-Shot Bypass) = SYSCLK (The system clock
 263   1              //     determines the flash read time. This setting should be used for
 264   1              //     frequencies greater than 14 MHz.)
 265   1              */
 266   1              FLSCL = FLSCL_BYPASS__SYSCLK;
 267   1              // [FLSCL - Flash Scale]$
 268   1      
 269   1      
 270   1      }
 271          
 272          //================================================================================
 273          // TIMER16_2_enter_DefaultMode_from_RESET
 274          //================================================================================
 275          extern void TIMER16_2_enter_DefaultMode_from_RESET(void) {
 276   1              // $[Timer Initialization]
 277   1              // Save Timer Configuration
 278   1              U8 TMR2CN_TR2_save = TMR2CN & TMR2CN_TR2__BMASK;
 279   1              // Stop Timer
 280   1              TMR2CN &= ~(TMR2CN_TR2__BMASK);
 281   1              // [Timer Initialization]$
 282   1      
 283   1              // $[TMR2CN - Timer 2 Control]
 284   1              // [TMR2CN - Timer 2 Control]$
 285   1      
 286   1              // $[TMR2H - Timer 2 High Byte]
 287   1              /*
 288   1              // TMR2H (Timer 2 High Byte) = 52
 289   1              */
 290   1              TMR2H = (52 << TMR2H_TMR2H__SHIFT);
 291   1              // [TMR2H - Timer 2 High Byte]$
 292   1      
 293   1              // $[TMR2L - Timer 2 Low Byte]
 294   1              /*
 295   1              // TMR2L (Timer 2 Low Byte) = 141
 296   1              */
 297   1              TMR2L = (141 << TMR2L_TMR2L__SHIFT);
 298   1              // [TMR2L - Timer 2 Low Byte]$
 299   1      
 300   1              // $[TMR2RLH - Timer 2 Reload High Byte]
 301   1              /*
 302   1              // TMR2RLH (Timer 2 Reload High Byte) = 52
C51 COMPILER V9.53.0.0   INITDEVICE                                                        04/24/2018 12:57:53 PAGE 6   

 303   1              */
 304   1              TMR2RLH = (52 << TMR2RLH_TMR2RLH__SHIFT);
 305   1              // [TMR2RLH - Timer 2 Reload High Byte]$
 306   1      
 307   1              // $[TMR2RLL - Timer 2 Reload Low Byte]
 308   1              /*
 309   1              // TMR2RLL (Timer 2 Reload Low Byte) = 141
 310   1              */
 311   1              TMR2RLL = (141 << TMR2RLL_TMR2RLL__SHIFT);
 312   1              // [TMR2RLL - Timer 2 Reload Low Byte]$
 313   1      
 314   1              // $[TMR2CN]
 315   1              /*
 316   1              // TR2 (Timer 2 Run Control) = RUN (Start Timer 2 running.)
 317   1              */
 318   1              TMR2CN |= TMR2CN_TR2__RUN;
 319   1              // [TMR2CN]$
 320   1      
 321   1              // $[Timer Restoration]
 322   1              // Restore Timer Configuration
 323   1              TMR2CN |= TMR2CN_TR2_save;
 324   1              // [Timer Restoration]$
 325   1      
 326   1      
 327   1      }
 328          
 329          //================================================================================
 330          // TIMER_SETUP_0_enter_DefaultMode_from_RESET
 331          //================================================================================
 332          extern void TIMER_SETUP_0_enter_DefaultMode_from_RESET(void) {
 333   1              // $[CKCON - Clock Control]
 334   1              // [CKCON - Clock Control]$
 335   1      
 336   1              // $[TMOD - Timer 0/1 Mode]
 337   1              // [TMOD - Timer 0/1 Mode]$
 338   1      
 339   1              // $[TCON - Timer 0/1 Control]
 340   1              // [TCON - Timer 0/1 Control]$
 341   1      
 342   1      
 343   1      }
 344          
 345          //================================================================================
 346          // RSTSRC_0_enter_DefaultMode_from_RESET
 347          //================================================================================
 348          extern void RSTSRC_0_enter_DefaultMode_from_RESET(void) {
 349   1              // $[RSTSRC - Reset Source]
 350   1              /*
 351   1              // C0RSEF (Comparator0 Reset Enable and Flag) = NOT_SET (A Comparator 0
 352   1              //     reset did not occur.)
 353   1              // MCDRSF (Missing Clock Detector Enable and Flag) = SET (A missing clock
 354   1              //     detector reset occurred.)
 355   1              // PORSF (Power-On / Supply Monitor Reset Flag, and Supply Monitor Reset
 356   1              //     Enable) = SET (A power-on or supply monitor reset occurred.)
 357   1              // RTC0RE (RTC Reset Enable and Flag) = NOT_SET (A RTC alarm or
 358   1              //     oscillator fail reset did not occur.)
 359   1              // SWRSF (Software Reset Force and Flag) = NOT_SET (A software reset did
 360   1              //     not occur.)
 361   1              */
 362   1              RSTSRC = RSTSRC_C0RSEF__NOT_SET | RSTSRC_MCDRSF__SET | RSTSRC_PORSF__SET
 363   1                       | RSTSRC_RTC0RE__NOT_SET | RSTSRC_SWRSF__NOT_SET;
 364   1              // [RSTSRC - Reset Source]$
 365   1      
C51 COMPILER V9.53.0.0   INITDEVICE                                                        04/24/2018 12:57:53 PAGE 7   

 366   1      
 367   1      }
 368          
 369          //================================================================================
 370          // INTERRUPT_0_enter_DefaultMode_from_RESET
 371          //================================================================================
 372          extern void INTERRUPT_0_enter_DefaultMode_from_RESET(void) {
 373   1              // $[EIE1 - Extended Interrupt Enable 1]
 374   1              // [EIE1 - Extended Interrupt Enable 1]$
 375   1      
 376   1              // $[EIP1 - Extended Interrupt Priority 1]
 377   1              // [EIP1 - Extended Interrupt Priority 1]$
 378   1      
 379   1              // $[IE - Interrupt Enable]
 380   1              /*
 381   1              // EA (All Interrupts Enable) = ENABLED (Enable each interrupt according
 382   1              //     to its individual mask setting.)
 383   1              // EX0 (External Interrupt 0 Enable) = DISABLED (Disable external
 384   1              //     interrupt 0.)
 385   1              // EX1 (External Interrupt 1 Enable) = DISABLED (Disable external
 386   1              //     interrupt 1.)
 387   1              // ESPI0 (SPI0 Interrupt Enable) = DISABLED (Disable all SPI0
 388   1              //     interrupts.)
 389   1              // ET0 (Timer 0 Interrupt Enable) = DISABLED (Disable all Timer 0
 390   1              //     interrupt.)
 391   1              // ET1 (Timer 1 Interrupt Enable) = DISABLED (Disable all Timer 1
 392   1              //     interrupt.)
 393   1              // ET2 (Timer 2 Interrupt Enable) = ENABLED (Enable interrupt requests
 394   1              //     generated by the TF2L or TF2H flags.)
 395   1              // ES0 (UART0 Interrupt Enable) = DISABLED (Disable UART0 interrupt.)
 396   1              */
 397   1              IE = IE_EA__ENABLED | IE_EX0__DISABLED | IE_EX1__DISABLED | IE_ESPI0__DISABLED
 398   1                       | IE_ET0__DISABLED | IE_ET1__DISABLED | IE_ET2__ENABLED | IE_ES0__DISABLED;
 399   1              // [IE - Interrupt Enable]$
 400   1      
 401   1              // $[IP - Interrupt Priority]
 402   1              // [IP - Interrupt Priority]$
 403   1      
 404   1              // $[EIE2 - Extended Interrupt Enable 2]
 405   1              // [EIE2 - Extended Interrupt Enable 2]$
 406   1      
 407   1              // $[EIP2 - Extended Interrupt Priority 2]
 408   1              // [EIP2 - Extended Interrupt Priority 2]$
 409   1      
 410   1      
 411   1      }
 412          
 413          //================================================================================
 414          // PMU_0_enter_DefaultMode_from_RESET
 415          //================================================================================
 416          extern void PMU_0_enter_DefaultMode_from_RESET(void) {
 417   1              // $[PCON - Power Control]
 418   1              // [PCON - Power Control]$
 419   1      
 420   1              // $[PMU0CF - Power Management Unit Configuration]
 421   1              // [PMU0CF - Power Management Unit Configuration]$
 422   1      
 423   1              // $[PMU0FL - Power Management Unit Flag]
 424   1              // [PMU0FL - Power Management Unit Flag]$
 425   1      
 426   1              // $[PMU0MD - Power Management Unit Mode]
 427   1              // [PMU0MD - Power Management Unit Mode]$
 428   1      
C51 COMPILER V9.53.0.0   INITDEVICE                                                        04/24/2018 12:57:53 PAGE 8   

 429   1      
 430   1      }
 431          
 432          
 433          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =     98    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
