C51 COMPILER V9.53.0.0   F99X_SMBUS_MASTER                                                 04/09/2018 12:53:51 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE F99X_SMBUS_MASTER
OBJECT MODULE PLACED IN .\src\F99x_SMBus_Master.OBJ
COMPILER INVOKED BY: c:\SiliconLabs\SimplicityStudio\v4\developer\toolchains\keil_8051\9.53\BIN\C51.exe C:\Users\Rilind\
                    -Desktop\System_project\Exam_Project\Exam_Project_2\F99x-98x_SMBus_Master\src\F99x_SMBus_Master.c OMF2 SMALL DEBUG OBJECT
                    -EXTEND ROM(LARGE) WARNINGLEVEL(2) FLOATFUZZY(3) OPTIMIZE(8,SPEED) DEFINE(DEBUG=1) INTVECTOR(0X0000) INTPROMOTE INCDIR(C:
                    -/Users/Rilind/Desktop/System_project/Exam_Project/Exam_Project_2/F99x-98x_SMBus_Master/inc;C:/SiliconLabs/SimplicityStud
                    -io/v4/developer/sdks/8051/v4.1.1//Device/shared/si8051base;C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.1.1
                    -//Device/C8051F990/inc) PRINT(.\src\F99x_SMBus_Master.lst) COND PAGEWIDTH(120) PAGELENGTH(65) OBJECT(.\src\F99x_SMBus_Ma
                    -ster.OBJ)

line level    source

   1          //-----------------------------------------------------------------------------
   2          // F99x_SMBus_Master.c
   3          //-----------------------------------------------------------------------------
   4          // Copyright 2014 Silicon Laboratories, Inc.
   5          // http://developer.silabs.com/legal/version/v11/Silicon_Labs_Software_License_Agreement.txt
   6          //
   7          // Program Description:
   8          //
   9          // Example software to demonstrate the SMBus interface in
  10          // Master mode.
  11          // - Interrupt-driven SMBus implementation
  12          // - Only master states defined (no slave or arbitration)
  13          // - 1-byte SMBus data holders used for each transmit and receive
  14          // - Timer1 used as SMBus clock source
  15          // - Timer3 used by SMBus for SCL low timeout detection
  16          // - SCL frequency defined by SMBus 0 module in Configurator
  17          // - SMB0CN_ARBLOST support included
  18          // - Pinout:
  19          //    P0.0 -> SDA (SMBus)
  20          //    P0.1 -> SCL (SMBus)
  21          //
  22          //    P1.3 -> YELLOW_LED
  23          //
  24          //    P2.7 -> C2D (debug interface)
  25          //
  26          //    all other port pins unused
  27          //
  28          // How To Test:
  29          //
  30          // 1) Verify that J13 and J14 are not populated.
  31          // 2) Ensure that jumpers are placed on the following:
  32          //       J11:  PWR/WALL_PWR
  33          //       J17:  VDD_PIN/PWR
  34          // 3) Connect the device to another 'Fxxx device running SMBus - Slave code.
  35          // 4) Connect the USB Debug Adapter to J4.
  36          // 5) Turn the POWER switch (SW5) to the "ON" position.
  37          // 6) Compile and download code to a 'F99x device on a C8051F99x-TB development
  38          //    board by selecting Run -> Debug from the menus, clicking the Debug button
  39          //    in the quick menu, or pressing F11.
  40          // 7) Run the code by selecting Run -> Resume from the menus, clicking the
  41          //    Resume button in the quick menu, or pressing F8:
  42          //         a) The test will indicate proper communication with the slave by
  43          //            toggling the YELLOW_LED on and off each time a value is sent and
  44          //            received.
  45          //         b) The best method to view the proper functionality is to run to
  46          //            the indicated line of code in the TEST CODE section of main and
  47          //            view the SMB_DATA_IN and SMB_DATA_OUT variables in the Watch
  48          //            Window.
  49          //
  50          //
C51 COMPILER V9.53.0.0   F99X_SMBUS_MASTER                                                 04/09/2018 12:53:51 PAGE 2   

  51          // Target:         C8051F99x-C8051F98x
  52          // Tool chain:     Simplicity Studio / Keil C51 9.51
  53          // Command Line:   None
  54          //
  55          // Release 1.1 (BL)
  56          //    - Updated Description / How to Test
  57          //    - 13 JAN 2014
  58          //
  59          // Release 1.0
  60          //    - Initial Revision (FB)
  61          //    - 19 MAY 2010
  62          //
  63          
  64          //-----------------------------------------------------------------------------
  65          // Includes
  66          //-----------------------------------------------------------------------------
  67          #include <compiler_defs.h>
  68          #include <SI_C8051F990_Register_Enums.h>                  // SFR declarations
  69          #include "InitDevice.h"
  70          #include <stdio.h>
  71          #include "F99x_SMBus_Master.h"
  72          
  73          //-----------------------------------------------------------------------------
  74          // Global VARIABLES
  75          //-----------------------------------------------------------------------------
  76          U8 SMB_DATA_IN;                        // Global holder for SMBus data
  77                                                 // All receive data is written here
  78          
  79          U8 SMB_DATA_OUT;
  80          U8 SMB_REG_OUT;
  81          U8 START_SMB;
  82          U8 RW_Reg; // Global holder for SMBus data.
  83                                                 // All transmit data is read from here
  84          
  85          U8 TARGET;                             // Target SMBus slave address
  86          
  87          volatile bit SMB_BUSY;                 // Software flag to indicate when the
  88                                                 // SMB_Read() or SMB_Write() functions
  89                                                 // have claimed the SMBus
  90          
  91          volatile bit SMB_RW;                   // Software flag to indicate the
  92                                                 // direction of the current transfer
  93          
  94          U16 NUM_ERRORS;                        // Counter for the number of errors.
  95          
  96          SBIT (SDA, SFR_P0, 0);                 // SMBus on P0.0
  97          SBIT (SCL, SFR_P0, 1);                 // and P0.1
  98          
  99          LOCATED_VARIABLE_NO_INIT (reserved, U8, SEG_XDATA, 0x0000);
 100          
 101          //-----------------------------------------------------------------------------
 102          // Function PROTOTYPES
 103          //-----------------------------------------------------------------------------
 104          
 105          void SMB_Write (void);
 106          void SMB_Read (void);
 107          void T0_Wait_ms (U8 ms);
 108          void SMB_Write_Reg(U8 Addr,U8 Reg, U8 Dat);
 109          U8 SMB_Read_Reg(U8 Addr, U8 Reg);
 110          void UART_Init(int baudrate);
 111          void UART_Send(char c);
 112          
 113          
C51 COMPILER V9.53.0.0   F99X_SMBUS_MASTER                                                 04/09/2018 12:53:51 PAGE 3   

 114          //-----------------------------------------------------------------------------
 115          // SiLabs_Startup() Routine
 116          // ----------------------------------------------------------------------------
 117          // This function is called immediately after reset, before the initialization
 118          // code is run in SILABS_STARTUP.A51 (which runs before main() ). This is a
 119          // useful place to disable the watchdog timer, which is enable by default
 120          // and may trigger before main() in some instances.
 121          //-----------------------------------------------------------------------------
 122          void SiLabs_Startup (void)
 123          {
 124   1        // Disable the watchdog here
 125   1      }
 126          
 127          //-----------------------------------------------------------------------------
 128          // main() Routine
 129          // ----------------------------------------------------------------------------
 130          void UART_Init(int baudrate)
 131          {
 132   1              SCON0 = 0x50;  // Asynchronous mode, 8-bit data and 1-stop bit
 133   1          TMOD = 0x20;  //Timer1 in Mode2.
 134   1         // TH1 = 256 - (24500000UL)/(long)(32*12*baudrate); // Load timer value for baudrate generation
 135   1          TH1 = (0x2B << TH1_TH1__SHIFT);
 136   1          TCON |= (1<<6);      //Turn ON the timer for Baud rate generation
 137   1      }
*** WARNING C280 IN LINE 130 OF C:\Users\Rilind\Desktop\System_project\Exam_Project\Exam_Project_2\F99x-98x_SMBus_Master
             -\src\F99x_SMBus_Master.c: 'baudrate': unreferenced local variable
 138          
 139          void UART_Send(char c)
 140          {
 141   1              SBUF0 = c;      // Load the data to be transmitted
 142   1              while(SCON0_TI==0);   // Wait till the data is trasmitted
 143   1              SCON0_TI = 0;
 144   1      }
 145          void print(char* string,U8 num)
 146          {
 147   1              char c=0;
 148   1              char s[10];
 149   1              int8_t j=0;
 150   1              int8_t i=0;
 151   1              U8 len = 0;
 152   1              while ((c=(*(string++))) != '\0') {
 153   2                      UART_Send(c);
 154   2                      len++;
 155   2              }
 156   1      
 157   1              for(;j<10;j++){
 158   2                              *(string++)=(num%10)+'0';
 159   2                              s[j]=((num%10)+'0');
 160   2                              num=num/10;
 161   2                              if(num==0)
 162   2                              break;
 163   2              }
 164   1      
 165   1              for(i=(j);i>=0;i--)
 166   1              {
 167   2                      UART_Send(s[i]);
 168   2              }
 169   1              UART_Send('\r');
 170   1              //UART_Send('\n');
 171   1      
 172   1      
 173   1      
 174   1      }
C51 COMPILER V9.53.0.0   F99X_SMBUS_MASTER                                                 04/09/2018 12:53:51 PAGE 4   

 175          U8 SMB_Read_Reg(U8 Addr, U8 Reg)
 176          {
 177   1              RW_Reg=0;
 178   1              TARGET = Addr;
 179   1              SMB_REG_OUT = Reg;
 180   1              START_SMB=1;// Define next outgoing byte
 181   1              SMB_Write();                     // Initiate SMBus write
 182   1              START_SMB=1;
 183   1              TARGET = Addr|0x01;             // Target the F3xx/Si8250 Slave for next                                                                   // SMBus transfer
 184   1              SMB_Read();
 185   1              return SMB_DATA_IN;
 186   1      }
 187          
 188          void SMB_Write_Reg(U8 Addr,U8 Reg, U8 Dat)
 189          {
 190   1              RW_Reg=1;
 191   1                      TARGET = Addr;             // Target the F3xx/Si8250 Slave for next
 192   1                      START_SMB=1;
 193   1                      SMB_DATA_OUT = Dat;
 194   1                      SMB_REG_OUT = Reg;// SMBus transfer
 195   1                      SMB_Write();
 196   1      
 197   1                      while(SMB_BUSY){
 198   2                              ;;
 199   2                      }
 200   1      
 201   1      }
 202          
 203          int main (void)
 204          {
 205   1              volatile U8 dat;                    // Test counter
 206   1              U8 i;                               // Dummy variable counters
 207   1              double a;
 208   1              //Enter default mode
 209   1              enter_DefaultMode_from_RESET();
 210   1              //printf("%d",0x22);
 211   1              // If slave is holding SDA low because of an improper SMBus reset or error
 212   1              while(!SDA)
 213   1              {
 214   2                // Provide clock pulses to allow the slave to advance out
 215   2                // of its current state. This will allow it to release SDA.
 216   2                XBR2 = 0x40;                     // Enable Crossbar
 217   2                SCL = 0;                         // Drive the clock low
 218   2                for(i = 0; i < 255; i++);        // Hold the clock low
 219   2                SCL = 1;                         // Release the clock
 220   2                while(!SCL);                     // Wait for open-drain
 221   2                                                                                 // clock output to rise
 222   2                for(i = 0; i < 10; i++);         // Hold the clock high
 223   2                XBR2 = 0x00;                     // Disable Crossbar
 224   2              }
 225   1      
 226   1              enter_Mode2_from_DefaultMode();
 227   1               UART_Init(57600);
 228   1      
 229   1              dat = 0;                            // Output data counter
 230   1              NUM_ERRORS = 0;                     // Error counter
 231   1      
 232   1              //SMB_Write_Reg(0x30,0x20,0x37);
 233   1      
 234   1              SMB_Write_Reg(0xEE,0xE0,0xB6);
 235   1              SMB_Write_Reg(0xEE,0x72,0x01);
 236   1              SMB_Write_Reg(0xEE,0x74,0x25);
 237   1              while (1)
C51 COMPILER V9.53.0.0   F99X_SMBUS_MASTER                                                 04/09/2018 12:53:51 PAGE 5   

 238   1              {
 239   2                      SMB_Write_Reg(0xEE,0x74,0x25);
 240   2               // UART_Send(SMB_Read_Reg(0x30,0x2B));
 241   2                //UART_Send(SMB_Read_Reg(0xEE,0xD0));
 242   2      
 243   2              //      UART_Send(SMB_Read_Reg(0xEE,0x23));
 244   2      
 245   2                      print("TEMP_H: ",SMB_Read_Reg(0xEE,0x22));
 246   2                      print("TEMP_L: ",SMB_Read_Reg(0xEE,0x23));
 247   2                      print("----------",0);
 248   2               // UART_Send('\n');
 249   2      
 250   2                // Check transfer data
 251   2                if(SMB_DATA_IN != 0x20)  // Received data match transmit data?
 252   2                {
 253   3                       NUM_ERRORS++;                 // Increment error counter if no match
 254   3                }
 255   2      
 256   2                // Indicate that an error has occurred (YELLOW_LED no longer lit)
 257   2      
 258   2                       YELLOW_LED = !YELLOW_LED;
 259   2      
 260   2                       //YELLOW_LED= 1;
 261   2      
 262   2                // Run to here to view the SMB_DATA_IN and SMB_DATA_OUT variables
 263   2      
 264   2      
 265   2              //  printf("weds");
 266   2               for(a=0;a<100000;a++){
 267   3                       ;;
 268   3                       // Wait 50 ms until the next cycle
 269   3               }
 270   2                                                                                      // so that YELLOW_LED blinks slow
 271   2                                                                                      // enough to see
 272   2      
 273   2              }
 274   1      
 275   1              // END TEST CODE---------------------------------------------------------------
 276   1      
 277   1              // NOTREACHED
 278   1              return 0;
 279   1      }
 280          
 281          //-----------------------------------------------------------------------------
 282          // Support Functions
 283          //-----------------------------------------------------------------------------
 284          
 285          //-----------------------------------------------------------------------------
 286          // SMB_Write
 287          //-----------------------------------------------------------------------------
 288          //
 289          // Return Value : None
 290          // Parameters   : None
 291          //
 292          // Writes a single byte to the slave with address specified by the <TARGET>
 293          // variable.
 294          // Calling sequence:
 295          // 1) Write target slave address to the <TARGET> variable
 296          // 2) Write outgoing data to the <SMB_DATA_OUT> variable
 297          // 3) Call SMB_Write()
 298          //
 299          //-----------------------------------------------------------------------------
 300          void SMB_Write (void)
C51 COMPILER V9.53.0.0   F99X_SMBUS_MASTER                                                 04/09/2018 12:53:51 PAGE 6   

 301          {
 302   1         while (SMB_BUSY);                   // Wait for SMBus to be free.
 303   1         SMB_BUSY = 1;                       // Claim SMBus (set to busy)
 304   1         SMB_RW = 0;                         // Mark this transfer as a WRITE
 305   1         SMB0CN_STA = 1;                            // Start transfer
 306   1      }
 307          
 308          //-----------------------------------------------------------------------------
 309          // SMB_Read
 310          //-----------------------------------------------------------------------------
 311          //
 312          // Return Value : None
 313          // Parameters   : None
 314          //
 315          // Reads a single byte from the slave with address specified by the <TARGET>
 316          // variable.
 317          // Calling sequence:
 318          // 1) Write target slave address to the <TARGET> variable
 319          // 2) Call SMB_Write()
 320          // 3) Read input data from <SMB_DATA_IN> variable
 321          //
 322          //-----------------------------------------------------------------------------
 323          void SMB_Read (void)
 324          {
 325   1         while (SMB_BUSY != 0);               // Wait for transfer to complete
 326   1         SMB_BUSY = 1;                       // Claim SMBus (set to busy)
 327   1         SMB_RW = 1;                         // Mark this transfer as a READ
 328   1      
 329   1         SMB0CN_STA = 1;                            // Start transfer
 330   1      
 331   1         while (SMB_BUSY);                   // Wait for transfer to complete
 332   1      }
 333          
 334          //-----------------------------------------------------------------------------
 335          // T0_Wait_ms
 336          //-----------------------------------------------------------------------------
 337          //
 338          // Return Value : None
 339          // Parameters   :
 340          //   1) U8 ms - number of milliseconds to wait
 341          //                        range is full range of character: 0 to 255
 342          //
 343          // Configure Timer0 to wait for <ms> milliseconds using SYSCLK as its time
 344          // base.
 345          //
 346          //-----------------------------------------------------------------------------
 347          void T0_Wait_ms (U8 ms)
 348          {
 349   1      
 350   1         while (ms) {
 351   2            TCON_TR0 = 0;                         // Stop Timer0
 352   2            TH0 = ((-(SYSCLK/1000)) >> 8);   // Overflow in 1ms
 353   2            TL0 = ((-(SYSCLK/1000)) & 0xFF);
 354   2            TCON_TF0 = 0;                         // Clear overflow indicator
 355   2            TCON_TR0 = 1;                         // Start Timer0
 356   2            while (!TCON_TF0);                    // Wait for overflow
 357   2            ms--;                            // Update ms counter
 358   2         }
 359   1      
 360   1         TCON_TR0 = 0;                            // Stop Timer0
 361   1      }
 362          
 363          //-----------------------------------------------------------------------------
C51 COMPILER V9.53.0.0   F99X_SMBUS_MASTER                                                 04/09/2018 12:53:51 PAGE 7   

 364          // End Of File
 365          //-----------------------------------------------------------------------------
*** WARNING C294 IN LINE 278 OF C:\Users\Rilind\Desktop\System_project\Exam_Project\Exam_Project_2\F99x-98x_SMBus_Master
             -\src\F99x_SMBus_Master.c: unreachable code


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    457    ----
   CONSTANT SIZE    =     29    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      8      22
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      2    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  2 WARNING(S),  0 ERROR(S)
